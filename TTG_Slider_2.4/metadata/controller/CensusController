{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "CensusController",
        "models": [
            "Census"
        ],
        "stores": [
            "CensusMaine2000",
            "CensusFilterStore",
            "CensusFreezeStore"
        ],
        "views": [
            "CensusMaineContainer",
            "CensusFilterCont",
            "CensusDetailPanel",
            "CensusFreezeCont"
        ]
    },
    "designerId": "e2658624-eb71-46f2-8a24-1af4059141e5",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "list#censusmainelist",
                "designer|targetType": "Ext.dataview.List",
                "fn": "onCensusMaineListDisclose",
                "implHandler": [
                    "var swapcont;\r",
                    "var listitemid = list.getItemId();\r",
                    "\r",
                    "swapcont = commonController.getMainContainer().down('#menucontswap');\r",
                    "myList = swapcont.getActiveItem().down('touchtreegrid');\r",
                    "\r",
                    "if (swapcont)\r",
                    "{\r",
                    "    var newcont = this.getCensusdetailpanel(\r",
                    "    {\r",
                    "        title : '2000 Census (Maine)',\r",
                    "        itemId : 'censusmainedetail',\r",
                    "        layout: {type: 'vbox'},\r",
                    "        scrollable: 'vertical'\r",
                    "    }\r",
                    "    );\r",
                    "    newcont.swapcontitem = swapcont.getActiveItem();  // store with component for use in back button\r",
                    "\r",
                    "    var device = ((Ext.os.is.Phone) ? 'phone' : 'tablet');\r",
                    "    var orient = ((Ext.Viewport.getWindowWidth() > Ext.Viewport.getWindowHeight()) ? 'landscape' : 'portrait');\r",
                    "\r",
                    "    var inputCls = ((device==='phone' && orient==='portrait') ? 'detailtextfields-phone-portrait' : 'detailtextfields');\r",
                    "\r",
                    "    if (newcont)\r",
                    "    {\r",
                    "        var newLabel = newcont.down('#censusdetaillabel');    \r",
                    "        newLabel.setHtml(record.get('CATEG'));       \r",
                    "\r",
                    "        var fldSet = newcont.down('#censusfieldset1');\r",
                    "        var result = fldSet.setConfig({\r",
                    "            items : [\r",
                    "            {label: 'Total Population',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.TotalPopulation, 0)}, \r",
                    "            {label: 'Male',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Male, 0)}, \r",
                    "            {label: 'Female',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Female, 0)}, \r",
                    "            {label: 'Under 5 years',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Under5years, 0)}, \r",
                    "            {label: '5 to 9',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age5to9, 0)}, \r",
                    "            {label: '10 to 14',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age10to14, 0)}, \r",
                    "            {label: '15 to 19',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age15to19, 0)}, \r",
                    "            {label: '20 to 24',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age20to24, 0)}, \r",
                    "            {label: '25 to 34',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age25to34, 0)}, \r",
                    "            {label: '35 to 44',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age35to44, 0)}, \r",
                    "            {label: '45 to 54',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age45to54, 0)}, \r",
                    "            {label: '55 to 59',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age55to59, 0)}, \r",
                    "            {label: '60 to 64',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age60to64, 0)}, \r",
                    "            {label: '65 to 74',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65to74, 0)}, \r",
                    "            {label: '75 to 84',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age75to84, 0)}, \r",
                    "            {label: '85 and Over',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age85andOver, 0)}, \r",
                    "            {label: 'Median Age',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.MedianAge, 0)}, \r",
                    "            {label: '18 and Over',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age18andOver, 0)}, \r",
                    "            {label: '18 and Over Male',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age18andOverMale, 0)}, \r",
                    "            {label: '18 and Over Female',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age18andOverFemale, 0)}, \r",
                    "            {label: '21 and Over',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age21andOver, 0)}, \r",
                    "            {label: '62 and Over',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age62andOver, 0)}, \r",
                    "            {label: '65 and Over',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65andOver, 0)}, \r",
                    "            {label: '65 and Over Male',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65andOverMale, 0)}, \r",
                    "            {label: '65 and Over Female',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65andOverFemale, 0)}\r",
                    "        ]}); \r",
                    "\r",
                    "        var fldSet2 = newcont.down('#censusfieldset2');\r",
                    "        var resul2t = fldSet2.setConfig({\r",
                    "            items : [\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.TotalPopulation/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Male/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Female/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Under5years/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age5to9/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age10to14/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age15to19/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age20to24/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age25to34/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age35to44/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age45to54/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age55to59/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age60to64/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65to74/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age75to84/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age85andOver/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.MedianAge/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age18andOver/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age18andOverMale/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age18andOverFemale/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age21andOver/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age62andOver/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65andOver/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65andOverMale/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65andOverFemale/record.data.TotalPopulation*100, 1, \"\", \"%\")}\r",
                    "        ]}); \r",
                    "        swapcont.add(newcont);\r",
                    "        swapcont.setActiveItem(newcont);      \r",
                    "    }\r",
                    "}"
                ],
                "name": "disclose"
            },
            "name": "onCensusMaineListDisclose",
            "designerId": "73cfef90-3627-4ea2-832a-c33624cfe85d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "list#censusfilterlist",
                "designer|targetType": "Ext.dataview.List",
                "fn": "onCensusFilterListDisclose",
                "implHandler": [
                    "this.onCensusMaineListDisclose(list, record, target, index, e, eOpts);"
                ],
                "name": "disclose"
            },
            "name": "onCensusFilterListDisclose",
            "designerId": "e566ac19-34c3-4b3a-91e0-db28d5f3bcad"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#censusdetailbackbtn",
                "designer|targetType": "Ext.Button",
                "fn": "onCensusDetailBackButtonTap",
                "implHandler": [
                    "// Resusing this back button method for both Censusmaine and Censusfilter items\r",
                    "var priorcont =  button.up('#censusmainedetail'); \r",
                    "\r",
                    "// Get parent containder for detail window (stored with priorcont component at creation)\r",
                    "var swapcontitem = priorcont.swapcontitem;  \r",
                    "var swapcont = swapcontitem.getParent();\r",
                    "\r",
                    "if (swapcont)\r",
                    "{  \r",
                    "    swapcontitem.setShowAnimation({type :\"slide\", direction : \"right\"});\r",
                    "    swapcont.setActiveItem(swapcontitem);  \r",
                    "}    \r",
                    ""
                ],
                "name": "tap"
            },
            "name": "onCensusDetailBackButtonTap",
            "designerId": "2c06dea5-31a1-4501-a664-230cb5bddf94"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "censusdetailpanel",
                "selector": "censusdetailpanel",
                "xtype": "censusdetailpanel"
            },
            "name": "censusdetailpanel",
            "designerId": "2f1c2645-a5f4-4460-87a8-d6190c78e667"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "censusMaineContainer",
                "selector": "censusMaineContainer",
                "xtype": "censusMaineContainer"
            },
            "name": "censusMaineContainer",
            "designerId": "ce19217c-9f03-418a-ab41-6630d6f5b821"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "censusFilterCont",
                "selector": "censusFilterCont",
                "xtype": "censusFilterCont"
            },
            "name": "censusFilterCont",
            "designerId": "30d3fee1-fc3f-419b-8ece-ba765685f759"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "censusFreezeCont",
                "selector": "censusFreezeCont",
                "xtype": "censusFreezeCont"
            },
            "name": "censusFreezeCont",
            "designerId": "c55c8be1-88e8-45ee-a519-0d17872f4923"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "censusmaine",
                "selector": "#censusmaine"
            },
            "name": "censusmaine",
            "designerId": "4206bb04-0e2f-4691-9b1f-4b7a274d9cf3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadCensusMaine2000Store",
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var gridcont = me.getCensusMaineContainer().down('#censusmaine');\r",
                    "var gridurl = './data/censusmaine2000TREE.json';\r",
                    "\r",
                    "commonController.loadStore(me, gridcont, gridurl, 'Loading Census...');\r",
                    "\r",
                    ""
                ]
            },
            "name": "loadCensusMaine2000Store",
            "designerId": "1eff90dd-55d2-4cdb-a40d-685c94f942b4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadCensusFreezeStore",
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var gridcont = me.getCensusFreezeCont().down('#censusfreeze');\r",
                    "var gridurl = './data/censusmaine2000TREE.json';\r",
                    "\r",
                    "commonController.loadStore(me, gridcont, gridurl, 'Loading Census...');\r",
                    ""
                ]
            },
            "name": "loadCensusFreezeStore",
            "designerId": "cad21b88-9b1e-4eb3-beec-b6df0fc19672"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridcont",
                    "noRefresh"
                ],
                "fn": "loadColumnsCensusMaine",
                "implHandler": [
                    "/* Demo grid column changes based on device (phone vs. tablet) and orientation (portrait vs. landscape) */\r",
                    "/* NOTE:  When connected to data source suggest storing array configruations in a table \r",
                    "for each grid, device and orienation configuration */ \r",
                    "\r",
                    "var device = ((Ext.os.is.Phone) ? 'phone' : 'tablet');\r",
                    "var orient = ((Ext.Viewport.getWindowWidth() > Ext.Viewport.getWindowHeight()) ? 'landscape' : 'portrait');\r",
                    "\r",
                    "var colArr = [];\r",
                    "\r",
                    "if (device==='phone' && orient==='portrait') {\r",
                    "    colArr = [\r",
                    "    {\r",
                    "        header: '&nbsp;',\r",
                    "        dataIndex: 'CATEG',\r",
                    "        width: '55%',\r",
                    "        style: 'text-align: left;',\r",
                    "        categStyle: 'text-align: left;',\r",
                    "        headerStyle: 'text-align: left; color: #ccc;'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Population',\r",
                    "        dataIndex: 'TotalPopulation',\r",
                    "        width: '25%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.TotalPopulation, 0)'\r",
                    "    }\r",
                    "\r",
                    "    ];    \r",
                    "}\r",
                    "\r",
                    "if (device==='phone' && orient==='landscape') {\r",
                    "    colArr = [\r",
                    "    {\r",
                    "        header: '&nbsp;',\r",
                    "        dataIndex: 'CATEG',\r",
                    "        width: '32%',\r",
                    "        style: 'text-align: left;',\r",
                    "        categStyle: 'text-align: left;',\r",
                    "        headerStyle: 'text-align: left; color: #ccc;'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Population',\r",
                    "        dataIndex: 'TotalPopulation',\r",
                    "        width: '15%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.TotalPopulation, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Males',\r",
                    "        dataIndex: 'Male',\r",
                    "        width: '15%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Male, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Females',\r",
                    "        dataIndex: 'Female',\r",
                    "        width: '15%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Female, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Median',\r",
                    "        dataIndex: 'MedianAge',\r",
                    "        width: '15%',\r",
                    "        style: 'text-align: center;',\r",
                    "        categStyle: 'text-align: center;',\r",
                    "        headerStyle: 'text-align: center; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.MedianAge, 0)'\r",
                    "    }\r",
                    "    ];  \r",
                    "}\r",
                    "\r",
                    "if (device==='tablet' && orient==='portrait') {\r",
                    "    colArr = [\r",
                    "    {\r",
                    "        header: '&nbsp;',\r",
                    "        dataIndex: 'CATEG',\r",
                    "        width: '21%',\r",
                    "        style: 'text-align: left;',\r",
                    "        categStyle: 'font-weight: bold; text-align: left; color: blue;',\r",
                    "        headerStyle: 'text-align: left; color: #ccc;'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Population',\r",
                    "        dataIndex: 'TotalPopulation',\r",
                    "        width: '11%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.TotalPopulation, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Males',\r",
                    "        dataIndex: 'Male',\r",
                    "        width: '11%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Male, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Females',\r",
                    "        dataIndex: 'Female',\r",
                    "        width: '11%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Female, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Median',\r",
                    "        dataIndex: 'MedianAge',\r",
                    "        width: '11%',\r",
                    "        style: 'text-align: center;',\r",
                    "        categStyle: 'text-align: center;',\r",
                    "        headerStyle: 'text-align: center; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.MedianAge, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: '18+',\r",
                    "        dataIndex: 'Age18andOver',\r",
                    "        width: '11%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Age18andOver, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: '21+',\r",
                    "        dataIndex: 'Age21andOver',\r",
                    "        width: '11%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Age21andOver, 0)'\r",
                    "    }\r",
                    "    ];    \r",
                    "\r",
                    "}\r",
                    "\r",
                    "if (device==='tablet' && orient==='landscape') {\r",
                    "    colArr = [\r",
                    "    {\r",
                    "        header: '&nbsp;',\r",
                    "        dataIndex: 'CATEG',\r",
                    "        width: '21%',\r",
                    "        style: 'text-align: left;',\r",
                    "        categStyle: 'text-align: left;',\r",
                    "        headerStyle: 'text-align: left; color: #ccc;'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Population',\r",
                    "        dataIndex: 'TotalPopulation',\r",
                    "        width: '10%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.TotalPopulation, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Males',\r",
                    "        dataIndex: 'Male',\r",
                    "        width: '8%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Male, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Females',\r",
                    "        dataIndex: 'Female',\r",
                    "        width: '8%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Female, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Median',\r",
                    "        dataIndex: 'MedianAge',\r",
                    "        width: '8%',\r",
                    "        style: 'text-align: center;',\r",
                    "        categStyle: 'text-align: center;',\r",
                    "        headerStyle: 'text-align: center; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.MedianAge, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: '18+',\r",
                    "        dataIndex: 'Age18andOver',\r",
                    "        width: '8%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Age18andOver, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: '21+',\r",
                    "        dataIndex: 'Age21andOver',\r",
                    "        width: '8%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Age21andOver, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: '62+',\r",
                    "        dataIndex: 'Age62andOver',\r",
                    "        width: '8%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Age62andOver, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: '65+',\r",
                    "        dataIndex: 'Age65andOver',\r",
                    "        width: '8%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Age65andOver, 0)'\r",
                    "    }\r",
                    "    ];    \r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "gridcont.setColumns(colArr);\r",
                    "if (!noRefresh) {\r",
                    "    gridcont.doRefreshList(true);   // Don't change collapse levels when refreshing\r",
                    "}    \r",
                    ""
                ]
            },
            "name": "loadColumnsCensusMaine",
            "designerId": "322879fa-149c-4fdc-bd65-9dd33163b6e3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridcont",
                    "noRefresh"
                ],
                "fn": "loadColumnsCensusFreeze",
                "implHandler": [
                    "var colArr = [\r",
                    "{\r",
                    "    header: \"Total\", \r",
                    "    dataIndex: \"TotalPopulation\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.TotalPopulation, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"Male\", \r",
                    "    dataIndex: \"Male\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Male, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"Female\", \r",
                    "    dataIndex: \"Female\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Female, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"<5yrs\", \r",
                    "    dataIndex: \"Under5years\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Under5years, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"5-9\", \r",
                    "    dataIndex: \"Age5to9\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age5to9, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"10-14\", \r",
                    "    dataIndex: \"Age10to14\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age10to14, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"15-19\", \r",
                    "    dataIndex: \"Age15to19\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age15to19, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"20-24\", \r",
                    "    dataIndex: \"Age20to24\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age20to24, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"25-34\", \r",
                    "    dataIndex: \"Age25to34\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age25to34, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"35-44\", \r",
                    "    dataIndex: \"Age35to44\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age35to44, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"45-54\", \r",
                    "    dataIndex: \"Age45to54\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age45to54, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"55-59\", \r",
                    "    dataIndex: \"Age55to59\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age55to59, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"60-64\", \r",
                    "    dataIndex: \"Age60to64\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age60to64, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"65-74\", \r",
                    "    dataIndex: \"Age65to74\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age65to74, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"75-84\", \r",
                    "    dataIndex: \"Age75to84\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age75to84, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"85+\", \r",
                    "    dataIndex: \"Age85andOver\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age85andOver, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"Median\", \r",
                    "    dataIndex: \"MedianAge\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.MedianAge, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"18+\", \r",
                    "    dataIndex: \"Age18andOver\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age18andOver, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"18+ Male\", \r",
                    "    dataIndex: \"Age18andOverMale\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age18andOverMale, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"18+ Fem\", \r",
                    "    dataIndex: \"Age18andOverFemale\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age18andOverFemale, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"21+\", \r",
                    "    dataIndex: \"Age21andOver\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age21andOver, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"62+\", \r",
                    "    dataIndex: \"Age62andOver\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age62andOver, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"65+\", \r",
                    "    dataIndex: \"Age65andOver\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age65andOver, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"65+ Male\", \r",
                    "    dataIndex: \"Age65andOverMale\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age65andOverMale, 0)\", \r",
                    "    style: \"text-align:  right;\" \r",
                    "}, \r",
                    "{\r",
                    "    header: \"65+ Fem\", \r",
                    "    dataIndex: \"Age65andOverFemale\", \r",
                    "    width: \"100px\", \r",
                    "    renderer: \"this.formatNumbers(values.Age65andOverFemale, 0)\", \r",
                    "    style: \"text-align:  center;\" \r",
                    "}\r",
                    "];\r",
                    "\r",
                    "gridcont.setColumns(colArr);\r",
                    "if (!noRefresh) {\r",
                    "    gridcont.doRefreshList(true);   // Don't change collapse levels when refreshing\r",
                    "}    \r",
                    ""
                ]
            },
            "name": "loadColumnsCensusFreeze",
            "designerId": "d20407f1-97d1-4ef2-a642-4182213934ba"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridcont",
                    "grid"
                ],
                "fn": "loadCensusFilterStore",
                "implHandler": [
                    "var me = this;\r",
                    "var gridurl = 'data/censusmaine2000FLAT.json';\r",
                    "\r",
                    "// Passing loadStoreInPostProcess=true because for this example we will \r",
                    "// be loading census store (flatfile format) and then post-processing\r",
                    "// into treestore format \r",
                    "commonController.loadStore(me, gridcont, gridurl, 'Loading Census Filter...', true);\r",
                    ""
                ]
            },
            "name": "loadCensusFilterStore",
            "designerId": "6e6547ec-2a3b-4218-a745-5150fbcd63cc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#censusfilterexpandbtn",
                "designer|targetType": "Ext.Button",
                "fn": "onCensusFilterExpandButtonTap",
                "implHandler": [
                    "var gridcont = button.up('#censusfiltersubcont').down('touchtreegrid');\r",
                    "var selectValue = button.up('toolbar').down('#censusfilterselect').getValue();\r",
                    "this.applyCensusFilter(gridcont, selectValue, 99);"
                ],
                "name": "tap"
            },
            "name": "onCensusFilterExpandButtonTap",
            "designerId": "b274e29a-7432-48f7-9954-423ad2c2fbc6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#censusfiltercollapsebtn",
                "designer|targetType": "Ext.Button",
                "fn": "onCensusFilterCollapseButtonTap",
                "implHandler": [
                    "var gridcont = button.up('#censusfiltersubcont').down('touchtreegrid');\r",
                    "var selectValue = button.up('toolbar').down('#censusfilterselect').getValue();\r",
                    "this.applyCensusFilter(gridcont, selectValue, 0);"
                ],
                "name": "tap"
            },
            "name": "onCensusFilterCollapseButtonTap",
            "designerId": "032a73ab-f8c3-408a-86fb-48dc80b8131f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "selectfield#censusfilterselect",
                "designer|targetType": "Ext.field.Select",
                "fn": "onCensusFilterSelectfieldChange",
                "implHandler": [
                    "var gridcont = selectfield.up('#censusfiltersubcont').down('touchtreegrid');\r",
                    "this.applyCensusFilter(gridcont, newValue);"
                ],
                "name": "change"
            },
            "name": "onCensusFilterSelectfieldChange",
            "designerId": "2782a702-87db-4aa5-8aa4-48f3285e9a1e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridcont",
                    "selectFieldValue",
                    "collapseTo",
                    "ArrRef"
                ],
                "fn": "applyCensusFilter",
                "implHandler": [
                    "var gridlistname = gridcont.getListItemId();\r",
                    "var gridlist = gridcont.down('#'+gridlistname);\r",
                    "var myFilt, skipApplyDefaultCollapseLevel;\r",
                    "\r",
                    "if (!Ext.isEmpty(ArrRef)) {gridlist.ArrRef = ArrRef;}  // Store ArrRef to Grid component for faster collapse/expand\r",
                    "else {ArrRef = gridlist.ArrRef;} // Retrieved on subsequent calls\r",
                    "\r",
                    "if (selectFieldValue === '0') {\r",
                    "\r",
                    "    collapseLvl = (Ext.isEmpty(gridcont.collapseLevel) ? 1 : gridcont.collapseLevel);\r",
                    "    skipApplyDefaultCollapseLevel = false;\r",
                    "    // Refer to expCollapse() method where collapseLevel could be updated for manual expand processing\r",
                    "    myFilt = {};\r",
                    "\r",
                    "} else {\r",
                    "    collapseLvl = 99; // Fully expand filtered output\r",
                    "    skipApplyDefaultCollapseLevel = true;\r",
                    "    myFilt = {\r",
                    "        enabled: true,\r",
                    "        displayNodesWithAllMembersFilteredAsLeafs: true\r",
                    "    };\r",
                    "\r",
                    "    if (selectFieldValue === '1') {  // Males > Females             \r",
                    "        // Alternative way to define function if building dynamically\r",
                    "        var v1 = 'Male';\r",
                    "        var v2 = 'Female';\r",
                    "        var oper = '>=';\r",
                    "\r",
                    "        // myFilt.filterFn = function (rowObj) {return (parseInt(rowObj.Male) >= parseInt(rowObj.Female));};\r",
                    "        // var func = new Function(\"x\", \"y\", \"return x*y;\");\r",
                    "        myFilt.filterFn = new Function(\"rowObj\", \"return (parseInt(rowObj.\" + v1 + ') ' + oper +\r",
                    "        ' parseInt(rowObj.' + v2 + \"));\");        \r",
                    "    }\r",
                    "    if (selectFieldValue === '2') {  // Females > Males\r",
                    "        myFilt.filterFn = function (rowObj) {return (parseInt(rowObj.Female) >= parseInt(rowObj.Male));};\r",
                    "    }    \r",
                    "    if (selectFieldValue === '3') {  // Population > 10k\r",
                    "        myFilt.filterFn = function (rowObj) {return (parseInt(rowObj.TotalPopulation) >= 10000);};\r",
                    "    }     \r",
                    "}    \r",
                    "\r",
                    "commonController.loadTree((Ext.isEmpty(collapseTo) ? collapseLvl : collapseTo),\r",
                    "ArrRef, [], gridcont, null, true, myFilt, \r",
                    "(Ext.isEmpty(collapseTo) ? skipApplyDefaultCollapseLevel : true)); \r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "name": "applyCensusFilter",
            "designerId": "c9edcfa6-c54e-4c66-ac87-343733f087ec"
        }
    ]
}