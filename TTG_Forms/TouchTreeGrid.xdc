{
    "xdsVersion": "3.1.0",
    "frameworkVersion": "touch24",
    "internals": {
        "type": "Ext.Container",
        "reference": {
            "name": "items",
            "type": "array"
        },
        "codeClass": null,
        "userConfig": {
            "additionalListConfigs": [
                "{}"
            ],
            "applyDefaultCollapseLevel": true,
            "arrowPctWidth": "4",
            "categColumns": [
                "[]"
            ],
            "categCssArr": [
                "[]"
            ],
            "categDepthColorButtons": true,
            "categDepthColors": false,
            "categDepthColorsArr": [
                "[\r",
                "'#a6a6a6',\r",
                "'#dddddd',\r",
                "'white'\r",
                "]"
            ],
            "categIndentPct": "3",
            "categItemTpl": "",
            "categItemTplOverride": "",
            "cls": [
                "x-touchtreegrid-list"
            ],
            "colNumberToTruncateForIndents": 1,
            "columnSorting": false,
            "columns": [
                "[]"
            ],
            "contentItemTpl": "",
            "contentItemTplOverride": "",
            "cssCategRow": "css-categ-row ",
            "cssContentRow": "css-content-row ",
            "cssHeaderRow": "css-header-row ",
            "cssSimpleRow": "",
            "customColumnSortEvent": "",
            "customExpCollapseEvent": "",
            "customFooterItems": [
                "{}"
            ],
            "defaultCollapseLevel": 99,
            "designer|userAlias": "touchtreegrid",
            "designer|userClassName": "TouchTreeGrid",
            "disableExpandCollapse": false,
            "disableSelection": true,
            "disclosureProperty": "disclose",
            "displayField": null,
            "footer": [
                "{\r",
                "            xtype: 'toolbar',\r",
                "            docked: 'bottom',\r",
                "            ui     : 'light',\r",
                "            cls: 'touchtreegrid-footer'\r",
                "        }"
            ],
            "footerDock": "bottom",
            "header": [
                "{\r",
                "            xtype: 'toolbar',\r",
                "            docked: 'top',\r",
                "            cls: 'touchtreegrid-header'\r",
                "        }"
            ],
            "headerItemData": null,
            "headerItemOuter": null,
            "headerItemTpl": null,
            "headerTpl": "",
            "headerTplOverride": "",
            "helpHtml": "",
            "hideExpandCollapseBtns": false,
            "includeCustomFooterItems": false,
            "includeFooter": true,
            "includeFooterLevels": true,
            "includeHeader": true,
            "infinite": true,
            "itemHeight": 47,
            "itemId": "touchtreegrid1",
            "landscapeIcon": "",
            "layout": "vbox",
            "linkedGridsArr": [
                "[]"
            ],
            "linkedGridsParentItemId": "",
            "list": [
                "{}"
            ],
            "listItemId": "touchtreegridlist",
            "listPlugins": [
                "{}"
            ],
            "listScrollable": [
                "true"
            ],
            "listStyle": null,
            "mode": "SINGLE",
            "onItemDisclosure": false,
            "onScrollOptions": null,
            "plugins": null,
            "pressedBtnCls": null,
            "pressedCls": "touchtreegrid-item-pressed",
            "renderers": [
                "{}"
            ],
            "scrollable": null,
            "selectedCls": "touchtreegrid-item-selected",
            "simpleList": false,
            "singleExpand": false,
            "store": "",
            "styleCategRow": "",
            "styleContentRow": "",
            "styleHeaderRow": "",
            "styleSimpleRow": "",
            "useAnimation": null,
            "useCustomPressedBtnCls": null,
            "useSimpleItems": true,
            "variableHeights": true
        },
        "name": "TouchTreeGrid1",
        "configAlternates": {
            "listScrollable": "object",
            "defaultExpanded": "boolean",
            "useAnimation": "boolean",
            "disableSelection": "boolean",
            "listStyle": "object",
            "onItemDisclosure": "boolean",
            "headerItemData": "array",
            "columns": "array",
            "header": "object",
            "variableHeights": "boolean",
            "itemHeight": "number",
            "footer": "object",
            "includeFooter": "boolean",
            "list": "object",
            "plugins": "object",
            "listPlugins": "object",
            "colNumberToTruncateForIndents": "number",
            "includeFooterLevels": "boolean",
            "categDepthColors": "boolean",
            "categDepthColorsArr": "array",
            "renderers": "object",
            "categDepthColorButtons": "boolean",
            "useCustomPressedBtnCls": "boolean",
            "includeHeader": "boolean",
            "autoApplyCollapseConfig": "boolean",
            "applyDefaultCollapseLevel": "boolean",
            "defaultCollapseLevel": "number",
            "simpleList": "boolean",
            "headerSorting": "boolean",
            "columnSorting": "boolean",
            "singleExpand": "boolean",
            "additionalListConfigs": "object",
            "useSimpleItems": "boolean",
            "infinite": "boolean",
            "scrollable": "object",
            "disableExpandCollapse": "boolean",
            "categColumns": "array",
            "categCssArr": "array",
            "customFooterItems": "object",
            "includeCustomFooterItems": "boolean",
            "hideExpandCollapseBtns": "boolean",
            "onScrollOptions": "object",
            "linkedGridsArr": "array"
        },
        "customConfigs": [
            {
                "group": "(Custom Properties)",
                "name": "store",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "displayField",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "listScrollable",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "headerItemTpl",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "contentItemTpl",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "useAnimation",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "list",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "headerItemOuter",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "headerItemInner",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "headerItemData",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "disableSelection",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "listStyle",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "onItemDisclosure",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "columns",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "header",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "headerTpl",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "variableHeights",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "itemHeight",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "disclosureProperty",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "listItemId",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "categItemTpl",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "footer",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "includeFooter",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "plugins",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "listPlugins",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "categIndentPct",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "colNumberToTruncateForIndents",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "includeFooterLevels",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "categDepthColors",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "categDepthColorsArr",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "customExpCollapseEvent",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "renderers",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "categDepthColorButtons",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "pressedBtnCls",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "useCustomPressedBtnCls",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "categItemTplOverride",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "contentItemTplOverride",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "headerTplOverride",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "includeHeader",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "applyDefaultCollapseLevel",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "defaultCollapseLevel",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "landscapeIcon",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "helpHtml",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "pressedCls",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "simpleList",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "columnSorting",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "styleContentRow",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "styleCategRow",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "styleHeaderRow",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "singleExpand",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "additionalListConfigs",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "selectedCls",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "mode",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "useSimpleItems",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "infinite",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "arrowPctWidth",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "customColumnSortEvent",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "disableExpandCollapse",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "categColumns",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "categCssArr",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "cssContentRow",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "cssCategRow",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "cssHeaderRow",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "customFooterItems",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "includeCustomFooterItems",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "footerDock",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "hideExpandCollapseBtns",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "linkedGridsParentItemId",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "onScrollOptions",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "linkedGridsArr",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "styleSimpleRow",
                "type": "string"
            },
            {
                "group": "(Custom Properties)",
                "name": "cssSimpleRow",
                "type": "string"
            }
        ],
        "cn": [
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "config"
                    ],
                    "fn": "initialize",
                    "implHandler": [
                        "var me = this;\r",
                        "\r",
                        "me.callParent(arguments);\r",
                        "\r",
                        "this.doRefreshList();\r",
                        "\r",
                        "// Process linked grids for synchronized scrolling if applicables\r",
                        "if (me.getLinkedGridsArr().length>0) {\r",
                        "   var listItemId = me.getListItemId();\r",
                        "   var gridlist = me.down('#'+listItemId);\r",
                        "   var scroller = gridlist.getScrollable().getScroller();\r",
                        "   scroller.on('scroll',   me.onScroll, me, me.getOnScrollOptions());   \r",
                        "}\r",
                        "\r",
                        ""
                    ]
                },
                "name": "initialize"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "fn": "updateColumns",
                    "implHandler": [
                        "// UPDATE functions on config items execute prior to INITIALIZE (and before UPDATESTORE) so",
                        "// insert logic here to build ItemTpl components",
                        "// NOTE:  Columns updated in this Class as [initialize] to force execution of this function.",
                        "",
                        "var me = this, myWidth, myWidthVal;",
                        "",
                        "var simpleList = me.getSimpleList();",
                        "",
                        "// Proceed to build TPL for header row",
                        "var styleStr = '', rendStr='', cssStr='', idxStr = '';",
                        "var categ = me.getCategItemTplOverride();",
                        "var indent = me.getCategIndentPct().toString().replace(\"%\", \"\"); // % of window to indent per level (starting at 0% ... default =3%)",
                        "var arrowWid = me.getArrowPctWidth().toString().replace(\"%\", \"\"); // allow control over percent screen width that category arrow consumes (def = 4%)",
                        "",
                        "",
                        "var categStyle = Ext.isEmpty(me.getStyleCategRow()) ? '' : ' style=\"' + me.getStyleCategRow() + '\"';",
                        "var contentStyle = Ext.isEmpty(me.getStyleContentRow()) ? '' : ' style=\"' + me.getStyleContentRow() + '\"';",
                        "var simpleStyle = Ext.isEmpty(me.getStyleSimpleRow()) ? '' : ' style=\"' + me.getStyleSimpleRow() + '\"';    // SWL added 11/22/14",
                        "",
                        "var categCss = Ext.isEmpty(me.getCssCategRow()) ? '' : ' class=\"' + me.getCssCategRow() + '\"';",
                        "var contentCss = Ext.isEmpty(me.getCssContentRow()) ? '' : ' class=\"' + me.getCssContentRow() + '\"';",
                        "var simpleCss = Ext.isEmpty(me.getCssSimpleRow()) ? '' : ' class=\"' + me.getCssSimpleRow() + '\"';   // SWL added 11/22/14",
                        "",
                        "var indentCol = me.getColNumberToTruncateForIndents()-1; // This column width value will be truncated to account for indent",
                        "// Subtract 1 from column number to array index # applied below.",
                        "// Width expected to be in pct format as last '%' character will be stripped for computation : '25%'",
                        "",
                        "var data = me.getColumns(); // single dimention array of objects defining each column",
                        "var categData = me.getCategColumns(); // optional multi-dimension array of objects of category columns defs by level",
                        "",
                        "if (this.isObjectEmpty(data)) {",
                        "    // Initialize column data for scenario where column array updated within controller after component initialization",
                        "    data ={header: '', dataIndex: '', width: '', style: '', categStyle: '', headerStyle: ''};",
                        "}",
                        "",
                        "var shellArr=[], i, k, categArr=[],",
                        "    prefixArr = ['<div' + categStyle + categCss + '>'];",
                        "",
                        "if (parseInt(indent) > 0) {",
                        "    prefixArr.push('<div align=\"left\" style=\"width:{[(values.depth-1)*'+indent+']}%;\"></div>');  // 3% per depth starting at 0%",
                        "}",
                        "if (parseInt(arrowWid) > 0) {",
                        "    prefixArr = prefixArr.concat([",
                        "    '<div align=\"left\" style=\"width:'+arrowWid+'%;min-width:'+arrowWid+'%;max-width:'+arrowWid+'%;white-space: nowrap;overflow:hidden;text-overflow:ellipsis;\">',",
                        "    '<span class=\"touchtreegrid-details-img ',",
                        "    '<tpl if=\"this.isExpanded(values)\">',",
                        "    'touchtreegrid-details-img-open' ,",
                        "    '<tpl else>',",
                        "    'touchtreegrid-details-img-close' ,",
                        "    '</tpl>',",
                        "    '\"</span>',",
                        "    '</div>'",
                        "    ]);",
                        "}",
                        "",
                        "if (categ==='' && !simpleList && Ext.isEmpty(categData)) {",
                        "    // Process category row TPL (same TPL for all category rows defined via Columns array)",
                        "",
                        "    shellArr.push(prefixArr.join(''));",
                        "    for (i=0; i<data.length; i++) {",
                        "",
                        "        // Use categStyle if exists, else apply detail row style to category row",
                        "        if (!Ext.isEmpty(data[i].categStyle) && data[i].categStyle > '') {styleStr = data[i].categStyle;}",
                        "        else if (!Ext.isEmpty(data[i].style)) {styleStr = data[i].style;}",
                        "        else {styleStr = '';}",
                        "",
                        "        // Use categCss if exists, else apply detail row css to category row (if defined)",
                        "        if (!Ext.isEmpty(data[i].categCss) && data[i].categCss > '') {cssStr = data[i].categCss;}",
                        "        else if (!Ext.isEmpty(data[i].css)) {cssStr = data[i].css;}",
                        "        else {cssStr = '';}",
                        "",
                        "        // Substitute user-defined renderer string from Columns array if defined",
                        "        rendStr = (Ext.isEmpty(data[i].renderer) ? (Ext.isEmpty(data[i].dataIndex) ? '' : data[i].dataIndex) : '[' + data[i].renderer + ']');",
                        "",
                        "        // Add dataIndex attribute to this DIV if requested in Columns array (for purposes of trapping cell tap)",
                        "        idxStr = ((!data[i].addDataIndexToDiv) ? '' : ' dataIndex=\"' + data[i].dataIndex + '\"');",
                        "",
                        "        if (i===indentCol) {",
                        "            // Subtract percentage width based on level",
                        "            shellArr.push('<div class=\"touchtreegrid-list-categ-cell ' + cssStr + '\" style=\"' +",
                        "            'min-width:{[' + data[i].width.replace(\"%\", \"\") + '-((values.depth-1)*'+indent+')]}% !important;' +",
                        "            'max-width:{[' + data[i].width.replace(\"%\", \"\") + '-((values.depth-1)*'+indent+')]}% !important;' +",
                        "            'width:{[' + data[i].width.replace(\"%\", \"\") + '-((values.depth-1)*'+indent+')]}% !important;' +",
                        "            styleStr + '\"' + idxStr + ' >{' + rendStr + '}</div>');",
                        "        } else {",
                        "            shellArr.push('<div class=\"touchtreegrid-list-categ-cell \" style=\"' +",
                        "            'min-width:' + data[i].width + ' !important;' +",
                        "            'max-width:' + data[i].width + ' !important;' +",
                        "            'width:' + data[i].width + ' !important;' +",
                        "            styleStr + '\"' + idxStr + ' >{' + rendStr + '}</div>');",
                        "        }",
                        "    }",
                        "",
                        "    shellArr.push('</div>');",
                        "    categ=shellArr.join('');",
                        "    me.setCategItemTpl(categ);",
                        "}",
                        "else if (categ==='' && !simpleList && !Ext.isEmpty(categData)) {",
                        "    // Process category row TPL as defined in categColumns.",
                        "",
                        "    shellArr = [];",
                        "    shellArr.push(prefixArr.join(''));  // Initialize with arrow and row style definitions",
                        "",
                        "    for (i=0; i<categData.length; i++) {  // loop for each object defined in current sub-array",
                        "",
                        "        // Use categStyle if exists, else apply detail row style to category row",
                        "        if (!Ext.isEmpty(categData[i].categStyle) && categData[i].categStyle > '') {styleStr = categData[i].categStyle;}",
                        "        else if (!Ext.isEmpty(categData[i].style)) {styleStr = categData[i].style;}",
                        "        else {styleStr = '';}",
                        "",
                        "        // Use categCss if exists, else apply detail row css to category row (if defined)",
                        "        if (!Ext.isEmpty(categData[i].categCss) && categData[i].categCss > '') {cssStr = categData[i].categCss;}",
                        "        else if (!Ext.isEmpty(categData[i].css)) {cssStr = categData[i].css;}",
                        "        else {cssStr = '';}",
                        "",
                        "        // Substitute user-defined renderer string from Columns array if defined",
                        "        rendStr = ((!categData[i].renderer) ? (Ext.isEmpty(categData[i].dataIndex) ? '' : categData[i].dataIndex) : '[' + categData[i].renderer + ']');",
                        "",
                        "        // Add dataIndex attribute to this DIV if requested in Columns array (for purposes of trapping cell tap)",
                        "        idxStr = ((!categData[i].addDataIndexToDiv) ? '' : ' dataIndex=\"' + categData[i].dataIndex + '\"');",
                        "",
                        "",
                        "        if (i===indentCol) {",
                        "            // Subtract percentage width based on level",
                        "            shellArr.push('<div class=\"touchtreegrid-list-categ-cell ' + cssStr + '\" style=\"' +",
                        "            'min-width:{[' + categData[i].width.replace(\"%\", \"\") + '-((values.depth-1)*'+indent+')]}% !important;' +",
                        "            'max-width:{[' + categData[i].width.replace(\"%\", \"\") + '-((values.depth-1)*'+indent+')]}% !important;' +",
                        "            'width:{[' + categData[i].width.replace(\"%\", \"\") + '-((values.depth-1)*'+indent+')]}% !important;' +",
                        "            styleStr + '\"' + idxStr + ' >{' + rendStr + '}</div>');",
                        "        } else {",
                        "            shellArr.push('<div class=\"touchtreegrid-list-categ-cell ' + cssStr + '\" style=\"' +",
                        "            'min-width:' + categData[i].width + ' !important;' +",
                        "            'max-width:' + categData[i].width + ' !important;' +",
                        "            'width:' + categData[i].width + ' !important;' +",
                        "            styleStr + '\"' + idxStr + ' >{' + rendStr + '}</div>');",
                        "        }",
                        "    }",
                        "",
                        "    shellArr.push('</div>');",
                        "    categArr=shellArr.join('');",
                        "",
                        "    me.setCategItemTpl(categArr);",
                        "",
                        "}",
                        "else {me.setCategItemTpl(categ);}  // simply update with TPL provided in CategItemTplOverride config (ignored for simpleList=true)",
                        "",
                        "var detail = me.getContentItemTplOverride();",
                        "var detailArr, j;",
                        "if (detail==='' && !simpleList) {",
                        "    detailArr = ['<div' + contentStyle + contentCss + '>'];",
                        "    if (parseInt(indent) > 0) {",
                        "        detailArr.push('<div align=\"left\" style=\"width:{[(values.depth-1)*'+indent+']}%;\"></div>');    // 3% per depth starting at 0%",
                        "    }",
                        "    if (parseInt(arrowWid) > 0) {",
                        "        detailArr.push('<div align=\"left\" style=\"width:'+arrowWid+'%;min-width:'+arrowWid+'%;max-width:'+arrowWid+'%;white-space: nowrap;overflow:hidden;text-overflow:ellipsis;\">&nbsp;</div>');",
                        "    }",
                        "",
                        "    for (j=0; j<data.length; j++) {",
                        "",
                        "        // Substitute user-defined renderer string from Columns array if defined",
                        "        rendStr = ((!data[j].renderer) ? (Ext.isEmpty(data[j].dataIndex) ? '' : data[j].dataIndex) : '[' + data[j].renderer + ']');",
                        "",
                        "        // Add dataIndex attribute to this DIV if requested in Columns array (for purposes of trapping cell tap)",
                        "        idxStr = ((!data[j].addDataIndexToDiv) ? '' : ' dataIndex=\"' + data[j].dataIndex + '\"');",
                        "",
                        "        cssStr = (Ext.isEmpty(data[j].css)) ? '' : data[j].css;",
                        "",
                        "        if (j===indentCol) {",
                        "            // Subtract percentage width based on level",
                        "            detailArr.push('<div class=\"touchtreegrid-list-content-cell ' + cssStr + '\" style=\"' +",
                        "            'min-width:{[' + data[j].width.replace(\"%\", \"\") + '-((values.depth-1)*'+indent+')]}% !important;' +",
                        "            'max-width:{[' + data[j].width.replace(\"%\", \"\") + '-((values.depth-1)*'+indent+')]}% !important;' +",
                        "            'width:{[' + data[j].width.replace(\"%\", \"\") + '-((values.depth-1)*'+indent+')]}% !important;' +",
                        "            (Ext.isEmpty(data[j].style) ? '' : data[j].style) + '\" ' + idxStr +",
                        "            '>{' + rendStr + '}</div>');",
                        "        } else {",
                        "            detailArr.push('<div class=\"touchtreegrid-list-content-cell ' + cssStr + '\" style=\"' +",
                        "            'min-width:' + data[j].width + ' !important;' +",
                        "            'max-width:' + data[j].width + ' !important;' +",
                        "            'width:' + data[j].width + ' !important;' +",
                        "            (Ext.isEmpty(data[j].style) ? '' : data[j].style) + '\" ' + idxStr +",
                        "            '>{' + rendStr + '}</div>');",
                        "        }",
                        "",
                        "    }",
                        "",
                        "    detailArr.push('</div>');",
                        "    detail=detailArr.join('');",
                        "}",
                        "if (detail==='' && simpleList) {",
                        "    detailArr = [",
                        "    // webkit-box handled by  \"display : inline-block;\" in TouchTreeGrid.css",
                        "    //   '<div style=\"display: -webkit-box;-webkit-box-orient: horizontal;\">',",
                        "    ];",
                        "    if (!Ext.isEmpty(simpleStyle) || !Ext.isEmpty(simpleCss)) {  // SWL added 11/22/14",
                        "        detailArr.push(['<div' + simpleStyle + simpleCss + '>']);",
                        "    }    ",
                        "",
                        "    for (j=0; j<data.length; j++) {",
                        "",
                        "        // Substitute user-defined renderer string from Columns array if defined",
                        "        rendStr = ((!data[j].renderer) ? data[j].dataIndex : '[' + data[j].renderer + ']');",
                        "",
                        "        // Add dataIndex attribute to this DIV if requested in Columns array (for purposes of trapping cell tap)",
                        "        idxStr = ((!data[j].addDataIndexToDiv) ? '' : ' dataIndex=\"' + data[j].dataIndex + '\"');",
                        "",
                        "        cssStr = (Ext.isEmpty(data[j].css)) ? '' : data[j].css;",
                        "",
                        "        detailArr.push('<div class=\"touchtreegrid-simplelist-cell ' + cssStr + '\" style=\"' +",
                        "        'min-width:' + data[j].width + ' !important;' +",
                        "        'max-width:' + data[j].width + ' !important;' +",
                        "        'width:' + data[j].width + ' !important;' +",
                        "        (Ext.isEmpty(data[j].style) ? '' : data[j].style) + '\" ' + idxStr +",
                        "        '>{' + rendStr + '}</div>');",
                        "    }",
                        "    if (!Ext.isEmpty(simpleStyle) || !Ext.isEmpty(simpleCss)) {  // SWL added 11/22/14",
                        "        detailArr.push(['</div>']);",
                        "    }    ",
                        "",
                        "    //   detailArr.push('</div>');",
                        "    detail=detailArr.join('');",
                        "}",
                        "var content = me.setContentItemTpl(detail);",
                        ""
                    ]
                },
                "name": "updateColumns"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "newStore",
                        "oldStore"
                    ],
                    "fn": "updateStore",
                    "implHandler": [
                        "var me = this;\r",
                        "\r",
                        "var list = me.getList();\r",
                        "var disableSel = me.getDisableSelection();\r",
                        "var pressedCls = (disableSel ? '' : me.getPressedCls());  // Don't apply pressing class if selection disabled\r",
                        "var selectedCls = me.getSelectedCls();\r",
                        "var mode = me.getMode();\r",
                        "var disclose = me.getOnItemDisclosure();\r",
                        "var discloseProp = me.getDisclosureProperty();\r",
                        "var itemHeight = me.getItemHeight();\r",
                        "var variableHeights = me.getVariableHeights();\r",
                        "var infinite = me.getInfinite();\r",
                        "var useSimpleItems = me.getUseSimpleItems();\r",
                        "\r",
                        "// Added 6/28/2013\r",
                        "if (newStore === \"\") {\r",
                        "    // Assume we are implementing dynamic grid and create temporary store to allow creation of List component\r",
                        "    newStore = Ext.create('Ext.data.Store', {fields: {\"name\" : \"dynamic\"}});\r",
                        "}\r",
                        "\r",
                        "if (this.isObjectEmpty(list)) {\r",
                        "\r",
                        "    list = Ext.create('Ext.dataview.List', {   \r",
                        "        disableSelection: disableSel,\r",
                        "        onItemDisclosure : disclose,\r",
                        "        disclosureProperty : discloseProp,  // 'disclose' for all rows (default), 'leaf' for leafs only\r",
                        "        itemHeight: itemHeight,\r",
                        "        variableHeights: variableHeights,\r",
                        "        store: newStore,\r",
                        "        masked: false,\r",
                        "        itemCls: 'x-touchtreegrid-item',\r",
                        "        pressedCls : pressedCls,\r",
                        "        selectedCls : selectedCls,\r",
                        "        useSimpleItems: useSimpleItems,\r",
                        "        infinite: infinite,\r",
                        "        mode: mode,\r",
                        "        height: '100%'\r",
                        "    });\r",
                        "\r",
                        "    // Support application of width, minWidth, height, minHeight overrides from linked instance for Horizontal scrolling\r",
                        "    var height = me.getHeight(); // Horiz scrolling doesn't work with 100% for some reason so any pixel setting\r",
                        "    // larger than expected works.  Example: 1000 (not sure why)\r",
                        "    if (!Ext.isEmpty(height)) {list.setHeight(height);}\r",
                        "    var minHeight = me.getMinHeight();\r",
                        "    if (!Ext.isEmpty(minHeight)) {list.setMinHeight(minHeight);}\r",
                        "    var width = me.getWidth();\r",
                        "    if (!Ext.isEmpty(width)) {list.setWidth(width);}\r",
                        "    var minWidth = me.getMinWidth();\r",
                        "    if (!Ext.isEmpty(minWidth)) {list.setMinWidth(minWidth);}                                                              \r",
                        "\r",
                        "    list.on('itemtap', me.onItemTap, me);\r",
                        "\r",
                        "    var plugins = me.getListPlugins();\r",
                        "    if (!this.isObjectEmpty(plugins)) {\r",
                        "        list.setPlugins(plugins);\r",
                        "    }\r",
                        "\r",
                        "    me.setList(list);\r",
                        "\r",
                        "    if (!me.getListScrollable()) {\r",
                        "        list.setScrollable({disabled: true});  // false doesn't seem to work\r",
                        "    } else {\r",
                        "        list.setScrollable(me.getListScrollable());\r",
                        "    }\r",
                        "\r",
                        "    var listItemId = me.getListItemId();\r",
                        "    if (listItemId !== '') {\r",
                        "        list.setItemId(listItemId);\r",
                        "    }\r",
                        "\r",
                        "    // Update list with any additional configs defined in user-defined additionalListConfigs object\r",
                        "    // (this allows all configs supported by Ext.dataview.List component to be applied to TouchTreeGrid list\r",
                        "    // Note:  any duplicated configs already supported by TouchTreeGrid will overwrite those and could have \r",
                        "    //        unexpected behaviour !!\r",
                        "    var addlConfigs = me.getAdditionalListConfigs();\r",
                        "    if (!me.isObjectEmpty(addlConfigs)) {\r",
                        "        for (cfg in addlConfigs) {\r",
                        "            list.config[cfg] = addlConfigs[cfg];\r",
                        "            list['_'+cfg] = addlConfigs[cfg];\r",
                        "        }\r",
                        "    }\r",
                        "\r",
                        "    me.add(list);\r",
                        "}\r",
                        "else {\r",
                        "    list.setStore(newStore);\r",
                        "}    \r",
                        "\r",
                        "\r",
                        "\r",
                        "\r",
                        ""
                    ]
                },
                "name": "updateStore"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "list",
                        "index",
                        "target",
                        "record",
                        "e"
                    ],
                    "fn": "onItemTap",
                    "implHandler": [
                        "/**\r",
                        "* Called when an list item has been tapped\r",
                        "* @param list: {Ext.List}  The subList the item is on\r",
                        "* @param index: {Number} The id of the item tapped\r",
                        "* @param target: {Ext.Element} The list item tapped\r",
                        "* @param record: {Ext.data.Record} The record whichw as tapped\r",
                        "* @param e: {Ext.event.Event} The event\r",
                        "*/\r",
                        "\r",
                        "var store = list.getStore(),\r",
                        "    node = store.getAt(index),\r",
                        "    disabledExpColl = this.getDisableExpandCollapse();\r",
                        "\r",
                        "if (this.getOnItemDisclosure() && !Ext.isEmpty(e.getTarget('div.x-list-disclosure'))) {\r",
                        "    return;  // Ref:  http://www.sencha.com/forum/showthread.php?261518-List-onItemDisclosure-ST-2.2\r",
                        "}\r",
                        "\r",
                        "if (this.getSimpleList() || node.isLeaf()) {\r",
                        "    this.fireEvent('leafItemTap', this, list, index, target, record, e);\r",
                        "\r",
                        "} \r",
                        "else if (this.getSingleExpand() && !node.isExpanded()) {\r",
                        "    // If node collapsed, then expand this one and collapse all sibling nodes\r",
                        "    this.fireEvent('nodeItemTap', this, list, index, target, record, e);\r",
                        "\r",
                        "    if (!disabledExpColl) {\r",
                        "        node.expand(false);\r",
                        "        var parent = node.parentNode;\r",
                        "        var children = parent.childNodes;\r",
                        "        for (var i=0; i<children.length; i++) {\r",
                        "            if (children[i] !== node && children[i].isExpanded()) {\r",
                        "                children[i].collapse();\r",
                        "            }\r",
                        "        }\r",
                        "    }\r",
                        "}\r",
                        "else {\r",
                        "    this.fireEvent('nodeItemTap', this, list, index, target, record, e);  \r",
                        "\r",
                        "    if (!disabledExpColl && node.isExpandable()) {\r",
                        "        var xPosition = list.getScrollable().getScroller().position.x;\r",
                        "        var yPosition = list.getScrollable().getScroller().position.y;\r",
                        "\r",
                        "        if (node.isExpanded()) {\r",
                        "            node.collapse();\r",
                        "        } else {\r",
                        "            node.expand(false); \r",
                        "        }\r",
                        "\r",
                        "        list.getScrollable().getScroller().scrollTo(xPosition, yPosition, {duration: 0});\r",
                        "    }\r",
                        "\r",
                        "}"
                    ]
                },
                "name": "onItemTap"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "config"
                    ],
                    "fn": "applyHeader",
                    "implHandler": [
                        "if (this.getIncludeHeader()) {\r",
                        "    Ext.apply(config, {\r",
                        "        docked : 'top',\r",
                        "        cls    : 'touchtreegrid-header',\r",
                        "        itemId : 'touchtreegridheader'\r",
                        "    });\r",
                        "\r",
                        "    return Ext.factory(config, Ext.Toolbar);\r",
                        "}    "
                    ]
                },
                "name": "applyHeader"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "header"
                    ],
                    "fn": "updateHeader",
                    "implHandler": [
                        "var me = this;\r",
                        "if (me.getIncludeHeader()) {\r",
                        "    me.insert(0, header);\r",
                        "\r",
                        "    if (this.getColumnSorting()) {  // add tap event listener to header toolbar\r",
                        "        header.element.on('tap', me[\"handleColumnSort\"], me, {});\r",
                        "    }\r",
                        "}    "
                    ]
                },
                "name": "updateHeader"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "config"
                    ],
                    "fn": "applyFooter",
                    "implHandler": [
                        "var me = this;\r",
                        "var footerDock = me.getFooterDock();\r",
                        "var hideExpandCollapseBtns = me.getHideExpandCollapseBtns();\r",
                        "var img = me.getLandscapeIcon();\r",
                        "if (this.getIncludeFooter() && !this.getSimpleList()) {\r",
                        "    Ext.apply(config, {\r",
                        "        docked : footerDock,\r",
                        "        cls    : 'touchtreegrid-footer',\r",
                        "        itemId : 'touchtreegridbuttons',\r",
                        "\r",
                        "        items: [\r",
                        "        {\r",
                        "            xtype: 'label',\r",
                        "            docked: 'right',\r",
                        "            html: '',\r",
                        "            itemId: 'touchtreegridlabel',\r",
                        "            cls  : 'touchtreegrid-landscape-label',                       \r",
                        "            style: 'color : white'\r",
                        "        },            \r",
                        "        {\r",
                        "            xtype: 'image',\r",
                        "            docked: 'right',\r",
                        "            hidden: true,\r",
                        "            itemId: 'touchtreegridicon',\r",
                        "            cls: 'touchtreegrid-landscape-icon',\r",
                        "            src: img\r",
                        "        },\r",
                        "        {\r",
                        "            xtype: 'segmentedbutton',\r",
                        "            itemId : 'touchtreegridsegmentedbuttons',\r",
                        "            hidden: hideExpandCollapseBtns,\r",
                        "            items: [\r",
                        "            {\r",
                        "                xtype: 'button',\r",
                        "                itemId: 'touchtreegridexpand',\r",
                        "                cls  : 'touchtreegrid-expand-collapse-buttons',\r",
                        "                text: 'Expand',\r",
                        "                listeners : {\r",
                        "                    tap: function (button, e, options) {\r",
                        "                        me.doExpandDepth(99);\r",
                        "                    }\r",
                        "                }\r",
                        "            },\r",
                        "            {\r",
                        "                xtype: 'button',\r",
                        "                itemId: 'touchtreegridcollapse',\r",
                        "                cls  : 'touchtreegrid-expand-collapse-buttons',\r",
                        "                text: 'Collapse',\r",
                        "                listeners : {\r",
                        "                    tap: function (button, e, options) {\r",
                        "                        me.doExpandDepth(0);\r",
                        "                    }\r",
                        "                }\r",
                        "            }\r",
                        "            ]\r",
                        "\r",
                        "        }]\r",
                        "    });\r",
                        "\r",
                        "\r",
                        "\r",
                        "\r",
                        "    return Ext.factory(config, Ext.Toolbar);\r",
                        "}"
                    ]
                },
                "name": "applyFooter"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "footer"
                    ],
                    "fn": "updateFooter",
                    "implHandler": [
                        "if (this.getIncludeFooter() && !this.getSimpleList()) {\r",
                        "    this.insert(0, footer);\r",
                        "}"
                    ]
                },
                "name": "updateFooter"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "depth",
                        "btn"
                    ],
                    "fn": "doExpandDepth",
                    "implHandler": [
                        "var list = this.getList(),\r",
                        "    store = list.getStore();\r",
                        "\r",
                        "/* Unpress Expand/Collapse buttons in event they were pressed */\r",
                        "if (!Ext.isEmpty(btn)) {\r",
                        "    var btns  = this.down('#touchtreegridsegmentedbuttons');\r",
                        "    btns.setPressedButtons([]);\r",
                        "}\r",
                        "\r",
                        "// Fire custom event for expand/collapse if specified\r",
                        "var customEvent = this.getCustomExpCollapseEvent();\r",
                        "if (customEvent !== '') {\r",
                        "    this.fireEvent(customEvent, {collapseLevel: depth, list: list, gridcont: this});\r",
                        "    return;\r",
                        "}\r",
                        "\r",
                        "store.each(function(item, index, list) {item.collapse(true);});\r",
                        "\r",
                        "function expandDepth(node) {\r",
                        "    if (!node.isLeaf() && node.data.depth <depth) {\r",
                        "        node.expand(false);\r",
                        "\r",
                        "        node.childNodes.forEach(expandDepth, this);\r",
                        "    }\r",
                        "}\r",
                        "store.each(expandDepth, this);\r",
                        "\r",
                        "// Added 8/19/2013\r",
                        "var scroller = list.getScrollable().getScroller();\r",
                        "scroller.scrollTo(0,1);  \r",
                        ""
                    ]
                },
                "name": "doExpandDepth"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "skipApplyDefaultCollapseLevel"
                    ],
                    "fn": "doRefreshList",
                    "implHandler": [
                        "// Refreshes TPL in grid and in Header",
                        "",
                        "var me = this;",
                        "",
                        "var simpleList = me.getSimpleList();",
                        "",
                        "var list = me.getList();",
                        "var disclose = me.getOnItemDisclosure();",
                        "var colorArr = me.getCategDepthColorsArr();",
                        "var categCssArr = me.getCategCssArr();",
                        "var colorDepth = me.getCategDepthColors();",
                        "var colorDepthButtons = me.getCategDepthColorButtons();",
                        "var arrowWid = me.getArrowPctWidth(); // allow control over percent screen width that category arrow consumes (def = 4%)",
                        "",
                        "var itemTpl;",
                        "",
                        "// Customize TPL to change colors by category depth as defined in colorArr",
                        "var colorStyle = (colorDepth ? ' style=\"background-color: {[this.depthColor(values)]} !important;\"' : '');",
                        "var categCss = '{[this.depthCategCss(values)]}';",
                        "",
                        "var tpl;",
                        "if (!simpleList) {",
                        "",
                        "    tpl = [",
                        "    '<tpl if=\"leaf\">',",
                        "    '<div class=\"touchtreegrid-list-content\">',",
                        "    me.getContentItemTpl(),",
                        "    '</div>',",
                        "    '<tpl else>',",
                        "    '<div class=\"' + categCss + '\" ' + colorStyle + '> ',",
                        "    me.getCategItemTpl(),",
                        "    '</div>',",
                        "    '</tpl>'",
                        "    ].join('');",
                        "",
                        "} else {",
                        "    tpl = [",
                        "    //    '<div class=\"touchtreegrid-list-content\">',",
                        "    me.getContentItemTpl()",
                        "    //   '</div>'",
                        "    ].join('');",
                        "}",
                        "",
                        "var renderers = {};",
                        "renderers.scope = me;",
                        "renderers.isExpanded = function(values) {return values.expanded;};",
                        "renderers.depthColor = function(values) {return (!colorArr[values.depth-1] ? 'white' : colorArr[values.depth-1]);};",
                        "renderers.depthCategCss = function(values) {return (!categCssArr[values.depth-1] ? ' touchtreegrid-list-categ' : ' '+categCssArr[values.depth-1]);};",
                        "renderers.formatNumbers = function(n, decPlaces, prefix, thouSeparator, decSeparator) {return me.formatNumbers(n, decPlaces, prefix, thouSeparator, decSeparator);};",
                        "",
                        "// SWL added JAN2015",
                        "renderers.renderer_myForm = function(myClass, myHeight, values) {return me.renderer_myForm(myClass, myHeight, values);};",
                        "",
                        "var customRenderers = me.getRenderers();",
                        "for (var prop in customRenderers) {",
                        "    renderers[prop] = customRenderers[prop];",
                        "}",
                        "",
                        "itemTpl = Ext.create('Ext.XTemplate', tpl, renderers);",
                        "",
                        "itemTpl.compile();",
                        "",
                        "list.setItemTpl(itemTpl);",
                        "",
                        "if (simpleList) list.refresh();",
                        "",
                        "/* Build Header TPL */",
                        "var header = me.getHeader();",
                        "var data = me.getColumns();",
                        "",
                        "var styleStr='', cssStr='';",
                        "var headerStyle = Ext.isEmpty(me.getStyleHeaderRow()) ? '' : ' style=\"' + me.getStyleHeaderRow() + '\"';",
                        "var headerCss = Ext.isEmpty(me.getCssHeaderRow()) ? '' : ' class=\"' + me.getCssHeaderRow() + '\"';",
                        "",
                        "var headerTpl = me.getHeaderTplOverride();",
                        "if (headerTpl==='') {",
                        "",
                        "    var headerTplArr = [",
                        "    '<div' + headerStyle + headerCss + '>'",
                        "    ];",
                        "    if (!simpleList) {",
                        "        // Include spacer width for category arrow",
                        "        headerTplArr.push('<p align=\"left\" style=\"width:'+arrowWid+'%;min-width:'+arrowWid+'%;max-width:'+arrowWid+",
                        "        '%;white-space: nowrap;overflow:hidden;text-overflow:ellipsis;\">&nbsp;</p>');",
                        "    }",
                        "",
                        "    for (var j=0; j<data.length; j++) {",
                        "",
                        "        // Use headerStyle if exists, else apply detail row style to category row",
                        "        if (data[j].headerStyle && data[j].headerStyle > '') {styleStr = data[j].headerStyle;}",
                        "        else if (data[j].style) {styleStr = data[j].style;}",
                        "        else {styleStr = '';}",
                        "",
                        "        // Use headerCss if exists, else apply detail row css to header row (if defined)",
                        "        if (!Ext.isEmpty(data[j].headerCss) && data[j].headerCss > '') {cssStr = data[j].headerCss;}",
                        "        else if (!Ext.isEmpty(data[j].css)) {cssStr = data[j].css;}",
                        "        else {cssStr = '';}",
                        "",
                        "        headerTplArr.push('<div class=\"touchtreegrid-header-cell ' + cssStr +",
                        "        (!Ext.isEmpty(data[j].initSortCls) ? ' '+data[j].initSortCls : '') + // see comments in handleColumnSort()",
                        "        '\" style=\"min-width:' + data[j].width +' !important;' +",
                        "        'max-width:'+data[j].width + ' !important; width:' + data[j].width + ' !important;' +",
                        "        styleStr + '\" dataIndex=\"'+data[j].dataIndex+'\">' + data[j].header + '</div>');",
                        "    }",
                        "    headerTplArr.push('</div>');",
                        "",
                        "    // Wrap with spacer to accomodate for disclosure icon(lines up columns better)",
                        "    var headerTplArr2 = [];",
                        "    if (disclose) {",
                        "        headerTplArr2.push('<div class=\"touchtreegrid-disclose-spacer\">');",
                        "        headerTplArr2 = headerTplArr2.concat(headerTplArr);",
                        "        headerTplArr2.push('</div>');",
                        "    } else {",
                        "        headerTplArr2 = headerTplArr;",
                        "    }",
                        "",
                        "    headerTpl=headerTplArr2.join('');",
                        "}",
                        "if (this.getIncludeHeader()) {",
                        "    header.setHtml(headerTpl);",
                        "}",
                        "",
                        "",
                        "if (me.getApplyDefaultCollapseLevel() && !skipApplyDefaultCollapseLevel && !simpleList) {",
                        "    // custom implementations can request not to change collapse levels when refreshing",
                        "    me.doExpandDepth(me.getDefaultCollapseLevel());",
                        "}",
                        "",
                        "var btns = me.down('#touchtreegridbuttons');",
                        "var customFooterItems = me.getCustomFooterItems();",
                        "var includeCustomFooterItems = me.getIncludeCustomFooterItems();",
                        "",
                        "if (me.getIncludeFooter() && !simpleList && !me.isObjectEmpty(customFooterItems) && !Ext.isEmpty(btns) &&",
                        "Ext.isEmpty(btns.down('#'+customFooterItems.itemId)) && includeCustomFooterItems) {",
                        "    btns.add(customFooterItems);",
                        "}",
                        "",
                        "if (me.getIncludeFooter() && me.getIncludeFooterLevels() && !simpleList) {",
                        "    // Proceed to add expand/collapse levels  (horizontal scrolling toolbar LATER)",
                        "",
                        "    // First get total depth of treestore",
                        "    var store = list.getStore();",
                        "    maxDepth=0;",
                        "",
                        "    function doDrillDown(node) {",
                        "        if (!node.isLeaf()) {",
                        "            maxDepth = ((node.data.depth>maxDepth) ? node.data.depth : maxDepth);",
                        "",
                        "            node.childNodes.forEach(doDrillDown, me);",
                        "        }",
                        "    }",
                        "    store.each(doDrillDown, me);",
                        "",
                        "    if (maxDepth>1 && !Ext.isEmpty(btns)) {",
                        "        // Remove button items 1+ if they exist",
                        "",
                        "        var itms = btns.getItems();",
                        "        var itmsOrigLength = itms.items.length;",
                        "        var thisItemId, k;",
                        "",
                        "        for (k = 2; k<10; k++) {  // blindly loop to delete up to 8 category level buttons with matching ItemId names",
                        "            thisItem = btns.down('#touchtreegriddepth'+k.toString());",
                        "            if (!Ext.isEmpty(thisItem)) {",
                        "                btns.remove(thisItem, true);",
                        "            }",
                        "        }",
                        "",
                        "",
                        "        var btnStyle = {};",
                        "",
                        "        // Add buton for each additional level",
                        "        var newbtn;",
                        "        for (var i=2; i <= maxDepth; i++) {",
                        "            if (colorDepth && colorDepthButtons) {",
                        "                btnStyle = {'background' : (!colorArr[i-1] ? 'white' : colorArr[i-1]),",
                        "                'color' : 'black'};",
                        "            }",
                        "            newbtn = {",
                        "                xtype: 'button',",
                        "                itemId: 'touchtreegriddepth'+i.toString(),",
                        "                cls  : 'touchtreegrid-expand-collapse-buttons',",
                        "                style : btnStyle,",
                        "                depth : i,",
                        "                text: i.toString(),",
                        "                listeners : {tap: function (button, e, options) {me.doExpandDepth(button.config.depth, button);}}",
                        "            };",
                        "",
                        "            btns.add(newbtn);",
                        "        }",
                        "",
                        "    }",
                        "}",
                        ""
                    ]
                },
                "name": "doRefreshList"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "n",
                        "decPlaces",
                        "prefix",
                        "suffix",
                        "thouSeparator",
                        "decSeparator"
                    ],
                    "fn": "formatNumbers",
                    "implHandler": [
                        "if (Ext.isEmpty(n)) {return n;};  // Don't format empty strings  ==\"\" || !n || isNaN(n)\r",
                        "decPlaces = (isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces);\r",
                        "prefix = (prefix == undefined ? \"\" : prefix);   // Example pass \"$\" sign for currency\r",
                        "suffix = (suffix == undefined ? \"\" : suffix);   // Example pass \"%\" sign for percents\r",
                        "\r",
                        "decSeparator = (decSeparator == undefined ? \".\" : decSeparator);\r",
                        "thouSeparator = (thouSeparator == undefined ? \",\" : thouSeparator);\r",
                        "sign = (n < 0 ? \"-\" : \"\");\r",
                        "i = parseInt(n = Math.abs(+n || 0).toFixed(decPlaces)) + \"\";\r",
                        "j = (((j = i.length) > 3) ? (j % 3) : 0);\r",
                        "return prefix + sign + (j ? i.substr(0, j) + thouSeparator : \"\") + \r",
                        "i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thouSeparator) + \r",
                        "(decPlaces ? decSeparator + Math.abs(n - i).toFixed(decPlaces).slice(2) : \"\") + suffix;"
                    ]
                },
                "name": "formatNumbers"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "myObj"
                    ],
                    "fn": "isObjectEmpty",
                    "implHandler": [
                        "for(var key in myObj) {\r",
                        "    if (myObj.hasOwnProperty(key)) {\r",
                        "        return false;\r",
                        "    }\r",
                        "}\r",
                        "return true;"
                    ]
                },
                "name": "isObjectEmpty"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "e,t"
                    ],
                    "fn": "handleColumnSort",
                    "implHandler": [
                        "// Refer to updateHeader() for code to add tap listener on header toolbar\r",
                        "//  header.element.on('tap', me[\"handleColumnSort\"], me, {});\r",
                        "\r",
                        "var me        = this,\r",
                        "    list      = me.getList(),\r",
                        "    grouped   = list.getGrouped(),\r",
                        "    columns   = me.getColumns(),\r",
                        "    cNum      = columns.length,\r",
                        "    store     = list.getStore(),\r",
                        "    el        = Ext.get(t),\r",
                        "    headerEl  = me.down('#touchtreegridheader').element,\r",
                        "    dataIndex = el.getAttribute('dataIndex'),\r",
                        "    sorters   = store.getSorters(),\r",
                        "    asc       = 'x-grid-sort-asc',\r",
                        "    desc      = 'x-grid-sort-desc',\r",
                        "    myEvent   = me.getCustomColumnSortEvent(),\r",
                        "    columnsUpdated = false,\r",
                        "    c, i, colIndex, column, columnsUpd=[], colEl, sorter, dir,\r",
                        "    grouper, grouperSortProperty, grouperDirection, grouperProperty, mySortIdx, newDirCls;\r",
                        "\r",
                        "if (!dataIndex) return;  //Included in event of tap on extra toolbar space at far right\r",
                        "\r",
                        "for (c=0; c < cNum; c++) {\r",
                        "    column = columns[c];\r",
                        "    if (column.dataIndex === dataIndex) {break;}\r",
                        "}\r",
                        "colIndex = c;\r",
                        "\r",
                        "if (myEvent !== '') {\r",
                        "    // Custom event specified to be fired in lieu of default processing\r",
                        "    me.fireEvent(myEvent,{me: me, e: e, t: t,  el: el, headerEl: headerEl,\r",
                        "    dataIndex: dataIndex, column: column});\r",
                        "    return;    \r",
                        "}\r",
                        "\r",
                        "if (!column.sortable) return;\r",
                        "\r",
                        "grouper = store.getGrouper();\r",
                        "if (!Ext.isEmpty(grouper)) {\r",
                        "    grouperProperty = grouper.getProperty();\r",
                        "    grouperSortProperty = grouper.getSortProperty();\r",
                        "    grouperDirection = Ext.isEmpty(grouper.getDirection()) ? 'ASC' : grouper.getDirection();\r",
                        "}\r",
                        "\r",
                        "// sorters array may be prefilled with grouper-related sorts, last index is one for my current column sort\r",
                        "mySortIdx = sorters.length-1;\r",
                        "sorter    = sorters[mySortIdx];\r",
                        "dir       = sorter ? sorter.getDirection() : 'ASC';    \r",
                        "newDirCls = (dir === 'DESC' ? desc : asc);\r",
                        "\r",
                        "\r",
                        "// Sort items within grouper if defined\r",
                        "if (Ext.isEmpty(grouper)){\r",
                        "    store.sort([{property: dataIndex, direction: dir === 'DESC' ? 'ASC' : 'DESC'}]);    \r",
                        "} else {\r",
                        "    store.sort([{property: grouperSortProperty, direction: grouperDirection},\r",
                        "    {property: dataIndex, direction: dir === 'DESC' ? 'ASC' : 'DESC'}]);\r",
                        "}    \r",
                        "\r",
                        "// Copy columns[], update the copy then restore so that updateColumns() method isn't \r",
                        "// invoked via updateColumns() method until all updates are complete\r",
                        "columnsUpd = Ext.clone(columns); \r",
                        "\r",
                        "// Remove any prior sort indicators \r",
                        "for (c=0; c < cNum; c++) {\r",
                        "    colEl = Ext.get(headerEl.down('div.touchtreegrid-header-cell[dataIndex=' + columns[c].dataIndex + ']'));\r",
                        "    if (!me.isObjectEmpty(colEl)) {\r",
                        "        colEl.removeCls(asc);\r",
                        "        colEl.removeCls(desc);\r",
                        "    } \r",
                        "\r",
                        "\r",
                        "    // Process column shading if sorted properties are defined in columns[] array:\r",
                        "    // => headerStyleSorted, categStyleSorted, styleSorted\r",
                        "    if (c===colIndex) {\r",
                        "        // Save Original styles and update with sorted styles  (STYLE will override CSS if defined)\r",
                        "        if (!Ext.isEmpty(columnsUpd[c].headerCssSorted) && !Ext.isEmpty(columnsUpd[c].headerCss)) {\r",
                        "            if (Ext.isEmpty(columnsUpd[c].headerCssOrig)) {\r",
                        "                columnsUpd[c].headerCssOrig = columnsUpd[c].headerCss;\r",
                        "            }\r",
                        "            if (columnsUpd[c].headerCss !== columnsUpd[c].headerCssSorted) {\r",
                        "                columnsUpd[c].headerCss = columnsUpd[c].headerCssSorted;\r",
                        "                columnsUpd[c].initSortCls = newDirCls;   // Store new CLS to array so that doRefreshList() will render sort arrow correctly when redrawing         \r",
                        "                columnsUpdated = true;\r",
                        "            }                \r",
                        "        }        \r",
                        "        if (!Ext.isEmpty(columnsUpd[c].headerStyleSorted) && !Ext.isEmpty(columnsUpd[c].headerStyle)) {\r",
                        "            if (Ext.isEmpty(columnsUpd[c].headerStyleOrig)) {\r",
                        "                columnsUpd[c].headerStyleOrig = columnsUpd[c].headerStyle;\r",
                        "            }\r",
                        "            if (columnsUpd[c].headerStyle !== columnsUpd[c].headerStyleSorted) {\r",
                        "                columnsUpd[c].headerStyle = columnsUpd[c].headerStyleSorted;\r",
                        "                columnsUpd[c].initSortCls = newDirCls;   // Store new CLS to array so that doRefreshList() will render sort arrow correctly when redrawing         \r",
                        "                columnsUpdated = true;\r",
                        "            }                \r",
                        "        }\r",
                        "\r",
                        "\r",
                        "        if (!Ext.isEmpty(columnsUpd[c].categCssSorted) && !Ext.isEmpty(columnsUpd[c].categCss)) {\r",
                        "            if (Ext.isEmpty(columnsUpd[c].categCssOrig)) {\r",
                        "                columnsUpd[c].categCssOrig = columnsUpd[c].categCss;\r",
                        "            }\r",
                        "            if (columnsUpd[c].categCss !== columnsUpd[c].categCssSorted) {\r",
                        "                columnsUpd[c].categCss = columnsUpd[c].categCssSorted;\r",
                        "                columnsUpdated = true;\r",
                        "            }                \r",
                        "        } \r",
                        "        if (!Ext.isEmpty(columnsUpd[c].categStyleSorted) && !Ext.isEmpty(columnsUpd[c].categStyle)) {\r",
                        "            if (Ext.isEmpty(columnsUpd[c].categStyleOrig)) {\r",
                        "                columnsUpd[c].categStyleOrig = columnsUpd[c].categStyle;\r",
                        "            }\r",
                        "            if (columnsUpd[c].categStyle !== columnsUpd[c].categStyleSorted) {\r",
                        "                columnsUpd[c].categStyle = columnsUpd[c].categStyleSorted;\r",
                        "                columnsUpdated = true;\r",
                        "            }                \r",
                        "        }       \r",
                        "\r",
                        "\r",
                        "        if (!Ext.isEmpty(columnsUpd[c].cssSorted) && !Ext.isEmpty(columnsUpd[c].css)) {\r",
                        "            if (Ext.isEmpty(columnsUpd[c].cssOrig)) {\r",
                        "                columnsUpd[c].cssOrig = columnsUpd[c].css;\r",
                        "            }\r",
                        "            if (columnsUpd[c].css !== columnsUpd[c].cssSorted) {\r",
                        "                columnsUpd[c].css = columnsUpd[c].cssSorted;\r",
                        "                columnsUpdated = true;\r",
                        "            }                \r",
                        "        }\r",
                        "        if (!Ext.isEmpty(columnsUpd[c].styleSorted) && !Ext.isEmpty(columnsUpd[c].style)) {\r",
                        "            if (Ext.isEmpty(columnsUpd[c].styleOrig)) {\r",
                        "                columnsUpd[c].styleOrig = columnsUpd[c].style;\r",
                        "            }\r",
                        "            if (columnsUpd[c].style !== columnsUpd[c].styleSorted) {\r",
                        "                columnsUpd[c].style = columnsUpd[c].styleSorted;\r",
                        "                columnsUpdated = true;\r",
                        "            }                \r",
                        "        }\r",
                        "\r",
                        "\r",
                        "    } else {\r",
                        "        // Restore Original styles for non-sorted columnsUpd\r",
                        "        if (!Ext.isEmpty(columnsUpd[c].headerCssOrig) && !Ext.isEmpty(columnsUpd[c].headerCss)) {\r",
                        "            if (columnsUpd[c].headerCss !== columnsUpd[c].headerCssOrig) {\r",
                        "                columnsUpd[c].headerCss = columnsUpd[c].headerCssOrig;\r",
                        "                columnsUpd[c].initSortCls = '';      // reset                       \r",
                        "                columnsUpdated = true;\r",
                        "            }                \r",
                        "        }        \r",
                        "        if (!Ext.isEmpty(columnsUpd[c].headerStyleOrig) && !Ext.isEmpty(columnsUpd[c].headerStyle)) {\r",
                        "            if (columnsUpd[c].headerStyle !== columnsUpd[c].headerStyleOrig) {\r",
                        "                columnsUpd[c].headerStyle = columnsUpd[c].headerStyleOrig;\r",
                        "                columnsUpd[c].initSortCls = '';      // reset                       \r",
                        "                columnsUpdated = true;\r",
                        "            }                \r",
                        "        }\r",
                        "\r",
                        "        if (!Ext.isEmpty(columnsUpd[c].categCssOrig) && !Ext.isEmpty(columnsUpd[c].categCss)) {\r",
                        "            if (columnsUpd[c].categCss !== columnsUpd[c].categCssOrig) {\r",
                        "                columnsUpd[c].categCss = columnsUpd[c].categCssOrig;\r",
                        "                columnsUpdated = true;\r",
                        "            }                \r",
                        "        }   \r",
                        "        if (!Ext.isEmpty(columnsUpd[c].categStyleOrig) && !Ext.isEmpty(columnsUpd[c].categStyle)) {\r",
                        "            if (columnsUpd[c].categStyle !== columnsUpd[c].categStyleOrig) {\r",
                        "                columnsUpd[c].categStyle = columnsUpd[c].categStyleOrig;\r",
                        "                columnsUpdated = true;\r",
                        "            }                \r",
                        "        }   \r",
                        "\r",
                        "        if (!Ext.isEmpty(columnsUpd[c].cssOrig) && !Ext.isEmpty(columnsUpd[c].css)) {\r",
                        "            if (columnsUpd[c].css !== columnsUpd[c].cssOrig) {\r",
                        "                columnsUpd[c].css = columnsUpd[c].cssOrig;\r",
                        "                columnsUpdated = true;\r",
                        "            }                \r",
                        "        }        \r",
                        "        if (!Ext.isEmpty(columnsUpd[c].styleOrig) && !Ext.isEmpty(columnsUpd[c].style)) {\r",
                        "            if (columnsUpd[c].style !== columnsUpd[c].styleOrig) {\r",
                        "                columnsUpd[c].style = columnsUpd[c].styleOrig;\r",
                        "                columnsUpdated = true;\r",
                        "            }                \r",
                        "        }        \r",
                        "    }\r",
                        "}\r",
                        "\r",
                        "if (columnsUpdated) {\r",
                        "    me.setColumns(columnsUpd);  \r",
                        "    me.doRefreshList();\r",
                        "}\r",
                        "else {list.refresh();}\r",
                        "\r",
                        "// Apply sort indicator to tapped column  (need this after doRefreshList() called .. but also handled in doRefreshList do to race conditioons)\r",
                        "var newEl = el.addCls(newDirCls);  \r",
                        "\r",
                        "// Added 10/3/13\r",
                        "var linkedGridsArr = me.prepLinkedGridsArr();\r",
                        "if (linkedGridsArr.length > 0) {\r",
                        "    // Remove any existing sort indicators and styling for linked grids\r",
                        "    for (i=0; i<linkedGridsArr.length; i++) {\r",
                        "        linkedGridsArr[i].item.suspendEvents();  // item updated in onScroll()\r",
                        "    }    \r",
                        "\r",
                        "    for (i=0; i<linkedGridsArr.length; i++) {\r",
                        "        linkedGridsArr[i].item.removeColumnSorts();\r",
                        "    }   \r",
                        "\r",
                        "    for (i=0; i<linkedGridsArr.length; i++) {\r",
                        "        linkedGridsArr[i].item.resumeEvents(true);\r",
                        "    }   \r",
                        "}\r",
                        "\r",
                        "\r",
                        ""
                    ]
                },
                "name": "handleColumnSort"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "fn": "removeColumnSorts",
                    "implHandler": [
                        "// Added 10/3/13\r",
                        "\r",
                        "// Called to clear all header and column sort-related CLS/Styles.  \r",
                        "// Introduced to support column sorting across freeze column panels.\r",
                        "var\r",
                        "me        = this, \r",
                        "headerEl  = me.down('#touchtreegridheader').element,\r",
                        "columns   = me.getColumns(),\r",
                        "cNum      = columns.length,\r",
                        "list      = me.getList(),  \r",
                        "asc       = 'x-grid-sort-asc',\r",
                        "desc      = 'x-grid-sort-desc',    \r",
                        "c, colEl, columnsUpdated;\r",
                        "\r",
                        "var columnsUpd = Ext.clone(columns); \r",
                        "\r",
                        "\r",
                        "for (c=0; c < cNum; c++) {\r",
                        "    colEl = Ext.get(headerEl.down('div.touchtreegrid-header-cell[dataIndex=' + columns[c].dataIndex + ']'));\r",
                        "    if (!me.isObjectEmpty(colEl)) {\r",
                        "        colEl.removeCls(asc);\r",
                        "        colEl.removeCls(desc);\r",
                        "    } \r",
                        "\r",
                        "\r",
                        "    // Restore Original styles for non-sorted columnsUpd\r",
                        "    if (!Ext.isEmpty(columnsUpd[c].headerCssOrig) && !Ext.isEmpty(columnsUpd[c].headerCss)) {\r",
                        "        if (columnsUpd[c].headerCss !== columnsUpd[c].headerCssOrig) {\r",
                        "            columnsUpd[c].headerCss = columnsUpd[c].headerCssOrig;\r",
                        "            columnsUpd[c].initSortCls = '';      // reset                       \r",
                        "            columnsUpdated = true;\r",
                        "        }                \r",
                        "    }        \r",
                        "    if (!Ext.isEmpty(columnsUpd[c].headerStyleOrig) && !Ext.isEmpty(columnsUpd[c].headerStyle)) {\r",
                        "        if (columnsUpd[c].headerStyle !== columnsUpd[c].headerStyleOrig) {\r",
                        "            columnsUpd[c].headerStyle = columnsUpd[c].headerStyleOrig;\r",
                        "            columnsUpd[c].initSortCls = '';      // reset                       \r",
                        "            columnsUpdated = true;\r",
                        "        }                \r",
                        "    }\r",
                        "\r",
                        "    if (!Ext.isEmpty(columnsUpd[c].categCssOrig) && !Ext.isEmpty(columnsUpd[c].categCss)) {\r",
                        "        if (columnsUpd[c].categCss !== columnsUpd[c].categCssOrig) {\r",
                        "            columnsUpd[c].categCss = columnsUpd[c].categCssOrig;\r",
                        "            columnsUpdated = true;\r",
                        "        }                \r",
                        "    }   \r",
                        "    if (!Ext.isEmpty(columnsUpd[c].categStyleOrig) && !Ext.isEmpty(columnsUpd[c].categStyle)) {\r",
                        "        if (columnsUpd[c].categStyle !== columnsUpd[c].categStyleOrig) {\r",
                        "            columnsUpd[c].categStyle = columnsUpd[c].categStyleOrig;\r",
                        "            columnsUpdated = true;\r",
                        "        }                \r",
                        "    }   \r",
                        "\r",
                        "    if (!Ext.isEmpty(columnsUpd[c].cssOrig) && !Ext.isEmpty(columnsUpd[c].css)) {\r",
                        "        if (columnsUpd[c].css !== columnsUpd[c].cssOrig) {\r",
                        "            columnsUpd[c].css = columnsUpd[c].cssOrig;\r",
                        "            columnsUpdated = true;\r",
                        "        }                \r",
                        "    }        \r",
                        "    if (!Ext.isEmpty(columnsUpd[c].styleOrig) && !Ext.isEmpty(columnsUpd[c].style)) {\r",
                        "        if (columnsUpd[c].style !== columnsUpd[c].styleOrig) {\r",
                        "            columnsUpd[c].style = columnsUpd[c].styleOrig;\r",
                        "            columnsUpdated = true;\r",
                        "        }                \r",
                        "    }        \r",
                        "}\r",
                        "\r",
                        "if (columnsUpdated) {\r",
                        "    me.setColumns(columnsUpd);  \r",
                        "    me.doRefreshList();\r",
                        "}\r",
                        "else {list.refresh();}\r",
                        ""
                    ]
                },
                "name": "removeColumnSorts"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "scroller",
                        "x",
                        "y"
                    ],
                    "fn": "onScroll",
                    "implHandler": [
                        "// Scroll all linked grids\r",
                        "var me = this, i, linkedGridsArr;\r",
                        "\r",
                        "linkedGridsArr = me.prepLinkedGridsArr();\r",
                        "if (linkedGridsArr.length === 0) {return;}\r",
                        "\r",
                        "scroller.suspendEvents();\r",
                        "for (i=0; i<linkedGridsArr.length; i++) {\r",
                        "//    linkedGridsArr[i].scroller.suspendEvents();\r",
                        "}    \r",
                        "\r",
                        "for (i=0; i<linkedGridsArr.length; i++) {\r",
                        "    otherX = linkedGridsArr[i].scroller.position.x;\r",
                        "    linkedGridsArr[i].scroller.scrollTo(otherX,y);\r",
                        "}   \r",
                        "\r",
                        "scroller.resumeEvents(true);\r",
                        "for (i=0; i<linkedGridsArr.length; i++) {\r",
                        "//    linkedGridsArr[i].scroller.resumeEvents(true);\r",
                        "}   \r",
                        ""
                    ]
                },
                "name": "onScroll"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "skipRecurse"
                    ],
                    "fn": "prepLinkedGridsArr",
                    "implHandler": [
                        "// Adds object references to linkdedGridsArr from itemId's of linked grids for faster scrolling and sorting performance across the grids\r",
                        "var me = this, i, listItemId, otherList, otherScroller, parcont, linkedGridsArr, gridcont;\r",
                        "\r",
                        "linkedGridsArr = me.getLinkedGridsArr();\r",
                        "if (linkedGridsArr.length === 0) {return [];}\r",
                        "\r",
                        "parcont = me.up('#'+me.getLinkedGridsParentItemId());\r",
                        "if (Ext.isEmpty(parcont)) {\r",
                        "    console.log(me.getLinkedGridsParentItemId() + ' not found !');\r",
                        "    return [];\r",
                        "}\r",
                        "\r",
                        "if (Ext.isEmpty(linkedGridsArr[0].scroller)) {\r",
                        "    // One-time update of linked scroller and gridcont objects for current linked instance of TouchTreeGrid\r",
                        "    for (i=0; i<linkedGridsArr.length; i++) {\r",
                        "        gridcont = parcont.down('#'+linkedGridsArr[i].itemId);\r",
                        "        if (Ext.isEmpty(gridcont)) {\r",
                        "            console.log('Unable to find ' + linkedGridsArr[i].itemId);\r",
                        "            return;\r",
                        "        }\r",
                        "        listItemId = gridcont.getListItemId();\r",
                        "        otherList = gridcont.down('#'+listItemId);\r",
                        "        otherScroller = otherList.getScrollable().getScroller();\r",
                        "        linkedGridsArr[i].item = gridcont;\r",
                        "        linkedGridsArr[i].scroller = otherScroller;\r",
                        "\r",
                        "        // Similarly update each linked grid\r",
                        "        if (!skipRecurse) {\r",
                        "            gridcont.prepLinkedGridsArr(true);\r",
                        "        }\r",
                        "    }\r",
                        "    me.setLinkedGridsArr(linkedGridsArr);    \r",
                        "}\r",
                        "\r",
                        "return linkedGridsArr;"
                    ]
                },
                "name": "prepLinkedGridsArr"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "myClass",
                        "myHeight",
                        "values",
                        "classConfigs"
                    ],
                    "fn": "renderer_myForm",
                    "implHandler": [
                        "// SWL added JAN2015 to support forms in content (leaf) and category rows",
                        "var me = this;",
                        "var i, myForm, myStore, myRecId, myRec, items, flds, readOnly;",
                        "",
                        "classConfigs = classConfigs || {};",
                        "var myConfigs = Ext.merge(classConfigs, {height: myHeight, values: values});",
                        "",
                        "myForm = Ext.create(myClass, myConfigs);",
                        "",
                        "myStore = me.down('#'+this.getListItemId()).getStore();",
                        "",
                        "myRecId       = values.id;",
                        "myRec         = myStore.getById(myRecId);",
                        "myForm.record = myRec;  // Save record with this instance of form",
                        "myForm.touchtreegrid = me;  // Save touchtreegrid instance with form",
                        "flds          = myRec.getFields();",
                        "",
                        "if (myRec.readOnly == undefined){",
                        "    // Use MyForm readOnly config until records are initialzied",
                        "    readOnly = (myForm.config.readOnly ? true : false);",
                        "    myRec.readOnly = readOnly;",
                        "}",
                        "else {",
                        "    readOnly = (myRec.readOnly ? true : false);",
                        "}",
                        "",
                        "myForm.config.readOnly = readOnly; // update new instance of form for current record",
                        "",
                        "myForm.setRecord(myRec);  // Load record values into form",
                        "",
                        "function recurseItems(items) {",
                        "    var i, j, thisItems, childItems, textField, opts, thisOpt, fldName, radioName, fldName2;",
                        "    thisItems = items.items;",
                        "    if (!thisItems){return;}",
                        "",
                        "    // Recursively step through all items",
                        "    for (i=0; i<thisItems.length; i++){",
                        "        // If Checkbox field, then add/remove \"checkbox-checked\" class based on mapped field name value",
                        "        if (thisItems[i].xtype === 'checkboxfield' && myRec.get(thisItems[i].getName())) {",
                        "            thisItems[i].addCls('checkbox-checked');",
                        "            thisItems[i].on('change', me.handleFormCheckboxfieldChange, myForm);",
                        "",
                        "        }",
                        "        else if (thisItems[i].xtype === 'checkboxfield' && !myRec.get(thisItems[i].getName())) {",
                        "            thisItems[i].removeCls('checkbox-checked');",
                        "            thisItems[i].on('change', me.handleFormCheckboxfieldChange, myForm);",
                        "        }",
                        "        // If Radio field, then add/remove \"radiofield-checked\" class based on mapped field name value",
                        "        else if (thisItems[i].xtype === 'radiofield') {",
                        "            // Radio and Checkboxes readOnly handled in 'check' event controller methods",
                        "            fldName = thisItems[i].getName()+\"_\"+thisItems[i].getItemId();",
                        "            radioName = thisItems[i].getName();",
                        "            if (!myRec[radioName]){",
                        "                myRec[radioName] = [];",
                        "            }",
                        "            if (flds.keys.indexOf(fldName) !== -1) {  // Chech that field exists for radiofield  (TBD: AUTOCREATE LATER?)",
                        "                if (!myRec[fldName+'_init']){  // Initialize this record",
                        "                    myRec[fldName+'_init']=true;  // Set record value from component first time only",
                        "",
                        "                    myStore.suspendEvents();",
                        "                    myRec.set(fldName, thisItems[i].getChecked());",
                        "                    myStore.resumeEvents(true);",
                        "                    myRec[radioName].push(thisItems[i]);  // stack all grouped radio components for traversal when unchcking all other radiofields",
                        "                }",
                        "                if (myRec.get(fldName)){ // Manually process all radiofields from checked one (ignore unchecked ones)",
                        "                    if (thisItems[i].getCls().indexOf('radiofield-checked') === -1){",
                        "                        thisItems[i].suspendEvents(true);",
                        "                        thisItems[i].addCls('radiofield-checked');",
                        "",
                        "",
                        "                        thisItems[i]._checked = true;  // manual updates avoid event firing",
                        "                        thisItems[i].getComponent().input.dom.checked = true;",
                        "                        thisItems[i].resumeEvents(true);",
                        "                    }",
                        "",
                        "                    if (!myRec[fldName+'_init']){",
                        "                        for (j=0; j<myRec[radioName].length; j++){",
                        "                            if (myRec[radioName][j] !== thisItems[i] &&",
                        "                                myRec[radioName][j].getCls().indexOf('radiofield-checked') !== -1){",
                        "",
                        "                                myRec[radioName][j].suspendEvents();",
                        "                                myRec[radioName][j].removeCls('radiofield-checked');",
                        "                                myRec[radioName][j]._checked = false; // manually uncheck all others",
                        "                                myRec[radioName][j].getComponent().input.dom.checked = false;",
                        "                                myRec[radioName][j].resumeEvents(true);",
                        "",
                        "                                fldName2 = myRec[radioName][j].getName()+\"_\"+myRec[radioName][j].getItemId();",
                        "                                myRec.set(fldName2, false);",
                        "                            }",
                        "                        }",
                        "                    }",
                        "                }",
                        "                thisItems[i].on('check', me.handleFormRadiofieldCheck, myForm);",
                        "",
                        "            }",
                        "            else {",
                        "                console.log(fldName + ' field not defined  for radiofield');",
                        "            }",
                        "        }",
                        "        else if (thisItems[i].xtype === 'selectfield' && (thisItems[i].getName())) {",
                        "            // FOR TEXT FIELDS:  add value attribute in dom element",
                        "            opts = thisItems[i].getOptions();",
                        "            thisOpt = \"\";",
                        "            for (j=0; j<opts.length; j++){",
                        "                if (opts[j].value === thisItems[i].getValue()){",
                        "                    thisOpt = opts[j].text;",
                        "                    break;",
                        "                }",
                        "            }",
                        "            thisItems[i].element.down('input').dom.setAttribute(\"value\", thisOpt);",
                        "            if (!thisItems[i].getReadOnly()){ // Don't override component-level readOnly setting",
                        "                thisItems[i].setReadOnly(readOnly);",
                        "            }",
                        "            if (!readOnly && !thisItems[i].getReadOnly()){",
                        "                thisItems[i].on('change', me.handleFormSelectfieldChange, myForm);",
                        "            }",
                        "        }",
                        "        else if (thisItems[i].xtype === 'textfield' && (thisItems[i].getName())) {",
                        "            // FOR TEXT FIELDS:  add value attribute in dom element",
                        "            if (!thisItems[i].getReadOnly()){ // Don't override component-level readOnly setting",
                        "                thisItems[i].setReadOnly(readOnly);",
                        "            }",
                        "            thisItems[i].element.down('input').dom.setAttribute(\"value\", thisItems[i].getValue());",
                        "            if (!readOnly && !thisItems[i].getReadOnly()){",
                        "                thisItems[i].on('blur', me.handleFormTextfieldBlur, myForm);",
                        "                thisItems[i].on('clearicontap', me.handleFormTextfieldClearicontap, myForm);",
                        "            }",
                        "        }",
                        "        else if (thisItems[i].xtype === 'textareafield' && (thisItems[i].getName())) {",
                        "            // For TextArea fields need to update textContent in DOM",
                        "            thisItems[i].element.down('textarea').dom.textContent = thisItems[i].getValue();",
                        "            if (!thisItems[i].getReadOnly()){ // Don't override component-level readOnly setting",
                        "                thisItems[i].setReadOnly(readOnly);",
                        "            }",
                        "            if (!readOnly && !thisItems[i].getReadOnly()){",
                        "                thisItems[i].on('blur', me.handleFormTextareaBlur, myForm);",
                        "                thisItems[i].on('clearicontap', me.handleFormTextfieldClearicontap, myForm);",
                        "            }",
                        "        }",
                        "",
                        "",
                        "",
                        "        childItems = thisItems[i].items;",
                        "        if (childItems){",
                        "            recurseItems(childItems);",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "//     Optional way to traverse components in form:",
                        "//     Ext.each(myForm.query('textfield'), function() {",
                        "//         this.setReadOnly(readOnly);",
                        "//     });",
                        "",
                        "",
                        "items = myForm.getItems();",
                        "if (items) {",
                        "    recurseItems(items);",
                        "}",
                        "",
                        "if (typeof myForm.postInit == 'function') {",
                        "    myForm.postInit();",
                        "}",
                        "",
                        "var formHtml = myForm.element.dom.outerHTML;",
                        "return formHtml;"
                    ]
                },
                "name": "renderer_myForm"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "textfield, e, eOpts"
                    ],
                    "fn": "handleFormTextfieldBlur",
                    "implHandler": [
                        "// SWL added JAN2015 to support forms in content (leaf) and category rows",
                        "var myFormPanel = this;  // myForm scope defined in event listener definition",
                        "// Only way I've found to get NewValue (so far) as change event doesn't reflect it with this implementation",
                        "var newValue = e.target.getAttributeNode('value').ownerElement.value;",
                        "if (myFormPanel.record.get(textfield.getName()) !== newValue) {  // Could be triggered from renderer_myForm so ignore",
                        "    myFormPanel.record.set(textfield.getName(), newValue);",
                        "}"
                    ]
                },
                "name": "handleFormTextfieldBlur"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "textfield, e, eOpts"
                    ],
                    "fn": "handleFormTextareaBlur",
                    "implHandler": [
                        "// SWL added JAN2015 to support forms in content (leaf) and category rows",
                        "var myFormPanel = this;  // myForm scope defined in event listener definition",
                        "var newValue = e.target.value;",
                        "if (myFormPanel.record.get(textfield.getName()) !== newValue) {  // Could be triggered from renderer_myForm so ignore",
                        "    myFormPanel.record.set(textfield.getName(), newValue);",
                        "}"
                    ]
                },
                "name": "handleFormTextareaBlur"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "textfield",
                        "e",
                        "eOpts"
                    ],
                    "fn": "handleFormTextfieldClearicontap",
                    "implHandler": [
                        "// SWL added JAN2015 to support forms in content (leaf) and category rows",
                        "var myFormPanel = this;  // myForm scope defined in event listener definition",
                        "myFormPanel.record.set(textfield.getName(), \"\");"
                    ]
                },
                "name": "handleFormTextfieldClearicontap"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "selectfield, newValue, oldValue, eOpts"
                    ],
                    "fn": "handleFormSelectfieldChange",
                    "implHandler": [
                        "// SWL added JAN2015 to support forms in content (leaf) and category rows",
                        "var myFormPanel = this;  // myForm scope defined in event listener definition",
                        "if (myFormPanel.record.get(selectfield.getName()) !== newValue) {  // Could be triggered from renderer_myForm so ignore",
                        "    myFormPanel.record.set(selectfield.getName(), newValue);",
                        "}"
                    ]
                },
                "name": "handleFormSelectfieldChange"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "checkboxfield, newValue, oldValue, eOpts"
                    ],
                    "fn": "handleFormCheckboxfieldChange",
                    "implHandler": [
                        "// SWL added JAN2015 to support forms in content (leaf) and category rows",
                        "var myFormPanel = this;  // myForm scope defined in event listener definition",
                        "if (myFormPanel.config.readOnly || checkboxfield.config.readOnly){return;}",
                        "var record = myFormPanel.record;",
                        "",
                        "var name = checkboxfield.getName();",
                        "if (record.get(name) !== newValue) {  // Could be triggered from renderer_myForm so ignore",
                        "    record.set(name, newValue);",
                        "}"
                    ]
                },
                "name": "handleFormCheckboxfieldChange"
            },
            {
                "type": "basicfunction",
                "reference": {
                    "name": "items",
                    "type": "array"
                },
                "codeClass": null,
                "userConfig": {
                    "designer|params": [
                        "checkboxfield, e, eOpts"
                    ],
                    "fn": "handleFormRadiofieldCheck",
                    "implHandler": [
                        "// SWL added JAN2015 to support forms in content (leaf) and category rows",
                        "var myFormPanel = this;  // myForm scope defined in event listener definition",
                        "if (myFormPanel.config.readOnly || checkboxfield.config.readOnly){return;}",
                        "",
                        "var fldName, myRec, myStore, j, fldName2, radioName;",
                        "",
                        "fldName   = checkboxfield.getName()+\"_\"+checkboxfield.getItemId();",
                        "radioName = checkboxfield.getName();",
                        "myRec     = myFormPanel.record;",
                        "myStore   = myRec.stores[0];",
                        "",
                        "if (myRec){",
                        "    if (myRec[radioName]){  // Defined within TouchTreeGrid renderer_myForm() method upon initialization",
                        "        myStore.suspendEvents();",
                        "        for (j=0; j<myRec[radioName].length; j++){",
                        "            if (myRec[radioName][j] !== checkboxfield){",
                        "                fldName2 = myRec[radioName][j].getName()+\"_\"+myRec[radioName][j].getItemId();",
                        "                if (myRec.get(fldName2)){",
                        "                    myRec.set(fldName2, false);  // Update all other radio buttons for this group as unchecked",
                        "                }",
                        "            }",
                        "        }",
                        "        myStore.resumeEvents(true);",
                        "    }",
                        "    myRec.set(fldName, true);  // This will trigger grid update to reprocess via TouchTreeGrid renderer_MyForm() method",
                        "}",
                        ""
                    ]
                },
                "name": "handleFormRadiofieldCheck"
            }
        ]
    },
    "linkedNodes": {},
    "boundStores": {},
    "boundModels": {}
}