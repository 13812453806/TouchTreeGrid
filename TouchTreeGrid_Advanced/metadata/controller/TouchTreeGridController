{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "TouchTreeGridController",
        "mixins": null
    },
    "designerId": "ac3c8037-b03d-45af-ac33-d2b07600986d",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "ACTIO",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "ref",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onLeafItemTap",
                "fn": "onLeafItemTap",
                "designer|params": [
                    "list, index, target, record, e"
                ],
                "implHandler": [
                    "//     Ext.Msg.alert('You tapped leaf! : ' + record.get('text'));\r",
                    "console.log('You tapped leaf! : ' + record.get('text'));"
                ],
                "name": "leafitemtap",
                "designer|targetType": "TouchTreeGrid",
                "designer|controlQuery": "container#firstexample"
            },
            "designerId": "c172ce7d-dc69-445d-aa00-371810eef691"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onFirstExampleItemTap",
                "fn": "onFirstExampleItemTap",
                "designer|params": [
                    "me, list, index, target, record, e"
                ],
                "implHandler": [
                    "console.log('You tapped Node: ' + record.get('text'));"
                ],
                "name": "itemtap",
                "designer|targetType": "TouchTreeGrid",
                "designer|controlQuery": "container#firstexample"
            },
            "designerId": "4b0a4fb1-867a-4099-bd0f-3a37fa23f812"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onExample2ListDisclose",
                "fn": "onExample2ListDisclose",
                "implHandler": [
                    "//Ext.Msg.alert('You disclosed record: ' + record.get('task'));\r",
                    "\r",
                    "\r",
                    "var swapcont = this.getMain().down('#example2container');   \r",
                    "if (swapcont)\r",
                    "{\r",
                    "    var newcont = this.getGriddetailpanel(\r",
                    "    {\r",
                    "        title : 'Example 2 Detail',\r",
                    "        id : 'example2detail',\r",
                    "        layout: {type: 'fit'}\r",
                    "    }\r",
                    "    );\r",
                    "    var myBtn = newcont.down('#griddetailbackbtn');\r",
                    "    myBtn.setConfig({itemId: 'example2detailbackbtn'});\r",
                    "\r",
                    "    if (newcont)\r",
                    "    {\r",
                    "        var newLabel = newcont.down('#griddetaillabel');    \r",
                    "        newLabel.setHtml(record.get('task'));       \r",
                    "\r",
                    "        var fldSet = newcont.down('#griddetailfieldset');\r",
                    "        var result = fldSet.setConfig({\r",
                    "            items : [\r",
                    "            {label: 'Task', xtype: 'textfield', readOnly: true, value: record.data.task}, \r",
                    "            {label: 'User', xtype: 'textfield', readOnly: true, value: record.data.user}, \r",
                    "            {label: 'Duration', xtype: 'numberfield', readOnly: true, value: record.data.duration}, \r",
                    "            {label: 'Done?', xtype: 'checkboxfield', disabled: true, disabledCls: null, checked: record.data.done}\r",
                    "        ]}); \r",
                    "\r",
                    "        swapcont.add(newcont);\r",
                    "        swapcont.setActiveItem(newcont);     \r",
                    "    }\r",
                    "}"
                ],
                "name": "disclose",
                "designer|targetType": "Ext.dataview.List",
                "designer|controlQuery": "list#example2list"
            },
            "designerId": "ca5360b2-0195-467b-83eb-9a2543846d29"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "launch",
                "fn": "launch",
                "implHandler": [
                    "// Load data from JSON file within Launch since doesn't seem to work from within Store itself.\r",
                    "// NOTE:  autoload=true -and- dummy root initialization required in Store to work=>\r",
                    "//     root: {children: []}\r",
                    "\r",
                    "this.loadExample2Store();\r",
                    "\r",
                    "this.loadCensusMaine2000Store();\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "0b66cf00-0e70-40da-a02e-4463641e1c32"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "example2",
                "ref": "example2",
                "selector": "#example2"
            },
            "designerId": "ca08a826-a88a-4b7e-827d-f8f3007e4533"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "loadExample2Store",
                "fn": "loadExample2Store",
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var gridcont = me.getExample2();\r",
                    "var gridurl = 'data/treegrid.json';\r",
                    "\r",
                    "me.loadStore(me, gridcont, gridurl);\r",
                    ""
                ]
            },
            "designerId": "fbe955fe-5057-4045-b5f4-9e206519ef11"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "loadStore",
                "fn": "loadStore",
                "designer|params": [
                    "me",
                    "gridcont",
                    "gridurl"
                ],
                "implHandler": [
                    "\r",
                    "// Change this to reload function with Pull Refresh\r",
                    "var myRequest = Ext.Ajax.request({\r",
                    "    url: gridurl,\r",
                    "    method: 'GET',\r",
                    "    timeout: 5000,\r",
                    "    cache: false,\r",
                    "    dataType: 'json',\r",
                    "    reader:{\r",
                    "        type: 'json'\r",
                    "    },\r",
                    "\r",
                    "    success: function(response) {\r",
                    "        var griddata = Ext.JSON.decode(response.responseText);\r",
                    "\r",
                    "        var gridlistname = gridcont.getListItemId();\r",
                    "        var gridlist = gridcont.down('#'+gridlistname);\r",
                    "        var gridstore = gridlist.getStore();\r",
                    "\r",
                    "        gridstore.removeAll();\r",
                    "        var gridloaded = gridstore.setData(griddata);  \r",
                    "        // setRoot() not working => http://www.sencha.com/forum/showthread.php?242257\r",
                    "\r",
                    "        var refreshed = gridcont.doRefreshList();  \r",
                    "\r",
                    "    },\r",
                    "\r",
                    "    failure: function(response, opts) {\r",
                    "        Ext.Msg.alert(gridurl +' (no data)');     \r",
                    "    }\r",
                    "});\r",
                    ""
                ]
            },
            "designerId": "36a4b260-6c3e-4cbe-8a33-c9ab81f6e9e6"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "main",
                "ref": "main",
                "selector": "main",
                "xtype": "main"
            },
            "designerId": "d4936ea3-824b-4482-b8c2-769421a6b4eb"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "griddetailpanel",
                "autoCreate": true,
                "ref": "griddetailpanel",
                "selector": "griddetailpanel",
                "xtype": "griddetailpanel"
            },
            "designerId": "d827291c-c2e5-4f47-b0e7-28a420a84374"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onExample2GridDetailBackButtonTap",
                "fn": "onExample2GridDetailBackButtonTap",
                "implHandler": [
                    "var swapcont = this.getMain().down('#example2container');   \r",
                    "if (swapcont)\r",
                    "{\r",
                    "    var newcont = swapcont.down('#example2'); \r",
                    "    var priorcont = swapcont.down('#example2detail'); \r",
                    "\r",
                    "    newcont.setShowAnimation({type :\"slide\", direction : \"right\"});\r",
                    "    swapcont.setActiveItem(newcont);  \r",
                    "    swapcont.remove(priorcont, true);\r",
                    "}    "
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#example2detailbackbtn"
            },
            "designerId": "f635d6af-dad9-4455-9e28-3e3245632889"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onExample2ListPullrefresh",
                "fn": "onExample2ListPullrefresh",
                "designer|params": [
                    "container"
                ],
                "implHandler": [
                    "//Ext.Msg.alert('Refresh Example 2 List...');\r",
                    "\r",
                    "this.loadExample2Store();"
                ],
                "name": "pullrefresh",
                "designer|targetType": "TouchTreeGrid",
                "designer|controlQuery": "touchtreegrid#example2"
            },
            "designerId": "012e6c48-8004-4f56-9aaa-121402afe220"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "loadCensusMaine2000Store",
                "fn": "loadCensusMaine2000Store",
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var gridcont = me.getCensusmaine();\r",
                    "var gridurl = 'data/censusmaine2000TREE.json';\r",
                    "\r",
                    "me.loadStore(me, gridcont, gridurl);\r",
                    "\r",
                    "//me.genericdataload(me, 'censusmaine2000', \"select * from CensusMaine2000 \");\r",
                    "\r",
                    "this.loadColumnsCensusMaine(); // also refreshes list\r",
                    ""
                ]
            },
            "designerId": "c9b6c500-96c6-4d66-a51c-1bef00e87b33"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "censusmaine",
                "ref": "censusmaine",
                "selector": "#censusmaine"
            },
            "designerId": "e93ac689-260a-445e-94c4-877cba1b1655"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onCensusMaineListDisclose",
                "fn": "onCensusMaineListDisclose",
                "implHandler": [
                    "var swapcont = this.getMain().down('#censusmainecontainer');   \r",
                    "if (swapcont)\r",
                    "{\r",
                    "    var newcont = this.getCensusdetailpanel(\r",
                    "    {\r",
                    "        title : '2000 Census (Maine)',\r",
                    "        id : 'censusmainedetail',\r",
                    "        layout: {type: 'vbox'},\r",
                    "        scrollable: 'vertical'\r",
                    "    }\r",
                    "    );\r",
                    "\r",
                    "    var device = ((Ext.os.is.Phone) ? 'phone' : 'tablet');\r",
                    "    var orient = ((Ext.Viewport.getWindowWidth() > Ext.Viewport.getWindowHeight()) ? 'landscape' : 'portrait');\r",
                    "\r",
                    "    var inputCls = ((device==='phone' && orient==='portrait') ? 'detailtextfields-phone-portrait' : 'detailtextfields');\r",
                    "\r",
                    "    if (newcont)\r",
                    "    {\r",
                    "        var myList = this.getCensusmaine();\r",
                    "        var newLabel = newcont.down('#censusdetaillabel');    \r",
                    "        newLabel.setHtml(record.get('CATEG'));       \r",
                    "\r",
                    "        var fldSet = newcont.down('#censusfieldset1');\r",
                    "        var result = fldSet.setConfig({\r",
                    "            items : [\r",
                    "            {label: 'Total Population',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.TotalPopulation, 0)}, \r",
                    "            {label: 'Male',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Male, 0)}, \r",
                    "            {label: 'Female',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Female, 0)}, \r",
                    "            {label: 'Under 5 years',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Under5years, 0)}, \r",
                    "            {label: '5 to 9',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age5to9, 0)}, \r",
                    "            {label: '10 to 14',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age10to14, 0)}, \r",
                    "            {label: '15 to 19',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age15to19, 0)}, \r",
                    "            {label: '20 to 24',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age20to24, 0)}, \r",
                    "            {label: '25 to 34',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age25to34, 0)}, \r",
                    "            {label: '35 to 44',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age35to44, 0)}, \r",
                    "            {label: '45 to 54',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age45to54, 0)}, \r",
                    "            {label: '55 to 59',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age55to59, 0)}, \r",
                    "            {label: '60 to 64',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age60to64, 0)}, \r",
                    "            {label: '65 to 74',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65to74, 0)}, \r",
                    "            {label: '75 to 84',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age75to84, 0)}, \r",
                    "            {label: '85 and Over',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age85andOver, 0)}, \r",
                    "            {label: 'Median Age',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.MedianAge, 0)}, \r",
                    "            {label: '18 and Over',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age18andOver, 0)}, \r",
                    "            {label: '18 and Over Male',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age18andOverMale, 0)}, \r",
                    "            {label: '18 and Over Female',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age18andOverFemale, 0)}, \r",
                    "            {label: '21 and Over',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age21andOver, 0)}, \r",
                    "            {label: '62 and Over',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age62andOver, 0)}, \r",
                    "            {label: '65 and Over',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65andOver, 0)}, \r",
                    "            {label: '65 and Over Male',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65andOverMale, 0)}, \r",
                    "            {label: '65 and Over Female',labelWidth: '60%', inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65andOverFemale, 0)}\r",
                    "        ]}); \r",
                    "\r",
                    "        var fldSet2 = newcont.down('#censusfieldset2');\r",
                    "        var resul2t = fldSet2.setConfig({\r",
                    "            items : [\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.TotalPopulation/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Male/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Female/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Under5years/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age5to9/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age10to14/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age15to19/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age20to24/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age25to34/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age35to44/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age45to54/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age55to59/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age60to64/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65to74/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age75to84/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age85andOver/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.MedianAge/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age18andOver/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age18andOverMale/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age18andOverFemale/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age21andOver/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age62andOver/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65andOver/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65andOverMale/record.data.TotalPopulation*100, 1, \"\", \"%\")},\r",
                    "            {inputCls: inputCls, xtype: 'textfield', readOnly: true, value: myList.formatNumbers(record.data.Age65andOverFemale/record.data.TotalPopulation*100, 1, \"\", \"%\")}\r",
                    "        ]}); \r",
                    "        swapcont.add(newcont);\r",
                    "        swapcont.setActiveItem(newcont);      \r",
                    "    }\r",
                    "}"
                ],
                "name": "disclose",
                "designer|targetType": "Ext.dataview.List",
                "designer|controlQuery": "list#censusmainelist"
            },
            "designerId": "7ec135a2-e0ac-4e1d-94a5-820cf50d7d5c"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "censusdetailpanel",
                "autoCreate": true,
                "ref": "censusdetailpanel",
                "selector": "censusdetailpanel",
                "xtype": "censusdetailpanel"
            },
            "designerId": "e653de7a-8f9f-4826-bc52-4368561a5d6e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onCensusDetailBackButtonTap",
                "fn": "onCensusDetailBackButtonTap",
                "implHandler": [
                    "var swapcont = this.getMain().down('#censusmainecontainer');   \r",
                    "if (swapcont)\r",
                    "{\r",
                    "    var newcont = swapcont.down('#censusmaine'); \r",
                    "    var priorcont = swapcont.down('#censusdetailpanel'); \r",
                    "\r",
                    "    newcont.setShowAnimation({type :\"slide\", direction : \"right\"});\r",
                    "    swapcont.setActiveItem(newcont);  \r",
                    "    swapcont.remove(priorcont, true);\r",
                    "}    "
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#censusdetailbackbtn"
            },
            "designerId": "3ea85003-6582-416d-9511-96e4e5db3daa"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onOrientationChange",
                "fn": "onOrientationChange",
                "designer|params": [
                    "viewport, orientation, width, height"
                ],
                "implHandler": [
                    "//Ext.Msg.alert('', 'Orientation change: ' + orientation, Ext.emptyFn); \r",
                    "\r",
                    "\r",
                    "// Call funciton to hide/show titlebar and bottom tabbar when in landscape mode, but only if\r",
                    "// active window contains TouchGridPanel with active expand/collapse toolbar\r",
                    "this.hideShowPanels();\r",
                    "\r",
                    "// Demo reconfiguring columns array for Census example based on device and orientation\r",
                    "this.loadColumnsCensusMaine();"
                ],
                "name": "orientationchange",
                "designer|targetType": null,
                "designer|controlQuery": "viewport"
            },
            "designerId": "9032f0e8-666e-4e02-8d42-9d707a2a33f1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "loadColumnsCensusMaine",
                "fn": "loadColumnsCensusMaine",
                "implHandler": [
                    "/* Demo grid column changes based on device (phone vs. tablet) and orientation (portrait vs. landscape) */\r",
                    "/* NOTE:  When connected to data source suggest storing array configruations in a table \r",
                    "for each grid, device and orienation configuration */ \r",
                    "\r",
                    "var device = ((Ext.os.is.Phone) ? 'phone' : 'tablet');\r",
                    "var orient = ((Ext.Viewport.getWindowWidth() > Ext.Viewport.getWindowHeight()) ? 'landscape' : 'portrait');\r",
                    "\r",
                    "var colArr = [];\r",
                    "\r",
                    "if (device==='phone' && orient==='portrait') {\r",
                    "    colArr = [\r",
                    "    {\r",
                    "        header: '&nbsp;',\r",
                    "        dataIndex: 'CATEG',\r",
                    "        width: '35%',\r",
                    "        style: 'text-align: left;',\r",
                    "        categStyle: 'font-weight: bold; text-align: left; color: blue;',\r",
                    "        headerStyle: 'text-align: left; color: #ccc;'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Population',\r",
                    "        dataIndex: 'TotalPopulation',\r",
                    "        width: '20%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.TotalPopulation, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Males',\r",
                    "        dataIndex: 'Male',\r",
                    "        width: '20%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Male, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Females',\r",
                    "        dataIndex: 'Female',\r",
                    "        width: '20%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Female, 0)'\r",
                    "    }\r",
                    "    ];    \r",
                    "}\r",
                    "\r",
                    "if (device==='phone' && orient==='landscape') {\r",
                    "    colArr = [\r",
                    "    {\r",
                    "        header: '&nbsp;',\r",
                    "        dataIndex: 'CATEG',\r",
                    "        width: '35%',\r",
                    "        style: 'text-align: left;',\r",
                    "        categStyle: 'font-weight: bold; text-align: left; color: blue;',\r",
                    "        headerStyle: 'text-align: left; color: #ccc;'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Population',\r",
                    "        dataIndex: 'TotalPopulation',\r",
                    "        width: '15%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.TotalPopulation, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Males',\r",
                    "        dataIndex: 'Male',\r",
                    "        width: '15%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Male, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Females',\r",
                    "        dataIndex: 'Female',\r",
                    "        width: '15%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Female, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Median',\r",
                    "        dataIndex: 'MedianAge',\r",
                    "        width: '15%',\r",
                    "        style: 'text-align: center;',\r",
                    "        categStyle: 'text-align: center;',\r",
                    "        headerStyle: 'text-align: center; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.MedianAge, 0)'\r",
                    "    }\r",
                    "    ];  \r",
                    "}\r",
                    "\r",
                    "if (device==='tablet' && orient==='portrait') {\r",
                    "    colArr = [\r",
                    "    {\r",
                    "        header: '&nbsp;',\r",
                    "        dataIndex: 'CATEG',\r",
                    "        width: '23%',\r",
                    "        style: 'text-align: left;',\r",
                    "        categStyle: 'font-weight: bold; text-align: left; color: blue;',\r",
                    "        headerStyle: 'text-align: left; color: #ccc;'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Population',\r",
                    "        dataIndex: 'TotalPopulation',\r",
                    "        width: '12%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.TotalPopulation, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Males',\r",
                    "        dataIndex: 'Male',\r",
                    "        width: '12%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Male, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Females',\r",
                    "        dataIndex: 'Female',\r",
                    "        width: '12%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Female, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Median',\r",
                    "        dataIndex: 'MedianAge',\r",
                    "        width: '12%',\r",
                    "        style: 'text-align: center;',\r",
                    "        categStyle: 'text-align: center;',\r",
                    "        headerStyle: 'text-align: center; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.MedianAge, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: '18+',\r",
                    "        dataIndex: 'Age18andOver',\r",
                    "        width: '12%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Age18andOver, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: '21+',\r",
                    "        dataIndex: 'Age21andOver',\r",
                    "        width: '12%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Age21andOver, 0)'\r",
                    "    }\r",
                    "    ];    \r",
                    "\r",
                    "}\r",
                    "\r",
                    "if (device==='tablet' && orient==='landscape') {\r",
                    "    colArr = [\r",
                    "    {\r",
                    "        header: '&nbsp;',\r",
                    "        dataIndex: 'CATEG',\r",
                    "        width: '21%',\r",
                    "        style: 'text-align: left;',\r",
                    "        categStyle: 'font-weight: bold; text-align: left; color: blue;',\r",
                    "        headerStyle: 'text-align: left; color: #ccc;'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Population',\r",
                    "        dataIndex: 'TotalPopulation',\r",
                    "        width: '10%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.TotalPopulation, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Males',\r",
                    "        dataIndex: 'Male',\r",
                    "        width: '8%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Male, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Females',\r",
                    "        dataIndex: 'Female',\r",
                    "        width: '8%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Female, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: 'Median',\r",
                    "        dataIndex: 'MedianAge',\r",
                    "        width: '8%',\r",
                    "        style: 'text-align: center;',\r",
                    "        categStyle: 'text-align: center;',\r",
                    "        headerStyle: 'text-align: center; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.MedianAge, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: '18+',\r",
                    "        dataIndex: 'Age18andOver',\r",
                    "        width: '8%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Age18andOver, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: '21+',\r",
                    "        dataIndex: 'Age21andOver',\r",
                    "        width: '8%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Age21andOver, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: '62+',\r",
                    "        dataIndex: 'Age62andOver',\r",
                    "        width: '8%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Age62andOver, 0)'\r",
                    "    },\r",
                    "    {\r",
                    "        header: '65+',\r",
                    "        dataIndex: 'Age65andOver',\r",
                    "        width: '8%',\r",
                    "        style: 'text-align: right;',\r",
                    "        categStyle: 'text-align: right;',\r",
                    "        headerStyle: 'text-align: right; color: #ccc;',\r",
                    "        renderer: 'this.formatNumbers(values.Age65andOver, 0)'\r",
                    "    }\r",
                    "    ];    \r",
                    "\r",
                    "}\r",
                    "\r",
                    "var gridcont = this.getCensusmaine();\r",
                    "gridcont.setColumns(colArr);\r",
                    "gridcont.doRefreshList(true);   // Don't change collapse levels when refreshing\r",
                    ""
                ]
            },
            "designerId": "43a314b3-d705-4e27-8c64-94190e975866"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "hideShowPanels",
                "fn": "hideShowPanels",
                "implHandler": [
                    "// Controls display of panels when phone is in landscape vs portrait orientation to\r",
                    "//provide more realestate for scrolling the data\r",
                    "\r",
                    "var device = ((Ext.os.is.Phone) ? 'phone' : 'tablet');\r",
                    "var orient = ((Ext.Viewport.getWindowWidth() > Ext.Viewport.getWindowHeight()) ? 'landscape' : 'portrait');\r",
                    "\r",
                    "if (device !== 'phone') {return;}\r",
                    "\r",
                    "// Call funciton to hide/show titlebar and bottom tabbar when in landscape mode, but only if\r",
                    "// active window contains TouchGridPanel with active expand/collapse toolbar\r",
                    "var collapseBar = Ext.Viewport.down('#maintabpanel').getActiveItem().down('#touchtreegridbuttons');\r",
                    "if (!collapseBar) {return;}\r",
                    "\r",
                    "\r",
                    "var hide = (orient === 'landscape');\r",
                    "\r",
                    "// Hide bottom tabbar and titlebar for phones in landscape mode ... show in portrait mode\r",
                    "var main = this.getMain();\r",
                    "\r",
                    "main.down('#maintitlebar').setHidden(hide);\r",
                    "main.down('#maintabbar').setHidden(hide);\r",
                    "\r",
                    "collapseBar.down('#touchtreegridlabel').setHtml(hide ? 'Rotate for Menu' : '');\r",
                    "collapseBar.down('#touchtreegridicon').setHidden(!hide);\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "03579e4b-aa5e-40af-b8c6-02ef51a87896"
        }
    ]
}