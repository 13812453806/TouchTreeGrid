{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "CommonController"
    },
    "designerId": "6d3ffdfd-d975-4bf7-a5e3-14d24c1d8f72",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMainTabpanelActiveItemChange",
                "implHandler": [
                    "var newcont = value.getItemId();\r",
                    "var grid, gridcont, numNodes, mydata, numRecords;\r",
                    "\r",
                    "gridcont = value.down('touchtreegrid');\r",
                    "grid = gridcont.down('#'+gridcont.getListItemId());\r",
                    "\r",
                    "if (newcont === 'censusmainecontainer') {\r",
                    "\r",
                    "    // Check store for data and load if empty (only)\r",
                    "    numNodes = grid.getStore().getData().length;\r",
                    "    if (numNodes === 0) {censusController.loadCensusMaine2000Store();}  \r",
                    "}\r",
                    "\r",
                    "if (newcont === 'projecttab'){\r",
                    "    // Check store for data and load if empty (only)\r",
                    "    numNodes = grid.getStore().getData().length;\r",
                    "    if (numNodes === 0) {projectController.loadExample2Store(gridcont);}  \r",
                    "}\r",
                    "\r",
                    "if (newcont === 'listscontainer'){\r",
                    "    numRecords = grid.getStore().getData().length;\r",
                    "    if (numRecords === 0) {\r",
                    "        Ext.Viewport.setMasked({\r",
                    "            xtype: 'loadmask',\r",
                    "            message: 'Loading Basic...'\r",
                    "        });\r",
                    "        grid.getStore().load();\r",
                    "        gridcont.doRefreshList();\r",
                    "        Ext.Viewport.setMasked(false);\r",
                    "    }  \r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ],
                "name": "activeitemchange",
                "designer|targetType": "Ext.tab.Panel",
                "designer|controlQuery": "tabpanel#maintabpanel"
            },
            "designerId": "afe7869d-4f1b-4d52-9d17-5915adbed3b6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onOrientationChange",
                "designer|params": [
                    "viewport, orientation, width, height"
                ],
                "implHandler": [
                    "//Ext.Msg.alert('', 'Orientation change: ' + orientation, Ext.emptyFn); \r",
                    "\r",
                    "\r",
                    "// Call funciton to hide/show titlebar and bottom tabbar when in landscape mode, but only if\r",
                    "// active window contains TouchGridPanel with active expand/collapse toolbar\r",
                    "this.hideShowPanels();\r",
                    "\r",
                    "// Demo reconfiguring columns array for Census example based on device and orientation\r",
                    "censusController.loadColumnsCensusMaine();"
                ],
                "name": "orientationchange",
                "designer|targetType": null,
                "designer|controlQuery": "viewport"
            },
            "designerId": "86b43c61-dcaf-435d-9c8d-e0d835e182ba"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onTitlebarGridhelp",
                "designer|params": [
                    "main"
                ],
                "implHandler": [
                    "// Trapping tap event on entire titlebar instead of just help icon\r",
                    "var me=this;\r",
                    "\r",
                    "var image = main.down('#gridhelp');\r",
                    "\r",
                    "\r",
                    "var currItem = Ext.Viewport.down('#maintabpanel').getActiveItem();\r",
                    "\r",
                    "var grid;\r",
                    "if (currItem.getItemId() === 'projecttab') {\r",
                    "    // Project example contained within sub tab panel so need to get active item of that \r",
                    "    grid = currItem.down('#projecttabpanel').getActiveItem().down('touchtreegrid');\r",
                    "} \r",
                    "else if (currItem.getItemId() === 'listscontainer') {\r",
                    "    // Lists example contained within sub tab panel so need to get active item of that \r",
                    "    grid = currItem.down('#liststabpanel').getActiveItem().down('touchtreegrid');\r",
                    "}\r",
                    "else if (currItem.getItemId() === 'taskslisttab') {\r",
                    "    // Lists example contained within sub tab panel so need to get active item of that \r",
                    "    grid = currItem.down('#tasksTabPanel').getActiveItem().down('touchtreegrid');\r",
                    "} else\r",
                    "{    \r",
                    "    grid = currItem.down('touchtreegrid');\r",
                    "}   \r",
                    "\r",
                    "\r",
                    "if (!grid) {return;}\r",
                    "\r",
                    "gridId = grid.getHelpHtml();\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "    url: gridId,\r",
                    "    method: 'GET',\r",
                    "    callback: function(options, success, response) {\r",
                    "\r",
                    "        var help = me.getGridHelpPanel();\r",
                    "        help.setHtml( response.responseText );\r",
                    "        help.showBy(image);\r",
                    "    }\r",
                    "});"
                ],
                "name": "gridhelp",
                "designer|targetType": "Ext.TitleBar",
                "designer|controlQuery": "titlebar"
            },
            "designerId": "975ae569-2236-46ec-8b49-50b8495bb968"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onGridDetailBackButtonTap",
                "implHandler": [
                    "// Reusing the Back button for all Project Task examples by storing references when creating detail panel (list disclose)\r",
                    "var swapcont = button.up('#griddetailpanel').swapcont;  \r",
                    "if (swapcont)\r",
                    "{\r",
                    "    gridItemId = button.up('#griddetailpanel').gridItemId;\r",
                    "    var newcont = swapcont.down('#'+gridItemId); \r",
                    "\r",
                    "    newcont.setShowAnimation({type :\"slide\", direction : \"right\"});\r",
                    "    swapcont.setActiveItem(newcont);  \r",
                    "}    "
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#griddetailbackbtn"
            },
            "designerId": "e43ba2dd-a49f-4e9e-82ca-1f25b1bc9f01"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "main",
                "selector": "main",
                "xtype": "main"
            },
            "designerId": "e14521a3-99d5-47d5-a5a4-9ee2fd72e5dc"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "griddetailpanel",
                "selector": "griddetailpanel",
                "xtype": "griddetailpanel"
            },
            "designerId": "4e1033fa-1d03-4293-8878-1da54ce40178"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "gridHelpPanel",
                "selector": "gridHelpPanel",
                "xtype": "gridHelpPanel"
            },
            "designerId": "58b0189d-ee6d-417b-a9bc-95632abd9e78"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadTree",
                "designer|params": [
                    "collapseLevel",
                    "ArrRef",
                    "fldListArr",
                    "gridcont",
                    "rootVal"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var gridlistname = gridcont.getListItemId();\r",
                    "var gridlist = gridcont.down('#'+gridlistname);\r",
                    "\r",
                    "// Store ArrRef to Grid component for faster collapse/expand\r",
                    "if (!ArrRef) {ArrRef = gridlist.ArrRef;}  // Array stored with List object and retrieved on subsequent calls\r",
                    "else {gridlist.ArrRef = ArrRef;}\r",
                    "\r",
                    "var treejson = this.getTree(ArrRef, rootVal, collapseLevel, fldListArr, false);\r",
                    "\r",
                    "// Update current level for next time\r",
                    "gridcont.collapseLevel = collapseLevel;\r",
                    "\r",
                    "var gridstore = gridlist.getStore();\r",
                    "\r",
                    "gridstore.suspendEvents();\r",
                    "\r",
                    "gridstore.removeAll(true);\r",
                    "var gridloaded = gridstore.setData(treejson);  // setRoot() not working => http://www.sencha.com/forum/showthread.php?242257\r",
                    "gridstore.resumeEvents(true);  // discard queued events\r",
                    "\r",
                    "// workaround to get Touch 2.2 pullrefresh plugin to auto-snapBack       \r",
                    "var scroller = gridlist.getScrollable().getScroller();\r",
                    "scroller.minPosition.y = 1;\r",
                    "var refreshed = gridcont.doRefreshList();  \r",
                    ""
                ]
            },
            "designerId": "0960ef12-42f7-498e-9b1d-1bdd797200cd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getTree",
                "designer|params": [
                    "list",
                    "rootId",
                    "expLevel",
                    "fldListArr",
                    "hasTopRoot"
                ],
                "implHandler": [
                    "// Required Fields:  'ID', 'PARENT_ID'   \r",
                    "// list       - data array to convert to treestore format\r",
                    "// rootId     - value of ultimate PARENT_ID (can be null)\r",
                    "// expLevel   - level to expand treestore to while generating\r",
                    "// fldListArr - defines columns to include in treestore from ArrRef.  \r",
                    "//              2nd parameter defined levels including and higher where that data element will be blanked out when generating the treestore\r",
                    "//              (particularly used for totalled numerics that don't apply to root levels, but the generating SQL can't update as NULL due to SQL UNION constraints \r",
                    "// hasTopRoot - true if a single root row exists\r",
                    "expLevel = (Ext.isEmpty(expLevel) ? 99 : expLevel);  // Level for initial expansion ...Defaults to fully expanded if not provided\r",
                    "\r",
                    "var tree, root = {}, result = []; // fetch list from database\r",
                    "root.ID = rootId;\r",
                    "tree = {text : \".\"};\r",
                    "result.push(this.createTreeStructure(tree, root, list, 1, expLevel, fldListArr, hasTopRoot));\r",
                    "return result[0][0];"
                ]
            },
            "designerId": "48886486-2f70-4269-b91b-8f5479b362ad"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createTreeStructure",
                "designer|params": [
                    "tree",
                    "root",
                    "list",
                    "level",
                    "expLevel",
                    "fldListArr",
                    "hasTopRoot"
                ],
                "implHandler": [
                    "var i=0, result = [], child, childList = [], children = [], temptree = {}, thisExp;\r",
                    "\r",
                    "if (level === 1 && hasTopRoot) {children = [list[0]];}  // Initial root\r",
                    "else {children = this.getChildren(root, list, false);} //Fetch children\r",
                    "\r",
                    "var ln = children.length;\r",
                    "\r",
                    "for(i=0; i<ln;i++)\r",
                    "{\r",
                    "    child = children[i];\r",
                    "    // Blank out categorized data above specified level as pre-specified in fldListArr\r",
                    "    for (var j=0; j< fldListArr.length; j++) {\r",
                    "        if (fldListArr[j][1] > 0 && fldListArr[j][1]>=level) {child[fldListArr[j][0]] = '';}\r",
                    "    }\r",
                    "    if(this.getChildren(child, list, true).length===0) \r",
                    "    {\r",
                    "        temptree = {LEVEL : level, ID : child.ID, PARENT_ID : child.PARENT_ID, leaf : true};\r",
                    "        this.assignMembers(fldListArr, temptree, child);\r",
                    "\r",
                    "        childList.push(temptree);\r",
                    "        tree[\"children\"] = childList; // Add child as child of the passed parent\r",
                    "    }\r",
                    "    else\r",
                    "    {\r",
                    "        thisExp = (level < expLevel ? true : false);\r",
                    "        temptree = {LEVEL : level, ID : child.ID, PARENT_ID : child.PARENT_ID, expanded : thisExp, leaf : false}; \r",
                    "        this.assignMembers(fldListArr, temptree, child);\r",
                    "\r",
                    "        childList.push(temptree);\r",
                    "        tree[\"children\"] = childList;\r",
                    "        this.createTreeStructure(temptree, child, list, level+1, expLevel, fldListArr); // Recursively create tree structure for the child since children exist.\r",
                    "    }\r",
                    "}\r",
                    "result.push(tree);\r",
                    "return result;\r",
                    ""
                ]
            },
            "designerId": "71767039-9d48-47d8-b770-f2ef73a3a921"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "assignMembers",
                "designer|params": [
                    "fldListArr",
                    "treeObj",
                    "child"
                ],
                "implHandler": [
                    "\tfor (var i=0; i< fldListArr.length; i++) {\r",
                    "\t\t  treeObj[fldListArr[i][0]] = child[fldListArr[i][0]];\r",
                    "    }"
                ]
            },
            "designerId": "95639be6-6f08-4e75-8488-41123d03f32e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getChildren",
                "designer|params": [
                    "root",
                    "list",
                    "firstOnly"
                ],
                "implHandler": [
                    "       var i=0, ln = list.length, result = [];\r",
                    "       for(i=0; i<ln;i++)\r",
                    "       {\r",
                    "          if(root.ID===list[i].PARENT_ID)\r",
                    "          {\r",
                    "             result.push(list[i]);\r",
                    "             if (firstOnly) {return result;} // Only checking if single child exists so abort upon first detection\r",
                    "          }\r",
                    "       }\r",
                    "       return result;"
                ]
            },
            "designerId": "307d29b1-b4c6-46f1-a811-35ec1352003b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "hideShowPanels",
                "implHandler": [
                    "// Controls display of panels when phone is in landscape vs portrait orientation to\r",
                    "//provide more realestate for scrolling the data\r",
                    "\r",
                    "var device = ((Ext.os.is.Phone) ? 'phone' : 'tablet');\r",
                    "var orient = ((Ext.Viewport.getWindowWidth() > Ext.Viewport.getWindowHeight()) ? 'landscape' : 'portrait');\r",
                    "\r",
                    "if (device !== 'phone') {return;}\r",
                    "\r",
                    "// Call funciton to hide/show titlebar and bottom tabbar when in landscape mode, but only if\r",
                    "// active window contains TouchGridPanel with active expand/collapse toolbar\r",
                    "var currItem = Ext.Viewport.down('#maintabpanel').getActiveItem();\r",
                    "\r",
                    "var collapseBar, projex=false;\r",
                    "if (currItem.getItemId() === 'projecttab') {\r",
                    "    // Project example contained within sub tab panel so need to get active item of that \r",
                    "    projex=true;\r",
                    "    collapseBar = currItem.down('#projecttabpanel').getActiveItem().down('#touchtreegridbuttons');\r",
                    "} else\r",
                    "{    \r",
                    "    collapseBar = currItem.down('#touchtreegridbuttons');\r",
                    "}    \r",
                    "\r",
                    "if (!collapseBar) {return;}\r",
                    "\r",
                    "var hide = (orient === 'landscape');\r",
                    "\r",
                    "// Hide bottom tabbar and titlebar for phones in landscape mode ... show in portrait mode\r",
                    "var main = this.getMain();\r",
                    "\r",
                    "main.down('#maintitlebar').setHidden(hide);\r",
                    "main.down('#maintabbar').setHidden(hide);\r",
                    "\r",
                    "// I could add logic for Project tab to add this for each tab in event user tabs to different example\r",
                    "// if (projex) {....} else {...}\r",
                    "collapseBar.down('#touchtreegridlabel').setHtml(hide ? 'Rotate for Menu' : '');\r",
                    "collapseBar.down('#touchtreegridicon').setHidden(!hide);\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "10a227af-ee1a-4b91-8cf4-fef61c817fd8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadStore",
                "designer|params": [
                    "me",
                    "gridcont",
                    "gridurl",
                    "loadmask",
                    "loadStoreInPostProcess"
                ],
                "implHandler": [
                    "// Load TreeStore data from JSON file within Controller since doesn't seem to work from within Store itself.\r",
                    "// NOTE:  autoload=true -and- dummy root initialization required in Store to work=>\r",
                    "//     root: {children: []}\r",
                    "// Also:  Regular stores in JSON file format seem to load from within Store without issue.\r",
                    "\r",
                    "if (loadmask) {\r",
                    "    Ext.Viewport.setMasked({\r",
                    "        xtype: 'loadmask',\r",
                    "        message: loadmask\r",
                    "    });\r",
                    "}\r",
                    "\r",
                    "var myRequest = Ext.Ajax.request({\r",
                    "    url: gridurl,\r",
                    "    method: 'GET',\r",
                    "    timeout: 10000,\r",
                    "    cache: false,\r",
                    "    dataType: 'json',\r",
                    "    reader:{\r",
                    "        type: 'json'\r",
                    "    },\r",
                    "\r",
                    "    success: function(response) {\r",
                    "        var griddata = Ext.JSON.decode(response.responseText);\r",
                    "\r",
                    "        var gridListItemId = gridcont.getListItemId();\r",
                    "        var gridlist = gridcont.down('#'+gridListItemId);\r",
                    "        var gridstore = gridlist.getStore();\r",
                    "\r",
                    "        if (!loadStoreInPostProcess) {\r",
                    "            gridstore.suspendEvents();      \r",
                    "            gridstore.removeAll();\r",
                    "            var gridloaded = gridstore.setData(griddata);  \r",
                    "            // setRoot() not working for TreeStores => http://www.sencha.com/forum/showthread.php?242257\r",
                    "            gridstore.resumeEvents();\r",
                    "            if (loadmask) {Ext.Viewport.setMasked(false);}\r",
                    "        }            \r",
                    "\r",
                    "        commonController.postLoadProcess(gridListItemId, gridcont, griddata); \r",
                    "\r",
                    "    },\r",
                    "\r",
                    "    failure: function(response, opts) {\r",
                    "        if (loadmask) {Ext.Viewport.setMasked(false);}\r",
                    "\r",
                    "        Ext.Msg.alert('Data not loaded: '+gridurl);     \r",
                    "    }\r",
                    "});\r",
                    ""
                ]
            },
            "designerId": "fc0973aa-95c4-4cfd-9280-a67365ecc013"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadDynamicStore",
                "designer|params": [
                    "me",
                    "gridcont",
                    "gridurl",
                    "loadmask",
                    "loadStoreInPostProcess"
                ],
                "implHandler": [
                    "\r",
                    "if (loadmask) {\r",
                    "    Ext.Viewport.setMasked({\r",
                    "        xtype: 'loadmask',\r",
                    "        message: loadmask\r",
                    "    });\r",
                    "}\r",
                    "\r",
                    "var myRequest = Ext.Ajax.request({\r",
                    "    url: gridurl,\r",
                    "    method: 'GET',\r",
                    "    timeout: 10000,\r",
                    "    cache: false,\r",
                    "    dataType: 'json',\r",
                    "    reader:{\r",
                    "        type: 'json'\r",
                    "    },\r",
                    "\r",
                    "    success: function(response) {\r",
                    "        var alldata = Ext.JSON.decode(response.responseText);\r",
                    "        var griddata             = alldata.datalist;\r",
                    "        var columnsPhonePortrait = alldata.columnsPhonePortrait;\r",
                    "        var fields               = alldata.fields;\r",
                    "\r",
                    "        // NOTE:  Could load different device and orienation column configurations\r",
                    "        //        and apply based on device/orientation here .. and update again\r",
                    "        //        within onOrientationChange().  If you load multiple configurations\r",
                    "        //        It is suggested that you store each of the column arrays to gridcont\r",
                    "        //        component for easy retrieval when switching.  \r",
                    "        //\r",
                    "        //        Ex:  gridcont.columnsPhonePortrait = columnsPhonePortrait;\r",
                    "        //             gridcont.columnsTabletLandscape = columnsTabletLandscape;\r",
                    "        //             etc...\r",
                    "        //\r",
                    "        //        Simply by calling doRefreshList() method after updating columns your \r",
                    "        //        grid will immediately reflect the new column configuration.\r",
                    "        //\r",
                    "        //        Could support customized user preferences in this same way.\r",
                    "\r",
                    "        var gridListItemId = gridcont.getListItemId();\r",
                    "        var gridlist = gridcont.down('#'+gridListItemId);\r",
                    "\r",
                    "        gridcont.setColumns(columnsPhonePortrait);\r",
                    "\r",
                    "        // Note: we are defining fields directly within Store instead of creating Model\r",
                    "        var gridstore = Ext.create('Ext.data.Store', {fields: fields});\r",
                    "\r",
                    "        gridlist.setStore(gridstore);\r",
                    "\r",
                    "        if (!loadStoreInPostProcess) {\r",
                    "            gridstore.suspendEvents();      \r",
                    "            var gridloaded = gridstore.add(griddata);  \r",
                    "            gridstore.resumeEvents();\r",
                    "            if (loadmask) {Ext.Viewport.setMasked(false);}\r",
                    "        }            \r",
                    "\r",
                    "        commonController.postLoadProcess(gridListItemId, gridcont, griddata); \r",
                    "\r",
                    "    },\r",
                    "\r",
                    "    failure: function(response, opts) {\r",
                    "        if (loadmask) {Ext.Viewport.setMasked(false);}\r",
                    "\r",
                    "        Ext.Msg.alert('Data not loaded: '+gridurl);     \r",
                    "    }\r",
                    "});\r",
                    ""
                ]
            },
            "designerId": "b7c334e4-8d56-42e3-98e8-e43c6ddaec89"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "postLoadProcess",
                "designer|params": [
                    "gridListItemId",
                    "gridcont",
                    "griddata"
                ],
                "implHandler": [
                    "var refreshed, fldListArr = [], collapseLvl, gridlist, scroller;\r",
                    "\r",
                    "gridlist = gridcont.down('#'+gridListItemId);\r",
                    "scroller = gridlist.getScrollable().getScroller();\r",
                    "\r",
                    "if (gridListItemId === 'censusmainelist') {\r",
                    "    // Collapse nodes to defined level\r",
                    "    var depth = gridcont.getDefaultCollapseLevel();\r",
                    "    if (depth !== 99) {gridcont.doExpandDepth(depth);}\r",
                    "\r",
                    "    censusController.loadColumnsCensusMaine(); // also refreshes list\r",
                    "}\r",
                    "else if ((gridListItemId ==='example2list') ||\r",
                    "(gridListItemId ==='example2Blist') ||\r",
                    "(gridListItemId ==='example2Clist')) {\r",
                    "    if (gridListItemId ==='example2list') {\r",
                    "        Ext.Msg.alert('Custom Expand levels!'); \r",
                    "    }\r",
                    "\r",
                    "    projectController.getProjectContainer().down('#example2list').up('touchtreegrid').doRefreshList();\r",
                    "    projectController.getProjectContainer().down('#example2Blist').up('touchtreegrid').doRefreshList();\r",
                    "    projectController.getProjectContainer().down('#example2Clist').up('touchtreegrid').doRefreshList();\r",
                    "\r",
                    "    // workaround to get Touch 2.2 pullrefresh plugin to auto-snapBack\r",
                    "    scroller.scrollTo(0,1);\r",
                    "}\r",
                    "else if (gridListItemId === 'dow2012grouper2list') {\r",
                    "\r",
                    "    // For each field define level \"up to which\" values will be included on category rows.\r",
                    "    // '0' means highest root row will include non-nullable values (or as defined in flat file) for this field.\r",
                    "    // '1' means level 1 categories will include data (if defined)\r",
                    "    // '2' means data will only be included for up to level 2.  Level 1 and root will not show data for this column.\r",
                    "    // etc...\r",
                    "    fldListArr = [['CloseDate', 1], ['Open', 1], ['High', 1], ['Low', 1], ['Close', 1],\r",
                    "    ['Volume', 1], ['AdjClose', 1], ['Chg', 1], ['ChgPct', 1], ['YearMonth', 0],\r",
                    "    ['grouper', 0]]; \r",
                    "\r",
                    "    collapseLvl = (Ext.isEmpty(gridcont.collapseLevel) ? 1 : gridcont.collapseLevel);\r",
                    "    // Refer to expCollapse() method where collapseLevel could be updated for manual expand processing\r",
                    "\r",
                    "    commonController.loadTree(collapseLvl, griddata.datalist, fldListArr, gridcont, null); // collapse on initial load\r",
                    "\r",
                    "    // Sort by YearMonth, then CloseDate\r",
                    "    gridlist.getStore().sort([{property: 'YearMonth', direction: 'DESC'},\r",
                    "    {property: 'CloseDate', direction: 'DESC'}]);\r",
                    "\r",
                    "    Ext.Viewport.setMasked(false);\r",
                    "}\r",
                    "\r",
                    "else if (gridListItemId === 'dow2012Dynamiclist') {\r",
                    "    refreshed = gridcont.doRefreshList(); \r",
                    "\r",
                    "    Ext.Msg.alert('Server defined Grid!');\r",
                    "}\r",
                    "\r",
                    "else {\r",
                    "    refreshed = gridcont.doRefreshList(); \r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "b1cd0c3f-e292-4bb0-8c20-013d9f8ec63d"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    "/* Global object variables available throughout application */\r",
                    "commonController = this.getApplication().getController('TouchTreeGrid.controller.CommonController');\r",
                    "tasksController = this.getApplication().getController('TouchTreeGrid.controller.TasksController');\r",
                    "projectController = this.getApplication().getController('TouchTreeGrid.controller.ProjectController');\r",
                    "censusController = this.getApplication().getController('TouchTreeGrid.controller.CensusController');\r",
                    "listsController = this.getApplication().getController('TouchTreeGrid.controller.ListsController');\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "2aeb735d-1f39-495e-9650-e408f48b2ec1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onHelpPanelCloseButtonTap",
                "implHandler": [
                    "button.up('gridHelpPanel').hide();"
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#helpPanelCloseBtn"
            },
            "designerId": "14605e04-870f-467a-901b-6d7edefff558"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "launch",
                "implHandler": [
                    "/* Global variable to define current Touch version 2.1 vs. 2.2 */\r",
                    "touchVersion = '2.2';\r",
                    "\r",
                    "/* Hack to look to see if setInfinite() function exists on one of the grids as means to determine framework version .. not sure if more direct method exists or not */\r",
                    "var listcont = listsController.getListscontainer();\r",
                    "var grp2cont = listcont.down('#dow2012grouper2Cont');\r",
                    "var grp2grid = grp2cont.down('#dow2012grouper2list');\r",
                    "\r",
                    "\r",
                    "if (typeof grp2grid.setInfinite != 'function') {  /* if not found then we are running 2.1 framework */\r",
                    "    touchVersion = '2.1';\r",
                    "}\r",
                    "\r",
                    "\r",
                    "if (touchVersion === '2.2') {\r",
                    "    /* Temporary code to hide Grouper2 example due to Touch 2.2 bug .. works under Touch 2.1 framework */\r",
                    "    var tab = listcont.down('#liststabpanel');\r",
                    "    tab.remove(grp2cont);\r",
                    "} else {\r",
                    "\r",
                    "\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "ada9a9e3-f669-4d3b-97b6-e61741f83ff9"
        }
    ]
}