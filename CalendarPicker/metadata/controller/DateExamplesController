{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "DateExamplesController",
        "mixins": [
            "{languageMixin: 'CalendarPicker.controller.languageMixin'}"
        ]
    },
    "designerId": "86531a3e-f268-40f4-b550-e18c5ff85973",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container",
                "designer|params": [
                    "container"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample1CheckIn",
                "implHandler": [
                    "var languageSelect = this.getLanguageSelect();",
                    "",
                    "var returnItem = this.getDateexamples().down('#example1');",
                    "var lastSelDt = returnItem.down('#checkin_btn').lastSelectedDate;",
                    "",
                    "var selDts=(Ext.isEmpty(lastSelDt) ? [] : [lastSelDt]), disableDts=[];",
                    "var checkOutDt = returnItem.down('#checkout_btn').lastSelectedDate;",
                    "if (!Ext.isEmpty(checkOutDt)) {",
                    "    // disabled checkkou date if defined",
                    "    selDts.push(checkOutDt);",
                    "    disableDts.push(checkOutDt);",
                    "",
                    "}",
                    "",
                    "var holidayDtArr = HOLIDAYS;",
                    "",
                    "var getDts = Ext.create('widget.calendarpicker', {",
                    "    title : 'Choose Check In',",
                    "    itemId : 'calendar_checkin',",
                    "    customCls : ['calendarpicker-kayak'],",
                    "    selectMode: 'SINGLE',",
                    "    backMonths: 0,",
                    "    forwardMonths: 12,",
                    "    autoCollapseMonthsPriorToMinSelDt: true,",
                    "    useIconsForExpCollapse: false,",
                    "    disablePastDates: true,",
                    "    holidayDtArr: holidayDtArr,",
                    "    returnItem: returnItem,",
                    "    selDtArr: selDts,",
                    "    disableDtArr: disableDts,",
                    "    singleExpand: true,",
                    "    defaultCollapseLevel: 1,",
                    "",
                    "    // Language overridable configs",
                    "    monthsToInsertPullText: (Ext.isEmpty(languageSelect.monthsToInsertPullText) ? 'Pull to Insert Months...' : languageSelect.monthsToInsertPullText),",
                    "    monthsToInsertRefreshText: (Ext.isEmpty(languageSelect.monthsToInsertRefreshText) ? 'Release to Insert Months...' : languageSelect.monthsToInsertRefreshText),",
                    "    monthsToInsertLastUpdatedText: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedText) ? 'Last Updated:&nbsp;' : languageSelect.monthsToInsertLastUpdatedText),",
                    "    monthsToInsertLastUpdatedDateFormat: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedDateFormat) ? 'm/d/Y h:iA' : languageSelect.monthsToInsertLastUpdatedDateFormat),",
                    "    monthsToInsertLoadedText: (Ext.isEmpty(languageSelect.monthsToInsertLoadedText) ? 'Loaded.' : languageSelect.monthsToInsertLoadedText),",
                    "    monthsToInsertLoadingText: (Ext.isEmpty(languageSelect.monthsToInsertLoadingText) ? 'Loading...' : languageSelect.monthsToInsertLoadingText),",
                    "    monthsToAppendText: (Ext.isEmpty(languageSelect.monthsToAppendText) ? 'Append more Months...' : languageSelect.monthsToAppendText),",
                    "    longDayFormat: (Ext.isEmpty(languageSelect.longDayFormat) ? 'F d, Y' : languageSelect.longDayFormat),",
                    "    monthYearFormat: (Ext.isEmpty(languageSelect.monthYearFormat) ? 'F Y' : languageSelect.monthYearFormat),",
                    "    startDay: (Ext.isEmpty(languageSelect.startDay) ? 0 : languageSelect.startDay),",
                    "    weekendIndexArr: (Ext.isEmpty(languageSelect.weekendIndexArr) ? [0,6] : languageSelect.weekendIndexArr),",
                    "",
                    "    height: '100%',",
                    "    width: '100%'",
                    "});",
                    "",
                    "var overPnl = this.getOverlayPanel();",
                    "overPnl.add(getDts);",
                    "overPnl.showBy(container);",
                    "",
                    "",
                    ""
                ],
                "name": "checkin"
            },
            "name": "onExample1CheckIn",
            "designerId": "1be63029-1922-4e86-b322-fd055459eca7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#calendar_checkin",
                "designer|params": [
                    "calendarpicker"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample1CheckInClosed",
                "implHandler": [
                    "var selDts = calendarpicker.getSelDtArr();\r",
                    "var lastSelDt = calendarpicker.getLastSelectedDate();\r",
                    "if (!Ext.isEmpty(lastSelDt)) {\r",
                    "    var returnItem=calendarpicker.getReturnItem();\r",
                    "    var day = Ext.Date.parse(lastSelDt, 'Y-m-d');\r",
                    "\r",
                    "    var day_html = returnItem.down('#checkin_day');\r",
                    "    day_html.setHtml(Ext.Date.format(day, 'j')); \r",
                    "    day_html.addCls('kayak-button-day');\r",
                    "    day_html.removeCls('kayak-button-select');\r",
                    "\r",
                    "    var other_html = returnItem.down('#checkin_dayname_month');\r",
                    "    other_html.setHtml(Ext.Date.format(day, 'D')+'<br>'+Ext.Date.format(day, 'M')); \r",
                    "\r",
                    "    returnItem.down('#checkin_btn').lastSelectedDate = lastSelDt;\r",
                    "\r",
                    "    // clear checkout date if new checkin date is changed to after it\r",
                    "    var out = returnItem.down('#checkout_btn');\r",
                    "\r",
                    "    if (out) {\r",
                    "        day_html = out.down('#checkout_day');        \r",
                    "        if (out.lastSelectedDate < lastSelDt) {   \r",
                    "            out.lastSelectedDate = '';\r",
                    "            day_html.setHtml('Select');\r",
                    "            day_html.addCls('kayak-button-select');\r",
                    "\r",
                    "            other_html = out.down('#checkout_dayname_month');\r",
                    "            other_html.setHtml(''); \r",
                    "        } else {\r",
                    "            if (!Ext.isEmpty(out.lastSelectedDate)) {\r",
                    "                //       day_html.removeCls('kayak-button-select');\r",
                    "            }\r",
                    "        }\r",
                    "    }\r",
                    "}\r",
                    "var overPnl = this.getOverlayPanel();\r",
                    "overPnl.removeAll(true, true);  // remove all items from DOM \r",
                    "overPnl.hide();\r",
                    "\r",
                    "\r",
                    "//console.log(Ext.data.StoreManager);\r",
                    ""
                ],
                "name": "calendarClosed"
            },
            "name": "onExample1CheckInClosed",
            "designerId": "cde8bb5e-db7a-4322-a0fb-63db896d4ad6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container",
                "designer|params": [
                    "container"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample1Checkout",
                "implHandler": [
                    "var languageSelect = this.getLanguageSelect();",
                    "",
                    "var returnItem = this.getDateexamples().down('#example1');",
                    "var lastSelDt = returnItem.down('#checkout_btn').lastSelectedDate;",
                    "",
                    "var back=0, fwd=12, selDts=(Ext.isEmpty(lastSelDt) ? [] : [lastSelDt]), disableDts=[];",
                    "var checkInDt = returnItem.down('#checkin_btn').lastSelectedDate;",
                    "if (!Ext.isEmpty(checkInDt)) {",
                    "    // disabled all dates on and prior to check in date (for that month)",
                    "    // and mark checkin date as selected",
                    "    selDts.push(checkInDt);",
                    "",
                    "    var inActDt = Ext.Date.parse(checkInDt, 'Y-m-d');",
                    "    var inFirstDt = Ext.Date.clearTime(Ext.Date.getFirstDateOfMonth(inActDt), true);",
                    "",
                    "    var today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);",
                    "    var currFirstDt = Ext.Date.clearTime(Ext.Date.getFirstDateOfMonth(today), true);",
                    "",
                    "    var modiff = Ext.Date.diff(currFirstDt, inFirstDt, Ext.Date.MONTH);",
                    "    back = -1*modiff;",
                    "",
                    "    var tmpDt = inActDt, tmpDt2;",
                    "    do {",
                    "        disableDts.push(Ext.Date.format(tmpDt, 'Y-m-d'));",
                    "",
                    "        tmpDt2 = Ext.Date.clone(tmpDt);",
                    "        tmpDt = Ext.Date.add(tmpDt, Ext.Date.DAY, -1);  // next day",
                    "        if (Ext.Date.format(tmpDt2, 'Y-m-d')===Ext.Date.format(tmpDt, 'Y-m-d')) {",
                    "            // Correct for day light savings changes were add() method only adds 23 hours",
                    "            tmpDt = Ext.Date.add(tmpDt, Ext.Date.DAY, -1);  // next day",
                    "        }",
                    "        Ext.Date.clearTime(tmpDt);",
                    "",
                    "    } while (tmpDt >= inFirstDt);",
                    "}",
                    "",
                    "var holidayDtArr = HOLIDAYS;",
                    "",
                    "var getDts = Ext.create('widget.calendarpicker', {",
                    "    //   xtype: 'calendarpicker',",
                    "    title : 'Choose Check Out',",
                    "    itemId : 'calendar_checkout',",
                    "    customCls : ['calendarpicker-kayak'],",
                    "    selectMode: 'SINGLE',",
                    "    backMonths: back,",
                    "    forwardMonths: fwd,",
                    "    useIconsForExpCollapse: false,",
                    "    disablePastDates: true,",
                    "    holidayDtArr: holidayDtArr,",
                    "    includeCustomFooterItems: false,",
                    "    returnItem: returnItem,",
                    "    selDtArr : selDts,",
                    "    disableDtArr: disableDts,",
                    "",
                    "    // Language overridable configs",
                    "    monthsToInsertPullText: (Ext.isEmpty(languageSelect.monthsToInsertPullText) ? 'Pull to Insert Months...' : languageSelect.monthsToInsertPullText),",
                    "    monthsToInsertRefreshText: (Ext.isEmpty(languageSelect.monthsToInsertRefreshText) ? 'Release to Insert Months...' : languageSelect.monthsToInsertRefreshText),",
                    "    monthsToInsertLastUpdatedText: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedText) ? 'Last Updated:&nbsp;' : languageSelect.monthsToInsertLastUpdatedText),",
                    "    monthsToInsertLastUpdatedDateFormat: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedDateFormat) ? 'm/d/Y h:iA' : languageSelect.monthsToInsertLastUpdatedDateFormat),",
                    "    monthsToInsertLoadedText: (Ext.isEmpty(languageSelect.monthsToInsertLoadedText) ? 'Loaded.' : languageSelect.monthsToInsertLoadedText),",
                    "    monthsToInsertLoadingText: (Ext.isEmpty(languageSelect.monthsToInsertLoadingText) ? 'Loading...' : languageSelect.monthsToInsertLoadingText),",
                    "    monthsToAppendText: (Ext.isEmpty(languageSelect.monthsToAppendText) ? 'Append more Months...' : languageSelect.monthsToAppendText),",
                    "    longDayFormat: (Ext.isEmpty(languageSelect.longDayFormat) ? 'F d, Y' : languageSelect.longDayFormat),",
                    "    monthYearFormat: (Ext.isEmpty(languageSelect.monthYearFormat) ? 'F Y' : languageSelect.monthYearFormat),",
                    "    startDay: (Ext.isEmpty(languageSelect.startDay) ? 0 : languageSelect.startDay),",
                    "    weekendIndexArr: (Ext.isEmpty(languageSelect.weekendIndexArr) ? [0,6] : languageSelect.weekendIndexArr),",
                    "",
                    "    height: '100%',",
                    "    width: '100%'",
                    "});",
                    "",
                    "var overPnl = this.getOverlayPanel();",
                    "overPnl.add(getDts);",
                    "",
                    "",
                    "overPnl.showBy(container);",
                    "",
                    ""
                ],
                "name": "checkout"
            },
            "name": "onExample1Checkout",
            "designerId": "9008135b-30fb-470d-a282-f2364a613740"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "overlayPanel",
                "selector": "overlayPanel",
                "xtype": "overlayPanel"
            },
            "name": "overlayPanel",
            "designerId": "61097911-17de-46af-afb7-4fb60dbc0782"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#calendar_checkout",
                "designer|params": [
                    "calendarpicker"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample1CheckOutClosed",
                "implHandler": [
                    "var selDts = calendarpicker.getSelDtArr();\r",
                    "var lastSelDt = calendarpicker.getLastSelectedDate();\r",
                    "if (!Ext.isEmpty(lastSelDt)) {\r",
                    "    var returnItem=calendarpicker.getReturnItem();\r",
                    "    var day = Ext.Date.parse(lastSelDt, 'Y-m-d');\r",
                    "\r",
                    "    var day_html = returnItem.down('#checkout_day');\r",
                    "    day_html.setHtml(Ext.Date.format(day, 'j')); \r",
                    "    day_html.addCls('kayak-button-day');\r",
                    "    day_html.removeCls('kayak-button-select');    \r",
                    "\r",
                    "    var other_html = returnItem.down('#checkout_dayname_month');\r",
                    "    other_html.setHtml(Ext.Date.format(day, 'D')+'<br>'+Ext.Date.format(day, 'M')); \r",
                    "\r",
                    "    returnItem.down('#checkout_btn').lastSelectedDate = lastSelDt;\r",
                    "}\r",
                    "\r",
                    "var overPnl = this.getOverlayPanel();\r",
                    "overPnl.removeAll(true, true);  // remove all items from DOM \r",
                    "overPnl.hide();"
                ],
                "name": "calendarClosed"
            },
            "name": "onExample1CheckOutClosed",
            "designerId": "bf832732-d38d-4d68-8cbe-c2fad202242f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container",
                "designer|params": [
                    "container"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample2Checkin",
                "implHandler": [
                    "var languageSelect = this.getLanguageSelect();",
                    "",
                    "var returnItem = this.getDateexamples().down('#example2');",
                    "var selDtArr = returnItem.down('#checkin_btn2').selDtArr;",
                    "",
                    "var selDts=(Ext.isEmpty(selDtArr) ? [] : selDtArr), disableDts=[];",
                    "",
                    "var holidayDtArr = HOLIDAYS;",
                    "",
                    "var getDts = Ext.create('widget.calendarpicker', {",
                    "    //     xtype: 'calendarpicker',",
                    "    title : 'Check In / Check Out',",
                    "    itemId : 'calendar_checkin2',",
                    "    customCls : ['calendarpicker-kayak'],",
                    "    selectMode: 'RANGE',",
                    "    backMonths: 0,",
                    "    forwardMonths: 12,",
                    "    autoCollapseMonthsPriorToMinSelDt: true,",
                    "    useIconsForExpCollapse: true,",
                    "    disablePastDates: true,",
                    "    holidayDtArr: holidayDtArr,",
                    "    includeCustomFooterItems: true,",
                    "    returnItem: returnItem,",
                    "    defaultCollapseLevel: 99,",
                    "    selDtArr: selDts,",
                    "    disableDtArr: disableDts,",
                    "    height: '100%',",
                    "    width: '100%',",
                    "",
                    "    // Language overridable configs",
                    "    monthsToInsertPullText: (Ext.isEmpty(languageSelect.monthsToInsertPullText) ? 'Pull to Insert Months...' : languageSelect.monthsToInsertPullText),",
                    "    monthsToInsertRefreshText: (Ext.isEmpty(languageSelect.monthsToInsertRefreshText) ? 'Release to Insert Months...' : languageSelect.monthsToInsertRefreshText),",
                    "    monthsToInsertLastUpdatedText: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedText) ? 'Last Updated:&nbsp;' : languageSelect.monthsToInsertLastUpdatedText),",
                    "    monthsToInsertLastUpdatedDateFormat: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedDateFormat) ? 'm/d/Y h:iA' : languageSelect.monthsToInsertLastUpdatedDateFormat),",
                    "    monthsToInsertLoadedText: (Ext.isEmpty(languageSelect.monthsToInsertLoadedText) ? 'Loaded.' : languageSelect.monthsToInsertLoadedText),",
                    "    monthsToInsertLoadingText: (Ext.isEmpty(languageSelect.monthsToInsertLoadingText) ? 'Loading...' : languageSelect.monthsToInsertLoadingText),",
                    "    monthsToAppendText: (Ext.isEmpty(languageSelect.monthsToAppendText) ? 'Append more Months...' : languageSelect.monthsToAppendText),",
                    "    longDayFormat: (Ext.isEmpty(languageSelect.longDayFormat) ? 'F d, Y' : languageSelect.longDayFormat),",
                    "    monthYearFormat: (Ext.isEmpty(languageSelect.monthYearFormat) ? 'F Y' : languageSelect.monthYearFormat),",
                    "    startDay: (Ext.isEmpty(languageSelect.startDay) ? 0 : languageSelect.startDay),",
                    "    weekendIndexArr: (Ext.isEmpty(languageSelect.weekendIndexArr) ? [0,6] : languageSelect.weekendIndexArr),",
                    "",
                    "    footerBtnTextOverrides: (Ext.isEmpty(languageSelect.footerBtnTextOverrides) ? {} : languageSelect.footerBtnTextOverrides)",
                    "",
                    "});",
                    "",
                    "var overPnl = this.getOverlayPanel();",
                    "overPnl.add(getDts);",
                    "",
                    "overPnl.showBy(container);",
                    "",
                    ""
                ],
                "name": "checkin2"
            },
            "name": "onExample2Checkin",
            "designerId": "c0dd0cb6-1546-4ce0-b8bf-a04fc87bf548"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#calendar_checkin2",
                "designer|params": [
                    "calendarpicker"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample2CheckinClosed",
                "implHandler": [
                    "var returnItem=calendarpicker.getReturnItem();\r",
                    "var day_html = returnItem.down('#checkin_day2');\r",
                    "var other_html = returnItem.down('#checkin_dayname_month2');\r",
                    "var day_html2 = returnItem.down('#checkout_day2');\r",
                    "var other_html2 = returnItem.down('#checkout_dayname_month2');\r",
                    "\r",
                    "var selDts = calendarpicker.getSelDtArr();\r",
                    "returnItem.down('#checkin_btn2').selDtArr = selDts;\r",
                    "\r",
                    "day_html.removeCls('kayak-button-select');  \r",
                    "day_html2.removeCls('kayak-button-select');\r",
                    "\r",
                    "if (Ext.isEmpty(selDts)) {\r",
                    "    day_html.setHtml('Select');\r",
                    "    day_html2.setHtml('Select');\r",
                    "    other_html.setHtml(''); \r",
                    "    other_html2.setHtml(''); \r",
                    "    day_html.addCls('kayak-button-select');  // show select button\r",
                    "    day_html2.addCls('kayak-button-select');\r",
                    "} else {       \r",
                    "    var maxDt = Ext.Array.max(selDts);\r",
                    "    var minDt = Ext.Array.min(selDts);   \r",
                    "\r",
                    "    var minDay = Ext.Date.parse(minDt, 'Y-m-d');\r",
                    "    var maxDay = Ext.Date.parse(maxDt, 'Y-m-d');\r",
                    "\r",
                    "\r",
                    "    day_html.setHtml(Ext.Date.format(minDay, 'j')); \r",
                    "    day_html2.setHtml(Ext.Date.format(maxDay, 'j')); \r",
                    "\r",
                    "    day_html.addCls('kayak-button-day');\r",
                    "    day_html2.addCls('kayak-button-day');\r",
                    "\r",
                    "\r",
                    "    other_html.setHtml(Ext.Date.format(minDay, 'D')+'<br>'+Ext.Date.format(minDay, 'M')); \r",
                    "    other_html2.setHtml(Ext.Date.format(maxDay, 'D')+'<br>'+Ext.Date.format(maxDay, 'M'));     \r",
                    "}    \r",
                    "\r",
                    "var overPnl = this.getOverlayPanel();\r",
                    "overPnl.removeAll(true, true);  // remove all items from DOM \r",
                    "overPnl.hide();"
                ],
                "name": "calendarClosed"
            },
            "name": "onExample2CheckinClosed",
            "designerId": "8f630be5-4829-4fb6-90b3-ac975e9509ba"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "languageSelect",
                "selector": "#languageSelect"
            },
            "name": "languageSelect",
            "designerId": "7edce19c-0293-4f10-bb7c-6f227517660b"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "dateexamples",
                "selector": "dateexamples",
                "xtype": "dateexamples"
            },
            "name": "dateexamples",
            "designerId": "d7978cb8-6f21-443f-b991-5dbb35b78798"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container",
                "designer|params": [
                    "container"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample2BCheckin",
                "implHandler": [
                    "var languageSelect = this.getLanguageSelect();",
                    "",
                    "var returnItem = this.getDateexamples().down('#example2B');",
                    "var selDtArr = returnItem.down('#checkin_btn2B').selDtArr;",
                    "var backMonths = (Ext.isEmpty(returnItem.backMonths) ? 0 : returnItem.backMonths);",
                    "var forwardMonths = (Ext.isEmpty(returnItem.forwardMonths) ? 12 : returnItem.forwardMonths);",
                    "",
                    "",
                    "var selDts=(Ext.isEmpty(selDtArr) ? [] : selDtArr), disableDts=[];",
                    "",
                    "var holidayDtArr = HOLIDAYS;",
                    "",
                    "var getDts = Ext.create('widget.calendarpicker', {",
                    "    //     xtype: 'calendarpicker',",
                    "    title : 'Check In / Check Out',",
                    "    itemId : 'calendar_checkin2B',",
                    "    customCls : ['calendarpicker-ios'],",
                    "    selectMode: 'RANGE',",
                    "    backMonths: backMonths,",
                    "    forwardMonths: forwardMonths,",
                    "    itemHeight: 16,   // Set minimum value for weedday names row ... use css for other heights",
                    "    variableHeights: true,",
                    "    autoCollapseMonthsPriorToMinSelDt: true,",
                    "    autoExpandMonthsWithSelDates: true,",
                    "    useIconsForExpCollapse: true,",
                    "    disablePastDates: true,",
                    "    holidayDtArr: holidayDtArr,",
                    "    includeCustomFooterItems: true,",
                    "    returnItem: returnItem,",
                    "    defaultCollapseLevel: 0,",
                    "    selDtArr: selDts,",
                    "    disableDtArr: disableDts,",
                    "    height: '100%',",
                    "    width: '100%',",
                    "    allowMonthAdditions: true,",
                    "    monthsToAppend: 3,",
                    "    monthsToInsert: 0,",
                    "",
                    "    // Language overridable configs",
                    "    monthsToInsertPullText: (Ext.isEmpty(languageSelect.monthsToInsertPullText) ? 'Pull to Insert Months...' : languageSelect.monthsToInsertPullText),",
                    "    monthsToInsertRefreshText: (Ext.isEmpty(languageSelect.monthsToInsertRefreshText) ? 'Release to Insert Months...' : languageSelect.monthsToInsertRefreshText),",
                    "    monthsToInsertLastUpdatedText: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedText) ? 'Last Updated:&nbsp;' : languageSelect.monthsToInsertLastUpdatedText),",
                    "    monthsToInsertLastUpdatedDateFormat: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedDateFormat) ? 'm/d/Y h:iA' : languageSelect.monthsToInsertLastUpdatedDateFormat),",
                    "    monthsToInsertLoadedText: (Ext.isEmpty(languageSelect.monthsToInsertLoadedText) ? 'Loaded.' : languageSelect.monthsToInsertLoadedText),",
                    "    monthsToInsertLoadingText: (Ext.isEmpty(languageSelect.monthsToInsertLoadingText) ? 'Loading...' : languageSelect.monthsToInsertLoadingText),",
                    "    monthsToAppendText: (Ext.isEmpty(languageSelect.monthsToAppendText) ? 'Append more Months...' : languageSelect.monthsToAppendText),",
                    "    longDayFormat: (Ext.isEmpty(languageSelect.longDayFormat) ? 'F d, Y' : languageSelect.longDayFormat),",
                    "    monthYearFormat: (Ext.isEmpty(languageSelect.monthYearFormat) ? 'F Y' : languageSelect.monthYearFormat),",
                    "    startDay: (Ext.isEmpty(languageSelect.startDay) ? 0 : languageSelect.startDay),",
                    "    weekendIndexArr: (Ext.isEmpty(languageSelect.weekendIndexArr) ? [0,6] : languageSelect.weekendIndexArr),",
                    "",
                    "    footerBtnTextOverrides: (Ext.isEmpty(languageSelect.footerBtnTextOverrides) ? {} : languageSelect.footerBtnTextOverrides)",
                    "",
                    "});",
                    "",
                    "var overPnl = this.getOverlayPanel();",
                    "overPnl.setMaxWidth('17em');  // Prevent resizing for Phone landscape since we want square boxes",
                    "overPnl.setModal({ transparent: true });  // Keep background transaparent instead of gray since IOS calendar is already gray",
                    "overPnl.add(getDts);",
                    "",
                    "overPnl.showBy(container);",
                    "",
                    "",
                    "",
                    ""
                ],
                "name": "checkin2B"
            },
            "name": "onExample2BCheckin",
            "designerId": "b0c4272c-57e2-4ee4-b81d-3816c47a8f4c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#calendar_checkin2B",
                "designer|params": [
                    "calendarpicker"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample2BCheckinClosed",
                "implHandler": [
                    "var returnItem=calendarpicker.getReturnItem();\r",
                    "\r",
                    "// Save any updates to backMonths or forwardMonths\r",
                    "returnItem.backMonths = calendarpicker.getBackMonths();\r",
                    "returnItem.forwardMonths = calendarpicker.getForwardMonths();\r",
                    "\r",
                    "var day_html = returnItem.down('#checkin_day2B');\r",
                    "var other_html = returnItem.down('#checkin_dayname_month2B');\r",
                    "var day_html2 = returnItem.down('#checkout_day2B');\r",
                    "var other_html2 = returnItem.down('#checkout_dayname_month2B');\r",
                    "\r",
                    "var selDts = calendarpicker.getSelDtArr();\r",
                    "returnItem.down('#checkin_btn2B').selDtArr = selDts;\r",
                    "\r",
                    "day_html.removeCls('kayak-button-select');  \r",
                    "day_html2.removeCls('kayak-button-select');\r",
                    "\r",
                    "if (Ext.isEmpty(selDts)) {\r",
                    "    day_html.setHtml('Select');\r",
                    "    day_html2.setHtml('Select');\r",
                    "    other_html.setHtml(''); \r",
                    "    other_html2.setHtml(''); \r",
                    "    day_html.addCls('kayak-button-select');  // show select button\r",
                    "    day_html2.addCls('kayak-button-select');\r",
                    "} else {       \r",
                    "    var maxDt = Ext.Array.max(selDts);\r",
                    "    var minDt = Ext.Array.min(selDts);   \r",
                    "\r",
                    "    var minDay = Ext.Date.parse(minDt, 'Y-m-d');\r",
                    "    var maxDay = Ext.Date.parse(maxDt, 'Y-m-d');\r",
                    "\r",
                    "\r",
                    "    day_html.setHtml(Ext.Date.format(minDay, 'j')); \r",
                    "    day_html2.setHtml(Ext.Date.format(maxDay, 'j')); \r",
                    "\r",
                    "    day_html.addCls('kayak-button-day');\r",
                    "    day_html2.addCls('kayak-button-day');\r",
                    "\r",
                    "\r",
                    "    other_html.setHtml(Ext.Date.format(minDay, 'D')+'<br>'+Ext.Date.format(minDay, 'M')); \r",
                    "    other_html2.setHtml(Ext.Date.format(maxDay, 'D')+'<br>'+Ext.Date.format(maxDay, 'M'));     \r",
                    "}    \r",
                    "\r",
                    "var overPnl = this.getOverlayPanel();\r",
                    "overPnl.removeAll(true, true);  // remove all items from DOM \r",
                    "overPnl.setModal({ transparent: false });  // Reset transparancy for next use\r",
                    "overPnl.setMaxWidth((Ext.os.is.Phone) ? '' : '17em');  // reset since changed for this example\r",
                    "overPnl.hide();"
                ],
                "name": "calendarClosed"
            },
            "name": "onExample2BCheckinClosed",
            "designerId": "bcddea2c-b887-4b2c-8c93-6d27f60c67ad"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "textfield#sel_date",
                "designer|params": [
                    "textfield"
                ],
                "designer|targetType": "Ext.field.Text",
                "fn": "onExample2C_Textfield",
                "implHandler": [
                    "var languageSelect = this.getLanguageSelect();",
                    "",
                    "var returnItem = this.getDateexamples().down('#sel_date');",
                    "var lastSelDt = returnItem.lastSelectedDate;",
                    "var backMonths = (Ext.isEmpty(returnItem.backMonths) ? 3 : returnItem.backMonths);",
                    "var forwardMonths = (Ext.isEmpty(returnItem.forwardMonths) ? 0 : returnItem.forwardMonths);",
                    "",
                    "var selDts=(Ext.isEmpty(lastSelDt) ? [] : [lastSelDt]), disableDts=[];",
                    "",
                    "// Add CLEAR button to allow user to remove date (later figure out how to leverage clearIcon on textfield)",
                    "myCustomBtns = {",
                    "    xtype: 'segmentedbutton',",
                    "    itemId : 'pickerfooterbtns',",
                    "    docked : 'right',",
                    "    items: [",
                    "    {",
                    "        xtype: 'button',",
                    "        text: 'CLEAR',",
                    "        iconCls: '',",
                    "        cls: 'pickerfooterbtns',",
                    "        listeners : {",
                    "            tap: function (button, e, options) {",
                    "                this.up('calendarpicker').customBtns('CLEAR');    // Clear data",
                    "                this.up('calendarpicker').customBtns('DONE');     // Then fire event to close calendar",
                    "            }",
                    "        }",
                    "    },",
                    "    {",
                    "        xtype: 'button',",
                    "        text: 'Cancel',",
                    "        iconCls: '',",
                    "        cls: 'pickerfooterbtns',",
                    "        listeners : {",
                    "            tap: function (button, e, options) {",
                    "                this.up('calendarpicker').customBtns('CANCEL');    // Clear data",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "]};",
                    "",
                    "var holidayDtArr = HOLIDAYS;",
                    "",
                    "var getDts = Ext.create('widget.calendarpicker', {",
                    "    title : 'Select As-Of Date',",
                    "    itemId : 'calendar_sel_date',",
                    "    customCls : ['calendarpicker-ios'],",
                    "    selectMode: 'SINGLE',",
                    "    backMonths: backMonths,",
                    "    forwardMonths: forwardMonths,",
                    "    disableFutureDates: true,",
                    "    itemHeight: 16,   // Set minimum value for weekday names row ... use css for other heights",
                    "    variableHeights: true,",
                    "    autoCollapseMonthsPriorToMinSelDt: true,",
                    "    expandCurrentMonth: Ext.isEmpty(selDts),",
                    "    useIconsForExpCollapse: false,",
                    "    holidayDtArr: holidayDtArr,",
                    "    returnItem: returnItem,",
                    "    selDtArr: selDts,",
                    "    disableDtArr: disableDts,",
                    "    singleExpand: true,",
                    "    defaultCollapseLevel: 1,",
                    "    includeCustomFooterItems: true,",
                    "    customFooterItems: myCustomBtns,",
                    "    height: '100%',",
                    "    width: '100%',",
                    "    allowMonthAdditions: true,",
                    "    alwaysScrollToTop: true,  // override default behaviour where picker will scroll to pre-selected month",
                    "",
                    "    // Language overridable configs",
                    "    monthsToInsertPullText: (Ext.isEmpty(languageSelect.monthsToInsertPullText) ? 'Pull to Insert Months...' : languageSelect.monthsToInsertPullText),",
                    "    monthsToInsertRefreshText: (Ext.isEmpty(languageSelect.monthsToInsertRefreshText) ? 'Release to Insert Months...' : languageSelect.monthsToInsertRefreshText),",
                    "    monthsToInsertLastUpdatedText: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedText) ? 'Last Updated:&nbsp;' : languageSelect.monthsToInsertLastUpdatedText),",
                    "    monthsToInsertLastUpdatedDateFormat: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedDateFormat) ? 'm/d/Y h:iA' : languageSelect.monthsToInsertLastUpdatedDateFormat),",
                    "    monthsToInsertLoadedText: (Ext.isEmpty(languageSelect.monthsToInsertLoadedText) ? 'Loaded.' : languageSelect.monthsToInsertLoadedText),",
                    "    monthsToInsertLoadingText: (Ext.isEmpty(languageSelect.monthsToInsertLoadingText) ? 'Loading...' : languageSelect.monthsToInsertLoadingText),",
                    "    monthsToAppendText: (Ext.isEmpty(languageSelect.monthsToAppendText) ? 'Append more Months...' : languageSelect.monthsToAppendText),",
                    "    longDayFormat: (Ext.isEmpty(languageSelect.longDayFormat) ? 'F d, Y' : languageSelect.longDayFormat),",
                    "    monthYearFormat: (Ext.isEmpty(languageSelect.monthYearFormat) ? 'F Y' : languageSelect.monthYearFormat),",
                    "    startDay: (Ext.isEmpty(languageSelect.startDay) ? 0 : languageSelect.startDay),",
                    "    weekendIndexArr: (Ext.isEmpty(languageSelect.weekendIndexArr) ? [0,6] : languageSelect.weekendIndexArr),",
                    "",
                    "    monthsToAppend: 0,",
                    "    monthsToInsert: 3",
                    "});",
                    "getDts.setLastSelectedDate(lastSelDt);  // Needed for single select where user can cancel after navigating back",
                    "",
                    "var overPnl = this.getOverlayPanel();",
                    "overPnl.setModal({ transparent: true });  // Keep background transaparent instead of gray since IOS calendar is already gray",
                    "overPnl.add(getDts);",
                    "overPnl.showBy(textfield);",
                    ""
                ],
                "name": "sel_date"
            },
            "name": "onExample2C_Textfield",
            "designerId": "f79f9308-d22b-421d-9611-f42630d0b7b3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#calendar_sel_date",
                "designer|params": [
                    "calendarpicker"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample2C_TextfieldClosed",
                "implHandler": [
                    "var returnItem=calendarpicker.getReturnItem();\r",
                    "var selDts = calendarpicker.getSelDtArr();\r",
                    "var lastSelDt = calendarpicker.getLastSelectedDate();\r",
                    "returnItem.lastSelectedDate = lastSelDt;  // Needed for single select where user can cancel after navigating back\r",
                    "\r",
                    "// Save any updates to backMonths or forwardMonths\r",
                    "returnItem.backMonths = calendarpicker.getBackMonths();\r",
                    "returnItem.forwardMonths = calendarpicker.getForwardMonths();\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "if (!Ext.isEmpty(lastSelDt)) {\r",
                    "    var day = Ext.Date.parse(lastSelDt, 'Y-m-d');\r",
                    "    returnItem.setValue(Ext.Date.format(day, 'm/d/Y'));\r",
                    "    returnItem.lastSelectedDate = lastSelDt;\r",
                    "} else {\r",
                    "    returnItem.setValue('');\r",
                    "    returnItem.lastSelectedDate = '';\r",
                    "}\r",
                    "\r",
                    "var overPnl = this.getOverlayPanel();\r",
                    "overPnl.setModal({ transparent: false });  // Reset transparancy for next use\r",
                    "overPnl.removeAll(true, true);  // remove all items from DOM \r",
                    "overPnl.hide();"
                ],
                "name": "calendarClosed"
            },
            "name": "onExample2C_TextfieldClosed",
            "designerId": "5884afa3-7b23-453b-8a08-e676e6a2364e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container",
                "designer|params": [
                    "container"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample3_Multisel",
                "implHandler": [
                    "var languageSelect = this.getLanguageSelect();",
                    "",
                    "var returnItem = this.getDateexamples().down('#example3');",
                    "var selDtArr = returnItem.down('#multisel_btn').selDtArr;",
                    "var initDtArr = [];",
                    "",
                    "var selDts=(Ext.isEmpty(selDtArr) ? initDtArr : selDtArr), disableDts=[];",
                    "",
                    "var holidayDtArr = HOLIDAYS;",
                    "",
                    "var getDts = Ext.create('widget.calendarpicker', {",
                    "    //     xtype: 'calendarpicker',",
                    "    title : 'Select Multiple Dates',",
                    "    itemId : 'calendar_multi',",
                    "    customCls : ['calendarpicker-kayak'],",
                    "    selectMode: 'MULTI',",
                    "    backMonths: 3,",
                    "    forwardMonths: 6,",
                    "    autoCollapseMonthsPriorToMinSelDt: true,",
                    "    useIconsForExpCollapse: true,",
                    "    disablePastDates: false,",
                    "    disableWeekends: true,",
                    "    disableHolidays: true,",
                    "    holidayDtArr: holidayDtArr,",
                    "    includeCustomFooterItems: true,",
                    "    returnItem: returnItem,",
                    "    defaultCollapseLevel: 1,",
                    "    selDtArr: selDts,",
                    "    disableDtArr: disableDts,",
                    "    height: '100%',",
                    "    width: '100%',",
                    "",
                    "    // Language overridable configs",
                    "    monthsToInsertPullText: (Ext.isEmpty(languageSelect.monthsToInsertPullText) ? 'Pull to Insert Months...' : languageSelect.monthsToInsertPullText),",
                    "    monthsToInsertRefreshText: (Ext.isEmpty(languageSelect.monthsToInsertRefreshText) ? 'Release to Insert Months...' : languageSelect.monthsToInsertRefreshText),",
                    "    monthsToInsertLastUpdatedText: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedText) ? 'Last Updated:&nbsp;' : languageSelect.monthsToInsertLastUpdatedText),",
                    "    monthsToInsertLastUpdatedDateFormat: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedDateFormat) ? 'm/d/Y h:iA' : languageSelect.monthsToInsertLastUpdatedDateFormat),",
                    "    monthsToInsertLoadedText: (Ext.isEmpty(languageSelect.monthsToInsertLoadedText) ? 'Loaded.' : languageSelect.monthsToInsertLoadedText),",
                    "    monthsToInsertLoadingText: (Ext.isEmpty(languageSelect.monthsToInsertLoadingText) ? 'Loading...' : languageSelect.monthsToInsertLoadingText),",
                    "    monthsToAppendText: (Ext.isEmpty(languageSelect.monthsToAppendText) ? 'Append more Months...' : languageSelect.monthsToAppendText),",
                    "    longDayFormat: (Ext.isEmpty(languageSelect.longDayFormat) ? 'F d, Y' : languageSelect.longDayFormat),",
                    "    monthYearFormat: (Ext.isEmpty(languageSelect.monthYearFormat) ? 'F Y' : languageSelect.monthYearFormat),",
                    "    startDay: (Ext.isEmpty(languageSelect.startDay) ? 0 : languageSelect.startDay),",
                    "    weekendIndexArr: (Ext.isEmpty(languageSelect.weekendIndexArr) ? [0,6] : languageSelect.weekendIndexArr),",
                    "",
                    "    footerBtnTextOverrides: (Ext.isEmpty(languageSelect.footerBtnTextOverrides) ? {} : languageSelect.footerBtnTextOverrides)",
                    "",
                    "});",
                    "",
                    "var overPnl = this.getOverlayPanel();",
                    "overPnl.add(getDts);",
                    "",
                    "overPnl.showBy(container);",
                    ""
                ],
                "name": "multisel_btn"
            },
            "name": "onExample3_Multisel",
            "designerId": "0dda2bc8-b49c-4f20-9650-a262aab85a65"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#calendar_multi",
                "designer|params": [
                    "calendarpicker"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample3_MultiselClosed",
                "implHandler": [
                    "var returnItem=calendarpicker.getReturnItem();\r",
                    "var multi_html = returnItem.down('#multisel_dates_html');\r",
                    "\r",
                    "var selDts = calendarpicker.getSelDtArr();\r",
                    "returnItem.down('#multisel_btn').selDtArr = selDts;\r",
                    "\r",
                    "// sort array, build string and update html\r",
                    "selDts.sort();\r",
                    "multi_html.setHtml(selDts.join(', '));\r",
                    "\r",
                    "var overPnl = this.getOverlayPanel();\r",
                    "overPnl.removeAll(true, true);  // remove all items from DOM \r",
                    "overPnl.hide();"
                ],
                "name": "calendarClosed"
            },
            "name": "onExample3_MultiselClosed",
            "designerId": "873cee76-f88d-45db-95e6-4d7f04652663"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container",
                "designer|params": [
                    "container"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample5_December",
                "implHandler": [
                    "var languageSelect = this.getLanguageSelect();\r",
                    "\r",
                    "var returnItem = this.getDateexamples().down('#example5');\r",
                    "\r",
                    "var myCategImg = '<img src=\"./resources/images/ribbon.png\" class=\"christmas-categ-img\">';\r",
                    "\r",
                    "var myCustomBtns = [ \r",
                    "{\r",
                    "    xtype: 'img',\r",
                    "    src: './resources/images/holly.png',\r",
                    "    cls: 'christmas-img'\r",
                    "},     \r",
                    "{\r",
                    "    xtype: 'label',\r",
                    "    html: 'Christmas Calendars',\r",
                    "    cls: 'christmas-label'\r",
                    "}, \r",
                    "{    \r",
                    "    xtype: 'segmentedbutton',\r",
                    "    itemId : 'pickerfooterbtns',\r",
                    "    docked : 'right',\r",
                    "    items: [\r",
                    "    {\r",
                    "        xtype: 'button',\r",
                    "        text: 'RETURN',\r",
                    "        iconCls: '',\r",
                    "        cls: 'pickerfooterbtns',\r",
                    "        listeners : {\r",
                    "            tap: function (button, e, options) {\r",
                    "                this.up('calendarpicker').customBtns('CANCEL');\r",
                    "            }\r",
                    "        }\r",
                    "    }\r",
                    "]}\r",
                    "];\r",
                    "\r",
                    "\r",
                    "var myRend = {renderer_month: function (values)\r",
                    "    {return myCategImg+values.month + ' ' + values.year+myCategImg;},\r",
                    "    renderer_dates: function (fldName, values) {\r",
                    "        var elem=values[fldName];\r",
                    "        var hol = values['isHoliday_'+fldName];\r",
                    "        if (hol) {\r",
                    "            elem = '<img src=\"./resources/images/christmas_tree.png\" >';\r",
                    "        }\r",
                    "    return elem;},             \r",
                    "    cls_renderer_dates: function (fldName, values)\r",
                    "    {var cls=\"\", dt, sel, hol, dis, par = this.scope.parent;\r",
                    "        dt = values['dt_'+fldName];\r",
                    "        hol = values['isHoliday_'+fldName];\r",
                    "        dis = values['isDisabled_'+fldName];\r",
                    "\r",
                    "        if (values.rowType === 'H') {}  // do nothing for header rows\r",
                    "        else if (Ext.isEmpty(dt)) {} // do nothing for empty dates\r",
                    "\r",
                    "        else if (hol) {\r",
                    "        return 'calendar-tree'; }     \r",
                    "        else {\r",
                    "            sel = (par.getSelDtArr().indexOf(Ext.Date.format(dt, 'Y-m-d'))>-1);      \r",
                    "            if (par.getWeekendIndexArr().indexOf(parseInt(Ext.Date.format(dt, 'w'))) !== -1) {    \r",
                    "                cls = cls+' calendarpicker-weekend';\r",
                    "            }   \r",
                    "            if (hol){cls = cls+' calendarpicker-holiday';}\r",
                    "            if (!Ext.isEmpty(this.scope.todayDt)){\r",
                    "                if (this.scope.todayDt === Ext.Date.format(dt, 'Y-m-d')) {\r",
                    "                    cls = cls+' calendarpicker-today';\r",
                    "                }\r",
                    "            }     \r",
                    "            if (dis){cls = cls+' calendarpicker-disabled';}\r",
                    "            if (sel){cls = cls+' calendarpicker-selected';}\r",
                    "        }\r",
                    "\r",
                    "        return (\"calendarpicker-days\" + cls);\r",
                    "    }};\r",
                    "\r",
                    "    var myFilt = {\r",
                    "        enabled: true,\r",
                    "        displayNodesWithAllMembersFilteredAsLeafs: true,\r",
                    "        filterFn: function(rowObj) {return (rowObj.month === Ext.Date.monthNames[11]);}   // 'December'\r",
                    "    };\r",
                    "\r",
                    "    var holidayDtArr = ['2013-12-25', '2014-12-25', '2015-12-25', '2016-12-26', '2017-12-25', '2018-12-25', '2019-12-25', '2020-12-25', '2021-12-24', '2022-12-26', '2023-12-25', '2024-12-25', '2025-12-25', '2026-12-25', '2027-12-25'];\r",
                    "\r",
                    "    var getDts = Ext.create('widget.calendarpicker', {\r",
                    "        //     xtype: 'calendarpicker',\r",
                    "        title : 'Christmas Calendars',\r",
                    "        itemId : 'calendar_filter',\r",
                    "        customCls : ['calendarpicker-christmas'],\r",
                    "        selectMode: 'NONE',\r",
                    "        backMonths: 0,\r",
                    "        forwardMonths: 144,\r",
                    "        useIconsForExpCollapse: false,\r",
                    "        holidayDtArr: holidayDtArr,\r",
                    "        includeCustomFooterItems: true,\r",
                    "        returnItem: returnItem,\r",
                    "        defaultCollapseLevel: 99,\r",
                    "        height: '100%',\r",
                    "        width: '100%',\r",
                    "        customFooterItems: myCustomBtns,\r",
                    "        footerDock: 'top',\r",
                    "        hideExpandCollapseBtns: true,\r",
                    "        disableExpandCollapse: true,\r",
                    "        hideTitleBar: true,\r",
                    "        filter: myFilt,\r",
                    "        \r",
                    "        // Language overridable configs\r",
                    "        monthsToInsertPullText: (Ext.isEmpty(languageSelect.monthsToInsertPullText) ? 'Pull to Insert Months...' : languageSelect.monthsToInsertPullText),\r",
                    "        monthsToInsertRefreshText: (Ext.isEmpty(languageSelect.monthsToInsertRefreshText) ? 'Release to Insert Months...' : languageSelect.monthsToInsertRefreshText),\r",
                    "        monthsToInsertLastUpdatedText: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedText) ? 'Last Updated:&nbsp;' : languageSelect.monthsToInsertLastUpdatedText),\r",
                    "        monthsToInsertLastUpdatedDateFormat: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedDateFormat) ? 'm/d/Y h:iA' : languageSelect.monthsToInsertLastUpdatedDateFormat),\r",
                    "        monthsToInsertLoadedText: (Ext.isEmpty(languageSelect.monthsToInsertLoadedText) ? 'Loaded.' : languageSelect.monthsToInsertLoadedText),\r",
                    "        monthsToInsertLoadingText: (Ext.isEmpty(languageSelect.monthsToInsertLoadingText) ? 'Loading...' : languageSelect.monthsToInsertLoadingText),\r",
                    "        monthsToAppendText: (Ext.isEmpty(languageSelect.monthsToAppendText) ? 'Append more Months...' : languageSelect.monthsToAppendText),\r",
                    "        longDayFormat: (Ext.isEmpty(languageSelect.longDayFormat) ? 'F d, Y' : languageSelect.longDayFormat),\r",
                    "        monthYearFormat: (Ext.isEmpty(languageSelect.monthYearFormat) ? 'F Y' : languageSelect.monthYearFormat),\r",
                    "        startDay: (Ext.isEmpty(languageSelect.startDay) ? 0 : languageSelect.startDay),\r",
                    "        weekendIndexArr: (Ext.isEmpty(languageSelect.weekendIndexArr) ? [0,6] : languageSelect.weekendIndexArr),\r",
                    "    \r",
                    "        renderers: myRend\r",
                    "\r",
                    "    });\r",
                    "\r",
                    "    var overPnl = this.getOverlayPanel();\r",
                    "    overPnl.add(getDts);\r",
                    "\r",
                    "    overPnl.showBy(container);"
                ],
                "name": "filter_btn"
            },
            "name": "onExample5_December",
            "designerId": "46f04858-097a-41fc-88c1-933279f28e0e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#calendar_filter",
                "designer|params": [
                    "calendarpicker"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample5_DecemberClosed",
                "implHandler": [
                    "var returnItem=calendarpicker.getReturnItem();\r",
                    "\r",
                    "var overPnl = this.getOverlayPanel();\r",
                    "overPnl.removeAll(true, true);  // remove all items from DOM \r",
                    "overPnl.hide();"
                ],
                "name": "calendarClosed"
            },
            "name": "onExample5_DecemberClosed",
            "designerId": "5c4eb335-fb69-489f-a9bf-2dc62abf444f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container",
                "designer|params": [
                    "container"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample6_DayCount",
                "implHandler": [
                    "var languageSelect = this.getLanguageSelect();",
                    "",
                    "var returnItem = this.getDateexamples().down('#example6');",
                    "",
                    "var myCustomBtns = [     // NOTE:  Currently can't define as array if including Expand/Collapse All features  (in this case use Title instead of custom Label if needed)",
                    "{",
                    "    xtype: 'label',",
                    "    html: 'Day Count Calendar',",
                    "    cls: 'daycount-label'",
                    "},",
                    "{",
                    "    xtype: 'segmentedbutton',",
                    "    itemId : 'pickerfooterbtns',",
                    "    docked : 'right',",
                    "    items: [",
                    "    {",
                    "        xtype: 'button',",
                    "        text: 'RETURN',",
                    "        iconCls: '',",
                    "        cls: 'pickerfooterbtns',",
                    "        listeners : {",
                    "            tap: function (button, e, options) {",
                    "                this.up('calendarpicker').customBtns('CANCEL');",
                    "            }",
                    "        }",
                    "    }",
                    "]}",
                    "];",
                    "",
                    "",
                    "var myRend = {",
                    "    renderer_dates: function (fldName, values) {",
                    "        var elem=values[fldName];",
                    "        if (values.rowType === 'H' || Ext.isEmpty(elem)) {return elem;} // don't process null values",
                    "        var dt = values['dt_'+fldName];",
                    "        var today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);",
                    "        var diff = Ext.Date.diff(today, dt, Ext.Date.DAY);",
                    "        var diffStr = (diff>0 ? diff.toString() : '&nbsp;');",
                    "        elem = elem+'<div class=\"daycount-inner\">'+diffStr+'</div>';",
                    "        return elem;",
                    "    },",
                    "    cls_renderer_dates: function (fldName, values){",
                    "        var cls=\"\", dt, sel, hol, dis, par = this.scope.parent;",
                    "        dt = values['dt_'+fldName];",
                    "        hol = values['isHoliday_'+fldName];",
                    "        dis = values['isDisabled_'+fldName];",
                    "",
                    "        if (values.rowType === 'H') {",
                    "        cls = cls + ' calendarpicker-header';}",
                    "        else if (Ext.isEmpty(dt)) {} // do nothing for empty dates",
                    "        else {",
                    "            cls = cls + ' daycount-outer';  // otherwise always apply",
                    "",
                    "            sel = (par.getSelDtArr().indexOf(Ext.Date.format(dt, 'Y-m-d'))>-1);",
                    "            if (par.getWeekendIndexArr().indexOf(parseInt(Ext.Date.format(dt, 'w'))) !== -1) {",
                    "                cls = cls+' calendarpicker-weekend';",
                    "            }",
                    "            if (hol){cls = cls+' calendarpicker-holiday';}",
                    "            if (!Ext.isEmpty(this.scope.todayDt)){",
                    "                if (this.scope.todayDt === Ext.Date.format(dt, 'Y-m-d')) {",
                    "                    cls = cls+' calendarpicker-today';",
                    "                }",
                    "            }",
                    "            if (dis){cls = cls+' calendarpicker-disabled';}",
                    "            if (sel){cls = cls+' calendarpicker-selected';}",
                    "        }",
                    "",
                    "        return (\"calendarpicker-days\" + cls);",
                    "    }};",
                    "",
                    "",
                    "    var holidayDtArr = HOLIDAYS;",
                    "",
                    "    var getDts = Ext.create('widget.calendarpicker', {",
                    "        itemId : 'calendar_daycount',",
                    "        //   customCls : ['calendarpicker-daycount'],",
                    "        customCls : ['calendarpicker-ios', 'calendarpicker-daycount'],",
                    "",
                    "        selectMode: 'NONE',",
                    "        backMonths: 0,",
                    "        forwardMonths: 6,",
                    "        useIconsForExpCollapse: false,",
                    "        holidayDtArr: holidayDtArr,",
                    "        includeCustomFooterItems: true,",
                    "        returnItem: returnItem,",
                    "        defaultCollapseLevel: 99,",
                    "        itemHeight: 16,   // Set minimum value for weekday names row ... use css for other heights",
                    "        variableHeights: true,",
                    "        height: '100%',",
                    "        width: '100%',",
                    "        customFooterItems: myCustomBtns,",
                    "        footerDock: 'top',",
                    "        hideExpandCollapseBtns: true,",
                    "        disableExpandCollapse: true,",
                    "        hideTitleBar: true,",
                    "        renderers: myRend,",
                    "",
                    "        // Language overridable configs",
                    "        monthsToInsertPullText: (Ext.isEmpty(languageSelect.monthsToInsertPullText) ? 'Pull to Insert Months...' : languageSelect.monthsToInsertPullText),",
                    "        monthsToInsertRefreshText: (Ext.isEmpty(languageSelect.monthsToInsertRefreshText) ? 'Release to Insert Months...' : languageSelect.monthsToInsertRefreshText),",
                    "        monthsToInsertLastUpdatedText: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedText) ? 'Last Updated:&nbsp;' : languageSelect.monthsToInsertLastUpdatedText),",
                    "        monthsToInsertLastUpdatedDateFormat: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedDateFormat) ? 'm/d/Y h:iA' : languageSelect.monthsToInsertLastUpdatedDateFormat),",
                    "        monthsToInsertLoadedText: (Ext.isEmpty(languageSelect.monthsToInsertLoadedText) ? 'Loaded.' : languageSelect.monthsToInsertLoadedText),",
                    "        monthsToInsertLoadingText: (Ext.isEmpty(languageSelect.monthsToInsertLoadingText) ? 'Loading...' : languageSelect.monthsToInsertLoadingText),",
                    "        monthsToAppendText: (Ext.isEmpty(languageSelect.monthsToAppendText) ? 'Append more Months...' : languageSelect.monthsToAppendText),",
                    "        longDayFormat: (Ext.isEmpty(languageSelect.longDayFormat) ? 'F d, Y' : languageSelect.longDayFormat),",
                    "        monthYearFormat: (Ext.isEmpty(languageSelect.monthYearFormat) ? 'F Y' : languageSelect.monthYearFormat),",
                    "        startDay: (Ext.isEmpty(languageSelect.startDay) ? 0 : languageSelect.startDay),",
                    "        weekendIndexArr: (Ext.isEmpty(languageSelect.weekendIndexArr) ? [0,6] : languageSelect.weekendIndexArr),",
                    "",
                    "        footerBtnTextOverrides: (Ext.isEmpty(languageSelect.footerBtnTextOverrides) ? {} : languageSelect.footerBtnTextOverrides)",
                    "",
                    "",
                    "    });",
                    "",
                    "    var overPnl = this.getOverlayPanel();",
                    "    overPnl.add(getDts);",
                    "",
                    "    overPnl.showBy(container);"
                ],
                "name": "day_count_btn"
            },
            "name": "onExample6_DayCount",
            "designerId": "662f7806-b958-47fb-a9c7-065b6b1a7db5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#calendar_daycount",
                "designer|params": [
                    "calendarpicker"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample6_DaycountClosed",
                "implHandler": [
                    "var returnItem=calendarpicker.getReturnItem();\r",
                    "\r",
                    "var overPnl = this.getOverlayPanel();\r",
                    "overPnl.removeAll(true, true);  // remove all items from DOM \r",
                    "overPnl.hide();"
                ],
                "name": "calendarClosed"
            },
            "name": "onExample6_DaycountClosed",
            "designerId": "417d1791-5eb7-42e7-a277-25fe4a4e2449"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container",
                "designer|params": [
                    "container"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample7_OptionDates",
                "implHandler": [
                    "var languageSelect = this.getLanguageSelect();",
                    "",
                    "var returnItem = this.getDateexamples().down('#example7');",
                    "",
                    "var customDateTypes = [",
                    "    {",
                    "        customType: 'holiday',",
                    "        customDescr: 'Holiday',",
                    "        useCustomDtArr: false,",
                    "        storeId: 'optionDates',",
                    "        priority: 4,",
                    "        disabled: false,",
                    "        cls: 'optionDates-holiday'",
                    "    },",
                    "    {",
                    "        customType: 'stopTrading',",
                    "        customDescr: 'Stop Trading',",
                    "        useCustomDtArr: false,",
                    "        storeId: 'optionDates',",
                    "        priority: 2,",
                    "        disabled: false,",
                    "        cls: 'optionDates-stopTrading'",
                    "    },",
                    "    {",
                    "        customType: 'optionsExpire',",
                    "        customDescr: 'Options Expire',",
                    "        useCustomDtArr: false,",
                    "        storeId: 'optionDates',",
                    "        priority: 1,",
                    "        disabled: false,",
                    "        cls: 'optionDates-optionsExpire'",
                    "    },",
                    "    {",
                    "        customType: 'quarterlyExpiration',",
                    "        customDescr: 'Quarterly Expiration',",
                    "        useCustomDtArr: false,",
                    "        storeId: 'optionDates',",
                    "        priority: 3,",
                    "        disabled: false,",
                    "        cls: 'optionDates-quarterlyExpiration'",
                    "    }",
                    "];",
                    "",
                    "",
                    "var myCustomBtns = {",
                    "    xtype: 'segmentedbutton',",
                    "    itemId : 'pickerfooterbtns',",
                    "    docked : 'right',",
                    "    items: [{",
                    "        xtype: 'button',",
                    "        text: 'RETURN',",
                    "        iconCls: '',",
                    "        cls: 'pickerfooterbtns',",
                    "        listeners : {",
                    "            tap: function (button, e, options) {",
                    "                this.up('calendarpicker').customBtns('CANCEL');",
                    "            }",
                    "        }",
                    "    }]",
                    "};",
                    "",
                    "var getDts = Ext.create('widget.calendarpicker', {",
                    "    itemId : 'calendar_optionDates',",
                    "    customCls : ['calendarpicker-optionDates'],",
                    "    title : 'Options Expiration Calendar',",
                    "    selectMode: 'NONE',",
                    "    backMonths: 0,",
                    "    forwardMonths: 12,",
                    "    useIconsForExpCollapse: false,",
                    "    holidayDtArr: [],",
                    "    returnItem: returnItem,",
                    "    defaultCollapseLevel: 99,",
                    "    height: '100%',",
                    "    width: '100%',",
                    "    includeCustomFooterItems: true,",
                    "    customFooterItems: myCustomBtns,",
                    "    customDateTypes: customDateTypes,",
                    "    includeCustomDatesLegend: true,",
                    "",
                    "    // Language overridable configs",
                    "    monthsToInsertPullText: (Ext.isEmpty(languageSelect.monthsToInsertPullText) ? 'Pull to Insert Months...' : languageSelect.monthsToInsertPullText),",
                    "    monthsToInsertRefreshText: (Ext.isEmpty(languageSelect.monthsToInsertRefreshText) ? 'Release to Insert Months...' : languageSelect.monthsToInsertRefreshText),",
                    "    monthsToInsertLastUpdatedText: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedText) ? 'Last Updated:&nbsp;' : languageSelect.monthsToInsertLastUpdatedText),",
                    "    monthsToInsertLastUpdatedDateFormat: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedDateFormat) ? 'm/d/Y h:iA' : languageSelect.monthsToInsertLastUpdatedDateFormat),",
                    "    monthsToInsertLoadedText: (Ext.isEmpty(languageSelect.monthsToInsertLoadedText) ? 'Loaded.' : languageSelect.monthsToInsertLoadedText),",
                    "    monthsToInsertLoadingText: (Ext.isEmpty(languageSelect.monthsToInsertLoadingText) ? 'Loading...' : languageSelect.monthsToInsertLoadingText),",
                    "    monthsToAppendText: (Ext.isEmpty(languageSelect.monthsToAppendText) ? 'Append more Months...' : languageSelect.monthsToAppendText),",
                    "    longDayFormat: (Ext.isEmpty(languageSelect.longDayFormat) ? 'F d, Y' : languageSelect.longDayFormat),",
                    "    monthYearFormat: (Ext.isEmpty(languageSelect.monthYearFormat) ? 'F Y' : languageSelect.monthYearFormat),",
                    "    startDay: (Ext.isEmpty(languageSelect.startDay) ? 0 : languageSelect.startDay),",
                    "    weekendIndexArr: (Ext.isEmpty(languageSelect.weekendIndexArr) ? [0,6] : languageSelect.weekendIndexArr),",
                    "",
                    "    customDatesLegendScrollDock: (Ext.os.is.Phone ? 'both' : null)  // dock to top and bottom of scrolling list for phones. to top of container for tablets",
                    "",
                    "});",
                    "",
                    "var overPnl = this.getOverlayPanel();",
                    "overPnl.add(getDts);",
                    "",
                    "overPnl.showBy(container);"
                ],
                "name": "optionDates_btn"
            },
            "name": "onExample7_OptionDates",
            "designerId": "5957e461-573c-4e35-8181-c747057c9ffa"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#calendar_optionDates",
                "designer|params": [
                    "calendarpicker"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onExample7_OptionDatesClosed",
                "implHandler": [
                    "var returnItem=calendarpicker.getReturnItem();\r",
                    "\r",
                    "var overPnl = this.getOverlayPanel();\r",
                    "overPnl.removeAll(true, true);  // remove all items from DOM \r",
                    "overPnl.hide();"
                ],
                "name": "calendarClosed"
            },
            "name": "onExample7_OptionDatesClosed",
            "designerId": "1c9505a5-85bc-4a31-96b9-4b1cf3459088"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "selectfield#languageSelect",
                "designer|targetType": "Ext.field.Select",
                "fn": "onLanguageSelectfieldChange",
                "implHandler": [
                    "this.languageCalendarOverrides(this, newValue, selectfield.getRecord().get('language'));"
                ],
                "name": "change"
            },
            "name": "onLanguageSelectfieldChange",
            "designerId": "0b760867-bdc4-4e9a-9b03-b7e27794562d"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "        // Define global HOLIDAYS (replace with server-side call in practice)",
                    "        HOLIDAYS = ['2013-01-01', '2013-01-21', '2013-02-18',",
                    "                    '2013-05-27', '2013-07-04', '2013-09-02',",
                    "                    '2013-11-28', '2013-12-25', '2014-01-01',",
                    "                    '2014-01-20', '2014-02-17', '2014-05-26',",
                    "                    '2014-07-04', '2014-09-01', '2014-11-27',",
                    "                    '2014-12-25', '2015-01-01', '2015-01-19',",
                    "                    '2015-02-25', '2015-04-03', '2015-05-25',",
                    "                    '2015-07-03', '2015-09-07', '2015-11-26',",
                    "                    '2015-12-25', '2016-01-01', '2016-01-18',",
                    "                    '2016-02-15', '2016-03-25', '2016-05-30',",
                    "                    '2016-07-04', '2016-09-05', '2016-11-24',",
                    "                    '2016-12-26'];"
                ]
            },
            "name": "init",
            "designerId": "08124339-08fb-4782-8dcb-0216c9b4d642"
        }
    ]
}