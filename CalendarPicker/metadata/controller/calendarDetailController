{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "calendarDetailController"
    },
    "designerId": "52d9bcbd-9a34-49ad-b2bf-baeb11a9221d",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onExample7_MatrixView",
                "designer|params": [
                    "container"
                ],
                "implHandler": [
                    "if(Ext.os.is.Phone) {\r",
                    "    Ext.Msg.alert('Tablet-only example...');\r",
                    "    return;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var dateEx = this.getDateexamples();\r",
                    "var returnItem = dateEx.down('#example8');\r",
                    "\r",
                    "var newcont = this.getMatrixView();\r",
                    "\r",
                    "newcont.down('#matrixViewLabel').setHtml('Options Matrix View Example');\r",
                    "newcont.down('#matrixViewSegBtn').setHidden(true);\r",
                    "newcont.down('#yearView').setMaxWidth('40em');\r",
                    "\r",
                    "var yearView = newcont.down('#yearView');\r",
                    "\r",
                    "var customDateTypes = [\r",
                    "{\r",
                    "    customType: 'holiday',\r",
                    "    customDescr: 'Holiday',\r",
                    "    useCustomDtArr: false,\r",
                    "    storeId: 'optionDates',\r",
                    "    priority: 4,\r",
                    "    disabled: false,\r",
                    "    cls: 'optionDates-holiday'\r",
                    "},\r",
                    "{\r",
                    "    customType: 'stopTrading',\r",
                    "    customDescr: 'Stop Trading',\r",
                    "    useCustomDtArr: false,\r",
                    "    storeId: 'optionDates',\r",
                    "    priority: 2,\r",
                    "    disabled: false,\r",
                    "    cls: 'optionDates-stopTrading'\r",
                    "},\r",
                    "{\r",
                    "    customType: 'optionsExpire',\r",
                    "    customDescr: 'Options Expire',\r",
                    "    useCustomDtArr: false,\r",
                    "    storeId: 'optionDates',\r",
                    "    priority: 1,\r",
                    "    disabled: false,\r",
                    "    cls: 'optionDates-optionsExpire'\r",
                    "},\r",
                    "{\r",
                    "    customType: 'quarterlyExpiration',\r",
                    "    customDescr: 'Quarterly Expiration',\r",
                    "    useCustomDtArr: false,\r",
                    "    storeId: 'optionDates',\r",
                    "    priority: 3,\r",
                    "    disabled: false,\r",
                    "    cls: 'optionDates-quarterlyExpiration'\r",
                    "}\r",
                    "];\r",
                    "\r",
                    "var getDts = Ext.create('widget.calendarpicker', {\r",
                    "    itemId : 'calendar_optionMatrixDates',\r",
                    "    customCls : ['calendarpicker-optionDates'],    \r",
                    "    selectMode: 'NONE',\r",
                    "    backMonths: 0,\r",
                    "    forwardMonths: 6,\r",
                    "    itemHeight: 24,\r",
                    "    variableHeights: true,\r",
                    "    useIconsForExpCollapse: false,\r",
                    "    holidayDtArr: [],\r",
                    "    returnItem: returnItem,\r",
                    "    customDateTypes: customDateTypes,    \r",
                    "    includeCustomDatesLegend: true,    \r",
                    "\r",
                    "    // configs specific to matrix view follow    \r",
                    "    hideTitleBar: true,\r",
                    "    includeFooter: false,\r",
                    "    matrixView: true,\r",
                    "    matrixCols: 3,\r",
                    "    matrixRows: 99,\r",
                    "    matrixContainer: yearView,\r",
                    "    matrixItemHeight: '12.5em',  \r",
                    "    matrixItem6WeekHeight: '14em',         \r",
                    "\r",
                    "    allowMatrixMonthAdditions:true,\r",
                    "    monthsToAppend: 6,\r",
                    "    monthsToAppendText: 'More Months...'     \r",
                    "});\r",
                    "\r",
                    "\r",
                    "Ext.Viewport.add(newcont);\r",
                    "\r",
                    "Ext.Viewport.setActiveItem(newcont);\r",
                    ""
                ],
                "name": "optionDatesMatrix_btn",
                "designer|targetType": "Ext.Container",
                "designer|controlQuery": "container"
            },
            "designerId": "74854e73-ce85-4f6b-89e4-58d1f211a3ea"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onExample4_MatrixView",
                "designer|params": [
                    "container"
                ],
                "implHandler": [
                    "this.processDetailCalendar();"
                ],
                "name": "lookup_btn",
                "designer|targetType": "Ext.Container",
                "designer|controlQuery": "container"
            },
            "designerId": "1bfc8932-7d4b-4245-aa77-470fdb0a40e5"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "matrixView",
                "selector": "matrixView",
                "xtype": "matrixView"
            },
            "designerId": "6db7e343-c911-43ee-9bf8-613894f468e2"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "matrixViewPhone",
                "selector": "matrixViewPhone",
                "xtype": "matrixViewPhone"
            },
            "designerId": "a2a7d12f-8218-4a7f-a036-2e0424428488"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "calCont",
                "selector": "calCont",
                "xtype": "calCont"
            },
            "designerId": "9319cf90-cbcf-4471-aee5-70744a2a0ffb"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "dateexamples",
                "selector": "dateexamples",
                "xtype": "dateexamples"
            },
            "designerId": "a245d26d-55b6-48f3-84c5-cf688acdcad2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "processDetailCalendar",
                "implHandler": [
                    "// Launch MatrixView \r",
                    "\r",
                    "if(Ext.os.is.Phone) {\r",
                    "    this.processDetailCalendarPhone();\r",
                    "    return;\r",
                    "}\r",
                    "\r",
                    "var matrixView = this.getMatrixView();\r",
                    "\r",
                    "matrixView.down('#matrixViewLabel').setHtml('Calendar');\r",
                    "var yearView = matrixView.down('#yearView');\r",
                    "yearView.setMaxWidth('50em');\r",
                    "yearView.setCls('matrix-view-year');\r",
                    "\r",
                    "\r",
                    "var customDateTypes = [\r",
                    "{\r",
                    "    customType: 'holiday',\r",
                    "    customDescr: 'Holiday',\r",
                    "    useCustomDtArr: false,\r",
                    "    storeId: 'optionDates',\r",
                    "    priority: 1,\r",
                    "    disabled: false,\r",
                    "    cls: 'calendarpicker-holiday'\r",
                    "}\r",
                    "];\r",
                    "\r",
                    "\r",
                    "var getDts = Ext.create('widget.calendarpicker', {\r",
                    "    customCls : ['calendarpicker-matrix-year'],   \r",
                    "    itemId : 'myYear' ,\r",
                    "    selectMode: 'NONE',\r",
                    "    itemHeight: 16,\r",
                    "    variableHeights: true,    \r",
                    "    backMonths: 0,\r",
                    "    forwardMonths: 6,\r",
                    "    useIconsForExpCollapse: false,\r",
                    "    returnItem: yearView,\r",
                    "    enableQuickDaySelection: true,    \r",
                    "    customDateTypes: customDateTypes,    \r",
                    "    includeCustomDatesLegend: true,     \r",
                    "\r",
                    "    // configs specific to matrix view follow        \r",
                    "    hideTitleBar: true,\r",
                    "    includeFooter: false,\r",
                    "    matrixView: true,\r",
                    "    matrixCols: 3,\r",
                    "    matrixRows: 99,\r",
                    "    matrixItemHeight: '10em',  \r",
                    "    matrixItem6WeekHeight: '11.5em',  \r",
                    "    matrixContainer: yearView,\r",
                    "\r",
                    "    allowMatrixMonthAdditions:true,\r",
                    "    monthsToAppend: 6,\r",
                    "    monthsToAppendText: 'More Months...'      \r",
                    "});\r",
                    "\r",
                    "\r",
                    "Ext.Viewport.add(matrixView);\r",
                    "\r",
                    "Ext.Viewport.setActiveItem(matrixView);\r",
                    ""
                ]
            },
            "designerId": "18e82a86-e82d-499d-be3d-ce89fe489cb1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMonthTap",
                "designer|params": [
                    "me, list, index, target, record, e"
                ],
                "implHandler": [
                    "// Used for multiple purposes:\r",
                    "//  1) Tap month header on year view to navigate to month view\r",
                    "//  2) Tap on yearMonthSelector of Month View to change month\r",
                    "//  3) Tap on yearMonthSelector of Day View to change month\r",
                    "//  4) Tap on <today> for Month or Day view\r",
                    "\r",
                    "var thisItem = me.parent.getItemId();\r",
                    "\r",
                    "var matrixView = me.up('#matrixView');\r",
                    "var matrixViewPhone = me.up('#matrixViewPhone');\r",
                    "var thisView = (Ext.isEmpty(matrixView) ? matrixViewPhone : matrixView);\r",
                    "if (Ext.isEmpty(thisView)) {return;}  // Ignore other triggered events (fix controlQuery later if possible)\r",
                    "\r",
                    "if (thisItem === 'myMonth') {\r",
                    "    // yearMoSel or Today selection from Month view\r",
                    "    this.processMonthViewCategTap(me, list, index, target, record, e);\r",
                    "    return;\r",
                    "}\r",
                    "else if (thisItem === 'myDay') {\r",
                    "    // yearMoSel or Today selection from Day view\r",
                    "    this.processDayViewCategTap(me, list, index, target, record, e);\r",
                    "    return;\r",
                    "}\r",
                    "else {if (thisItem.substring(0,6) !== 'myYear') {return;}}\r",
                    "\r",
                    "// Process Month view for selected Month from YearView\r",
                    "var selMo = me.parent;\r",
                    "var backMonths = selMo.getBackMonths();\r",
                    "var forwardMonths = selMo.getForwardMonths();\r",
                    "\r",
                    "this.updateMonthView(backMonths, forwardMonths);\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ],
                "name": "nodeItemTap",
                "designer|targetType": "Ext.Container",
                "designer|controlQuery": "container"
            },
            "designerId": "a1e9a65d-0537-4ba0-9354-696ab3946cef"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onListItemSwipe",
                "implHandler": [
                    "// Process item swipe in month or day view calendars to change to next month\r",
                    "\r",
                    "// Ignore other triggered events (fix controlQuery later if possible)\r",
                    "var matrixView = dataview.up('#matrixView');\r",
                    "var matrixViewPhone = dataview.up('#matrixViewPhone');\r",
                    "var thisView = (Ext.isEmpty(matrixView) ? matrixViewPhone : matrixView);\r",
                    "if (Ext.isEmpty(thisView)) {return;}\r",
                    "\r",
                    "dataview.suspendEvents();\r",
                    "\r",
                    "var monthPkr = dataview.up('#myMonth');\r",
                    "var dayPkr = dataview.up('#myDay');\r",
                    "var dir = e.direction;\r",
                    "\r",
                    "var backMonths, newBackMonths, today, firstdt, newFirstDate, newFirstDtStr;\r",
                    "\r",
                    "if (!Ext.isEmpty(monthPkr)) {\r",
                    "    // Handle swipe from Month view\r",
                    "    backMonths = monthPkr.getBackMonths();\r",
                    "    newBackMonths = backMonths + (e.direction==='left' ? -1 : 1);\r",
                    "    this.updateMonthView(newBackMonths, newBackMonths*-1);    \r",
                    "\r",
                    "}\r",
                    "\r",
                    "if (!Ext.isEmpty(dayPkr)) {\r",
                    "    // Handle swipe from Day view within the month calendar\r",
                    "    backMonths = dayPkr.getBackMonths();\r",
                    "    newBackMonths = backMonths + (e.direction==='left' ? -1 : 1);\r",
                    "\r",
                    "    dayPkr.newBackMonths = newBackMonths;\r",
                    "    dayPkr.newForwardMonths = newBackMonths*-1;\r",
                    "\r",
                    "    today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);\r",
                    "\r",
                    "    firstdt = Ext.Date.clearTime(Ext.Date.getFirstDateOfMonth(today), true);\r",
                    "\r",
                    "    newFirstDate = Ext.Date.clearTime(Ext.Date.add(firstdt, Ext.Date.MONTH, -1*newBackMonths), true);\r",
                    "    newFirstDtStr = Ext.Date.format(newFirstDate, 'Y-m-d');\r",
                    "\r",
                    "    dayPkr.fireEvent('dateSelected', dayPkr, newFirstDtStr, newFirstDate);\r",
                    "}\r",
                    "\r",
                    "dataview.resumeEvents(true);\r",
                    "\r",
                    "\r",
                    ""
                ],
                "name": "itemswipe",
                "designer|targetType": "Ext.dataview.List",
                "designer|controlQuery": "list#calendarlist"
            },
            "designerId": "1f2ca452-3109-48b6-8a22-53a55d9a4e42"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDayViewSwipe",
                "designer|params": [
                    "container, e"
                ],
                "implHandler": [
                    "// Used to trap swipe in day view list container to change to next day\r",
                    "\r",
                    "container.suspendEvents();\r",
                    "\r",
                    "\r",
                    "var dayPkr = container.down('#myDay');\r",
                    "var dir = e.direction;\r",
                    "\r",
                    "var backMonths, newBackMonths, today, firstdt, newFirstDate, newFirstDtStr, selDtStr, selDt;\r",
                    "\r",
                    "selDtStr = dayPkr.getSelDtArr()[0];\r",
                    "\r",
                    "if (!Ext.isEmpty(dayPkr) && !Ext.isEmpty(selDtStr)) {\r",
                    "    // Handle swipe from Day view within the list container\r",
                    "    // Get current day first\r",
                    "    selDt = Ext.Date.parse(selDtStr, 'Y-m-d');\r",
                    "    newFirstDate = Ext.Date.clearTime(Ext.Date.add(selDt, Ext.Date.DAY, (dir==='left' ? 1 : -1)), true);\r",
                    "    newFirstDtStr = Ext.Date.format(newFirstDate, 'Y-m-d');\r",
                    "\r",
                    "    if (Ext.Date.format(newFirstDate, 'm') === Ext.Date.format(selDt, 'm')) {\r",
                    "        // moving one day in same month\r",
                    "        // dateSelected event will handle this\r",
                    "    }\r",
                    "    else {\r",
                    "        // moving to different month\r",
                    "\r",
                    "        backMonths = dayPkr.getBackMonths();\r",
                    "        newBackMonths = backMonths + (dir==='left' ? -1 : 1);\r",
                    "\r",
                    "        dayPkr.newBackMonths = newBackMonths;\r",
                    "        dayPkr.newForwardMonths = newBackMonths*-1;\r",
                    "    }\r",
                    "\r",
                    "    dayPkr.fireEvent('dateSelected', dayPkr, newFirstDtStr, newFirstDate);\r",
                    "}\r",
                    "\r",
                    "container.resumeEvents(true);\r",
                    "\r",
                    ""
                ],
                "name": "dayViewSwipe",
                "designer|targetType": "Ext.Container",
                "designer|controlQuery": "container#dayView"
            },
            "designerId": "a266e082-ee4c-4e03-9944-837306bccb60"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCalendarDayTap",
                "designer|params": [
                    "calendarpicker",
                    "dateStr",
                    "date"
                ],
                "implHandler": [
                    "// Year, Month and Day calendars fire dateSelected event to navigate to appropriate day in Day View\r",
                    "\r",
                    "var itemId = calendarpicker.getItemId();  // for Year day select\r",
                    "\r",
                    "var fromYear = (itemId.substring(0,6) === 'myYear');\r",
                    "var fromMonth = (itemId === 'myMonth');\r",
                    "var fromDay = (itemId === 'myDay');\r",
                    "\r",
                    "if (!fromYear && !fromMonth && !fromDay) {return;}\r",
                    "\r",
                    "// Process Day view for selected Day\r",
                    "\r",
                    "var matrixView = (Ext.os.is.Phone ? this.getMatrixViewPhone() : this.getMatrixView());\r",
                    "var dayView = matrixView.down('#dayView');\r",
                    "var backMonths, forwardMonths;\r",
                    "var today, firstdt, selFirstdt;\r",
                    "\r",
                    "if (!Ext.os.is.Phone) {\r",
                    "    dayView.down('#dayViewBigDay').setHtml(Ext.Date.format(date, 'j'));\r",
                    "    dayView.down('#dayViewDayName').setHtml(Ext.Date.format(date, 'l') +\r",
                    "    ', ' + Ext.Date.format(date, 'F') +\r",
                    "    ' ' + Ext.Date.format(date, 'j') +\r",
                    "    '<br>' + Ext.Date.format(date, 'Y'));\r",
                    "}\r",
                    "\r",
                    "this.customDayList(dateStr);\r",
                    "\r",
                    "backMonths = calendarpicker.getBackMonths();\r",
                    "forwardMonths = calendarpicker.getForwardMonths();  \r",
                    "\r",
                    "if (fromYear && Ext.os.is.Phone) {\r",
                    "    // Compute number of months back from today and selected date\r",
                    "    today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);\r",
                    "    firstdt = Ext.Date.clearTime(Ext.Date.getFirstDateOfMonth(today), true);\r",
                    "    selFirstdt = Ext.Date.clearTime(Ext.Date.getFirstDateOfMonth(date), true);\r",
                    "    backMonths = Ext.Date.diff(selFirstdt, firstdt, Ext.Date.MONTH);\r",
                    "    forwardMonths = backMonths*-1; \r",
                    "}    \r",
                    "\r",
                    "var selDts;\r",
                    "if (fromDay) {\r",
                    "    if (!Ext.isEmpty(calendarpicker.newBackMonths) && calendarpicker.newBackMonths != backMonths) {\r",
                    "        selDts = [dateStr];\r",
                    "        backMonths = calendarpicker.newBackMonths;\r",
                    "        forwardMonths = calendarpicker.newForwardMonths;\r",
                    "    } else {\r",
                    "        selDts = [dateStr];\r",
                    "        calendarpicker.setSelDtArr(selDts);\r",
                    "        calendarpicker.down('#calendarlist').refresh();\r",
                    "        return;\r",
                    "    }\r",
                    "}\r",
                    "var returnItem = dayView.down('#dayViewMoCal');\r",
                    "returnItem.removeAll(true, true); // clean up from prior navigation ... may need to customize this\r",
                    "\r",
                    "\r",
                    "var getDts = this.createDayCalendar(returnItem, dateStr, backMonths, forwardMonths, dayView);\r",
                    "\r",
                    "returnItem.add(getDts);\r",
                    "matrixView.setActiveItem(dayView);\r",
                    "matrixView.down('#matrixViewSegBtn').setPressedButtons([3]);\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ],
                "name": "dateSelected",
                "designer|targetType": "Ext.Container",
                "designer|controlQuery": "container"
            },
            "designerId": "0d7159ac-fd8a-4179-8040-3cc67d7079f5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMatrixViewBackBtnTap",
                "implHandler": [
                    "// Closes Matrix View and returns to calling panel\r",
                    "var matrixView = button.up('#matrixView');\r",
                    "var matrixViewPhone = button.up('#matrixViewPhone');\r",
                    "var thisView = (Ext.isEmpty(matrixView) ? matrixViewPhone : matrixView);\r",
                    "if (Ext.isEmpty(thisView)) {return;}\r",
                    "\r",
                    "Ext.Viewport.remove(thisView);\r",
                    "\r",
                    "Ext.Viewport.setActiveItem(0);\r",
                    "\r",
                    ""
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#matrixViewBackBtn"
            },
            "designerId": "45d8919e-853b-4d36-aeb2-c2b7fcac260f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onYearViewTap",
                "implHandler": [
                    "var matrixView = (Ext.os.is.Phone ? this.getMatrixViewPhone() : this.getMatrixView());\r",
                    "matrixView.setActiveItem(matrixView.down('#yearView'));"
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#matrixViewYearBtn"
            },
            "designerId": "8dfd614b-93aa-4290-85e1-14aefe10e2b2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMonthViewTap",
                "implHandler": [
                    "var matrixView = (Ext.os.is.Phone ? this.getMatrixViewPhone() : this.getMatrixView());\r",
                    "var monthView = matrixView.down('#monthView');\r",
                    "var dayCalView = matrixView.down('#dayView').down('#myDay');\r",
                    "\r",
                    "if (Ext.isEmpty(monthView.down('#calendar'))) {\r",
                    "    // Only create calendar for current month if not previously navigated to\r",
                    "    this.updateMonthView(0, 0);\r",
                    "}    \r",
                    "else if (!Ext.isEmpty(dayCalView)) {  \r",
                    "    // Navigate to same month as in Day view already\r",
                    "    this.updateMonthView(dayCalView.getBackMonths(), dayCalView.getForwardMonths());         \r",
                    "} \r",
                    "else {\r",
                    "    matrixView.setActiveItem(matrixView.down('#monthView'));\r",
                    "}    \r",
                    ""
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#matrixViewMonthBtn"
            },
            "designerId": "5280f0e9-35d4-407d-8d13-2d1bfb1cdabc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onListViewTap",
                "implHandler": [
                    "// Add logic later to update List view based on context when pressing List tab\r",
                    "var matrixView = (Ext.os.is.Phone ? this.getMatrixViewPhone() : this.getMatrixView());\r",
                    "matrixView.setActiveItem(matrixView.down('#listView'));"
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#matrixViewListBtn"
            },
            "designerId": "93445665-cd19-4620-8db3-cba2f872c4fa"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDayViewTap",
                "implHandler": [
                    "var matrixView = (Ext.os.is.Phone ? this.getMatrixViewPhone() : this.getMatrixView());\r",
                    "\r",
                    "var dayView = matrixView.down('#dayView');\r",
                    "var returnItem = dayView.down('#dayViewMoCal');\r",
                    "\r",
                    "if (Ext.isEmpty(returnItem.down('#calendar'))) {\r",
                    "    var date = Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);\r",
                    "    var selDts = [Ext.Date.format(date, 'Y-m-d')];\r",
                    "\r",
                    "    if (!Ext.os.is.Phone) {\r",
                    "        dayView.down('#dayViewBigDay').setHtml(Ext.Date.format(date, 'j'));\r",
                    "        dayView.down('#dayViewDayName').setHtml(Ext.Date.format(date, 'l') +\r",
                    "        ', ' + Ext.Date.format(date, 'F') +\r",
                    "        ' ' + Ext.Date.format(date, 'j') +\r",
                    "        '<br>' + Ext.Date.format(date, 'Y'));\r",
                    "    }\r",
                    "\r",
                    "    this.customDayList(selDts[0]);   \r",
                    "\r",
                    "    var getDts = this.createDayCalendar(returnItem, selDts[0], 0, 0, dayView);\r",
                    "\r",
                    "    returnItem.add(getDts);\r",
                    "}\r",
                    "matrixView.setActiveItem(matrixView.down('#dayView'));"
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#matrixViewDayBtn"
            },
            "designerId": "762b3658-597d-4357-b0b0-d2d278cd3b8d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "processDetailCalendarPhone",
                "implHandler": [
                    "var matrixView = this.getMatrixViewPhone();\r",
                    "\r",
                    "matrixView.down('#matrixViewLabel').setHtml('Calendar');\r",
                    "var yearView = matrixView.down('#yearView');\r",
                    "yearView.setMaxWidth('100%');\r",
                    "yearView.setCls('matrix-view-year');\r",
                    "\r",
                    "\r",
                    "var customDateTypes = [\r",
                    "{\r",
                    "    customType: 'holiday',\r",
                    "    customDescr: 'Holiday',\r",
                    "    useCustomDtArr: false,\r",
                    "    storeId: 'optionDates',\r",
                    "    priority: 1,\r",
                    "    disabled: false,\r",
                    "    cls: 'calendarpicker-holiday'\r",
                    "}\r",
                    "];\r",
                    "\r",
                    "\r",
                    "var getDts = Ext.create('widget.calendarpicker', {\r",
                    "    customCls : ['calendarpicker-matrix-year'],   \r",
                    "    itemId : 'myYear',\r",
                    "    selectMode: 'NONE',\r",
                    "    itemHeight: 16,\r",
                    "    variableHeights: true,    \r",
                    "    backMonths: 0,\r",
                    "    forwardMonths: 12,\r",
                    "    useIconsForExpCollapse: false,\r",
                    "    returnItem: yearView,\r",
                    "    includeCustomFooterItems: false,            \r",
                    "    enableQuickDaySelection: true,    \r",
                    "    customDateTypes: customDateTypes,    \r",
                    "    includeCustomDatesLegend: true,     \r",
                    "\r",
                    "    hideTitleBar: true,\r",
                    "    includeFooter: true,\r",
                    "    maxWidth: '17em'  // applied here for phones\r",
                    "\r",
                    "});\r",
                    "\r",
                    "yearView.add(getDts);\r",
                    "\r",
                    "Ext.Viewport.add(matrixView);\r",
                    "\r",
                    "Ext.Viewport.setActiveItem(matrixView);\r",
                    ""
                ]
            },
            "designerId": "ca635b44-9c39-49c3-b5f7-5319b9ab5376"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "processMonthViewCategTap",
                "designer|params": [
                    "me, list, index, target, record, e"
                ],
                "implHandler": [
                    "// Process tap of MonthView header (aka category row) tap\r",
                    "var tgt = e.getTarget(null,null,true);\r",
                    "var today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);\r",
                    "var thisYear = Ext.Date.format(today, 'Y');\r",
                    "var yearMoCurr = record.get('year')+record.get('mo');\r",
                    "\r",
                    "if (tgt.hasCls('calendarpicker-month')) {\r",
                    "    // LATER display list of months in current year if tapping on month\r",
                    "    //       display list of years if tapping on  year ????\r",
                    "}  \r",
                    "\r",
                    "else if (tgt.hasCls('matrix-month-img')) {\r",
                    "    // Launch year selector code\r",
                    "    var yearMoSel = Ext.create('widget.yearMonthSelect', {\r",
                    "        itemId: 'matrix_month_yearMoSel',\r",
                    "        yearInit: thisYear,\r",
                    "        yearMoCurr: yearMoCurr,\r",
                    "        backYears: 2,\r",
                    "        forwardYears: 12\r",
                    "    });\r",
                    "    yearMoSel.showBy(tgt);\r",
                    "} \r",
                    "else if (tgt.hasCls('matrix-month-gotoToday')) {\r",
                    "    this.updateMonthView(0, 0);    \r",
                    "}         \r",
                    "else {\r",
                    "    // do nothing\r",
                    "}    \r",
                    ""
                ]
            },
            "designerId": "7ccd72dd-8bd9-4518-98fe-6600310cd099"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMonth_YearMoSel",
                "designer|params": [
                    "yearMoSelPicker",
                    "yearMoSel"
                ],
                "implHandler": [
                    "// Handle user selection of Year+Month for Month view\r",
                    "\r",
                    "var backMonths = yearMoSelPicker.getBackMonths();\r",
                    "var forwardMonths = yearMoSelPicker.getForwardMonths();\r",
                    "\r",
                    "yearMoSelPicker.destroy();\r",
                    "\r",
                    "this.updateMonthView(backMonths, forwardMonths);\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ],
                "name": "yearMoSel",
                "designer|targetType": "Ext.Container",
                "designer|controlQuery": "container#matrix_month_yearMoSel"
            },
            "designerId": "fe1a248c-f6ce-471d-855b-5d6eda4efee0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "updateMonthView",
                "designer|params": [
                    "backMonths",
                    "forwardMonths"
                ],
                "implHandler": [
                    "// Code for displaying calendar in Month view\r",
                    "\r",
                    "var matrixView = this.getMatrixView();\r",
                    "var monthView = matrixView.down('#monthView');\r",
                    "monthView.removeAll(true, true); // clean up from prior navigation ... may need to customize this\r",
                    "\r",
                    "\r",
                    "\r",
                    "var customDateTypes = [\r",
                    "{\r",
                    "    customType: 'holiday',\r",
                    "    customDescr: 'Holiday',\r",
                    "    useCustomDtArr: false,\r",
                    "    storeId: 'optionDates',\r",
                    "    priority: 1,\r",
                    "    disabled: false,\r",
                    "    cls: 'matrix-month-holiday'\r",
                    "}\r",
                    "];\r",
                    "\r",
                    "var myRend = {  renderer_month_img: function (values){return '';},\r",
                    "    renderer_month_gotoToday: function (values){return 'Today';},\r",
                    "\r",
                    "    // Customize renderer_dates() to display custom date description if applicable              \r",
                    "    renderer_dates: function (fldName, values) {\r",
                    "        var elem      = values[fldName];\r",
                    "    if (Ext.isEmpty(elem)) {return;}\r",
                    "\r",
                    "    var htmlFldNm = 'customHtml_'+fldName;\r",
                    "    var cssFldNm  = 'customCls_'+fldName;\r",
                    "    var html      = values[htmlFldNm];\r",
                    "    var css       = values[cssFldNm];\r",
                    "    var htmlStr   = '';\r",
                    "\r",
                    "    if (!Ext.isEmpty(html)) {\r",
                    "        htmlStr = '<span class=\" '+css+' calendarpicker-legend-cls-override\">&nbsp;</span>'+\r",
                    "        '<span class=\" calendarpicker-legend-cls-html\">'+html+'</span>';\r",
                    "    }\r",
                    "return (elem.toString() + (Ext.isEmpty(htmlStr) ? '' : '<div class=\" calendarpicker-days2\">'+htmlStr+'</div>'));},\r",
                    "\r",
                    "// Customize cls_renderer_dates() to not render customCls since this is handled above\r",
                    "cls_renderer_dates: function (fldName, values)\r",
                    "{var cls=\"\", dt, sel, hol, dis, par = this.scope.parent, cust;\r",
                    "    dt = values['dt_'+fldName];\r",
                    "    hol = values['isHoliday_'+fldName];\r",
                    "    dis = values['isDisabled_'+fldName];\r",
                    "    cust = '';  // values['customCls_'+fldName]; \r",
                    "\r",
                    "    if (values.rowType === 'H') {\r",
                    "    cls = cls + ' calendarpicker-header';}  \r",
                    "    else if (Ext.isEmpty(dt)) {} // do nothing for empty dates\r",
                    "    else {\r",
                    "        sel = (par.getSelDtArr().indexOf(Ext.Date.format(dt, 'Y-m-d'))>-1);\r",
                    "        if (Ext.Date.format(dt, 'w')==='0' || Ext.Date.format(dt, 'w')==='6') {\r",
                    "            cls = cls+' calendarpicker-weekend';\r",
                    "        }   \r",
                    "        if (hol){cls = cls+' calendarpicker-holiday';}\r",
                    "        if (!Ext.isEmpty(cust)) {cls = cls + ' ' + cust;}  \r",
                    "        if (!Ext.isEmpty(this.scope.todayDt)){\r",
                    "            if (this.scope.todayDt === Ext.Date.format(dt, 'Y-m-d')) {\r",
                    "                cls = cls+' calendarpicker-today';\r",
                    "            }\r",
                    "        }     \r",
                    "        if (dis){cls = cls+' calendarpicker-disabled';}\r",
                    "        if (sel){cls = cls+' calendarpicker-selected';}\r",
                    "    }\r",
                    "\r",
                    "    return (\"calendarpicker-days\" + cls);\r",
                    "}           \r",
                    "};\r",
                    "\r",
                    "\r",
                    "\r",
                    "categColumns = [\r",
                    "{\r",
                    "dataIndex: 'month',\r",
                    "width: '10%',\r",
                    "categCss: 'matrix-month-img',\r",
                    "renderer: 'this.renderer_month_img(values)'\r",
                    "},\r",
                    "{\r",
                    "dataIndex: 'month',\r",
                    "width: '80%',\r",
                    "categCss: 'calendarpicker-month',\r",
                    "renderer: 'this.renderer_month(values)'\r",
                    "},\r",
                    "{\r",
                    "dataIndex: 'month',\r",
                    "width: '3.5em',\r",
                    "categCss: 'matrix-month-gotoToday',\r",
                    "renderer: 'this.renderer_month_gotoToday(values)'\r",
                    "}   \r",
                    "];\r",
                    "\r",
                    "monthView.setMaxWidth('50em');\r",
                    "\r",
                    "\r",
                    "var getDts = Ext.create('widget.calendarpicker', {\r",
                    "customCls : ['calendarpicker-matrix-month'],   \r",
                    "itemId: 'myMonth' ,\r",
                    "selectMode: 'NONE',\r",
                    "itemHeight: 16,\r",
                    "variableHeights: true,\r",
                    "backMonths: backMonths,\r",
                    "forwardMonths: forwardMonths,\r",
                    "returnItem: monthView,\r",
                    "enableQuickDaySelection: true,\r",
                    "disableExpandCollapse: true,     \r",
                    "hideTitleBar: true,\r",
                    "includeFooter: false,\r",
                    "categColumns: categColumns,\r",
                    "renderers: myRend,    \r",
                    "customDateTypes: customDateTypes,    \r",
                    "includeCustomDatesLegend: false\r",
                    "});\r",
                    "\r",
                    "\r",
                    "monthView.add(getDts);\r",
                    "matrixView.setActiveItem(monthView);\r",
                    "matrixView.down('#matrixViewSegBtn').setPressedButtons([1]);\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "a30a3ede-31d4-44d1-938b-3b6ec2fc856a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createDayCalendar",
                "designer|params": [
                    "returnItem",
                    "dateStr",
                    "backMonths",
                    "forwardMonths",
                    "dayView"
                ],
                "implHandler": [
                    "// Code for displaying day view calendar\r",
                    "\r",
                    "var customDateTypes = [\r",
                    "{\r",
                    "    customType: 'holiday',\r",
                    "    customDescr: 'Holiday',\r",
                    "    useCustomDtArr: false,\r",
                    "    storeId: 'optionDates',\r",
                    "    priority: 1,\r",
                    "    disabled: false,\r",
                    "    cls: 'calendarpicker-holiday'\r",
                    "}\r",
                    "];\r",
                    "\r",
                    "categColumns = [\r",
                    "{\r",
                    "    dataIndex: 'month',\r",
                    "    width: '20%',\r",
                    "    categCss: 'matrix-month-img',\r",
                    "    renderer: 'this.renderer_month_img(values)'\r",
                    "},\r",
                    "{\r",
                    "    dataIndex: 'month',\r",
                    "    width: '60%',\r",
                    "    categCss: 'calendarpicker-month',\r",
                    "    renderer: 'this.renderer_month(values)'\r",
                    "},\r",
                    "{\r",
                    "    dataIndex: 'month',\r",
                    "    width: '3.5em',\r",
                    "    categCss: 'matrix-month-gotoToday',\r",
                    "    renderer: 'this.renderer_month_gotoToday(values)'\r",
                    "}   \r",
                    "];\r",
                    "\r",
                    "var myRend = {renderer_month_img: function (values){return '';},\r",
                    "    renderer_month_values: function (values){return (Ext.os.is.Phone ? values.month + ' ' + values.year : '');},              \r",
                    "    renderer_month_gotoToday: function (values){return 'Today';}};    \r",
                    "\r",
                    "\r",
                    "    var selDts=(Ext.isEmpty(dateStr) ? [] : [dateStr]);\r",
                    "\r",
                    "\r",
                    "var getDts = Ext.create('widget.calendarpicker', {\r",
                    "    customCls : ['calendarpicker-matrix-day'],    \r",
                    "    itemId: 'myDay' ,\r",
                    "    selectMode: 'NONE',\r",
                    "    backMonths: backMonths,\r",
                    "    forwardMonths: forwardMonths,\r",
                    "    itemHeight: 16,\r",
                    "    variableHeights: true,    \r",
                    "    selDtArr: selDts,    \r",
                    "    returnItem: dayView,\r",
                    "    enableQuickDaySelection: true,\r",
                    "    disableExpandCollapse: true,      \r",
                    "    hideTitleBar: true,\r",
                    "    includeFooter: false,\r",
                    "    disableListScroll: true,\r",
                    "    categColumns: categColumns,\r",
                    "    renderers: myRend,\r",
                    "    customDateTypes: customDateTypes,    \r",
                    "    includeCustomDatesLegend: false,\r",
                    "    maxWidth: '17em'  // applied here for phones\r",
                    "});\r",
                    "\r",
                    "return getDts;"
                ]
            },
            "designerId": "59988506-e6f3-450c-87a4-95a057d91b80"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "processDayViewCategTap",
                "designer|params": [
                    "me, list, index, target, record, e"
                ],
                "implHandler": [
                    "// Process tap of MonthView header (aka category row) tap\r",
                    "var tgt = e.getTarget(null,null,true);\r",
                    "var today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);\r",
                    "var todayDt = Ext.Date.format(today, 'Y-m-d');\r",
                    "var thisYear = Ext.Date.format(today, 'Y');\r",
                    "var yearMoCurr = record.get('year')+record.get('mo');\r",
                    "\r",
                    "if (tgt.hasCls('matrix-month-img')) {\r",
                    "    // Launch year selector code\r",
                    "    var yearMoSel = Ext.create('widget.yearMonthSelect', {\r",
                    "        itemId: 'matrix_day_yearMoSel',\r",
                    "        yearInit: thisYear,\r",
                    "        yearMoCurr: yearMoCurr,\r",
                    "        backYears: 2,\r",
                    "        forwardYears: 10\r",
                    "    });\r",
                    "    yearMoSel.showBy(tgt);\r",
                    "} \r",
                    "else if (tgt.hasCls('matrix-month-gotoToday')) {\r",
                    "    me.parent.newBackMonths=0;\r",
                    "    me.parent.newforwardMonths=0;\r",
                    "    me.fireEvent('dateSelected', me.parent, todayDt, today);\r",
                    "}         \r",
                    "else {\r",
                    "    // do nothing\r",
                    "}    \r",
                    ""
                ]
            },
            "designerId": "3318bb9d-1b1f-4b6a-a69b-ae66c157aa98"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDay_YearMoSel",
                "designer|params": [
                    "yearMoSelPicker",
                    "yearMoSel"
                ],
                "implHandler": [
                    "// Handle user selection of Year+Month for Day view\r",
                    "\r",
                    "var backMonths = yearMoSelPicker.getBackMonths();\r",
                    "var forwardMonths = yearMoSelPicker.getForwardMonths();\r",
                    "var firstSelDt = yearMoSelPicker.getFirstSelDt();\r",
                    "\r",
                    "yearMoSelPicker.destroy();\r",
                    "\r",
                    "var matrixView = (Ext.os.is.Phone ? this.getMatrixViewPhone() : this.getMatrixView());\r",
                    "\r",
                    "var calendarpicker = matrixView.down('#myDay');\r",
                    "var dateStr = Ext.Date.format(firstSelDt, 'Y-m-d');\r",
                    "\r",
                    "calendarpicker.newBackMonths = backMonths;\r",
                    "calendarpicker.newForwardMonhs = forwardMonths;\r",
                    "\r",
                    "calendarpicker.fireEvent('dateSelected', calendarpicker, dateStr, firstSelDt);"
                ],
                "name": "yearMoSel",
                "designer|targetType": "Ext.Container",
                "designer|controlQuery": "container#matrix_day_yearMoSel"
            },
            "designerId": "a971ba0b-6879-4524-b702-b926aa9beb3b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "customDayList",
                "designer|params": [
                    "dateStr"
                ],
                "implHandler": [
                    "// Sample custom method to display detail for selected day\r",
                    "var matrixView, dayList, storeId, store, htmlArr=[], i, htmlStr='', date, dateDescr;\r",
                    "\r",
                    "matrixView = (Ext.os.is.Phone ? this.getMatrixViewPhone() : this.getMatrixView());\r",
                    "dayList = matrixView.down('#dayViewListDetail');\r",
                    "\r",
                    "date = Ext.Date.parse(dateStr, 'Y-m-d');\r",
                    "\r",
                    "dateDescr = \r",
                    "'<span style=\"font-size: 1.1em;\">' +\r",
                    "Ext.Date.format(date, 'l') + ', ' + \r",
                    "Ext.Date.format(date, 'F') + ' ' + \r",
                    "Ext.Date.format(date, 'j') + ' ' +\r",
                    "Ext.Date.format(date, 'Y') +\r",
                    "'</span><br><HR>';\r",
                    "\r",
                    "\r",
                    "// Search if optionDates store for Holiday description  (can be any custom store)\r",
                    "storeId = 'optionDates';\r",
                    "store = Ext.data.StoreManager.getByKey(storeId);\r",
                    "if (!Ext.isEmpty(store)){\r",
                    "    // Loop through store and update customDtArrMod[] for matching rows for current customType\r",
                    "    store.each(function (item, index, length) {\r",
                    "        var htmlDescr = (Ext.isEmpty(item.get('descr')) ? '' : item.get('descr'));\r",
                    "        if (item.get('customType')==='holiday' && item.get('dateStr')===dateStr) {\r",
                    "            htmlArr.push({descr: htmlDescr});\r",
                    "        }\r",
                    "    });           \r",
                    "}\r",
                    "\r",
                    "for (i=0; i<htmlArr.length; i++) {\r",
                    "    htmlStr = (Ext.isEmpty(htmlStr) ? '' : '<br>') + htmlArr[i].descr;\r",
                    "}\r",
                    "\r",
                    "htmlStr = Ext.isEmpty(htmlStr) ? 'No details for selected day...' : htmlStr;\r",
                    "dayList.setHtml((Ext.os.is.Phone ? dateDescr : '')+htmlStr);"
                ]
            },
            "designerId": "00f32dea-5e9e-4bc5-802f-17ab50e5e2cc"
        }
    ]
}