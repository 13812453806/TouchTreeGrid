/*
 * File: app/controller/MyController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.MyController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            overlayPanel: {
                autoCreate: true,
                selector: 'overlayPanel',
                xtype: 'overlayPanel'
            },
            dateexamples: {
                selector: 'dateexamples',
                xtype: 'dateexamples'
            }
        },

        control: {
            "container": {
                checkin: 'onCheckin',
                checkout: 'onCheckout',
                checkin2: 'onCheckin2',
                multisel_btn: 'onMultisel_btn',
                lookup_btn: 'onLookup_btn',
                filter_btn: 'onFilter_btn'
            },
            "container#calendar_checkin": {
                calendarClosed: 'onCheckInClosed'
            },
            "container#calendar_checkout": {
                calendarClosed: 'onCheckOutClosed'
            },
            "container#calendar_checkin2": {
                calendarClosed: 'onCheckin2Closed'
            },
            "container#calendar_multi": {
                calendarClosed: 'onMultiselClosed'
            },
            "container#calendar_lookup": {
                dateSelected: 'onContainerDateSelected',
                calendarClosed: 'onLookupClosed'
            },
            "container#calendar_filter": {
                calendarClosed: 'onFilterClosed'
            }
        }
    },

    onCheckin: function(container) {
        var returnItem = this.getDateexamples().down('#example1');
        var lastSelDt = returnItem.down('#checkin_btn').lastSelectedDate;

        var selDts=(Ext.isEmpty(lastSelDt) ? [] : [lastSelDt]), disableDts=[];
        var checkOutDt = returnItem.down('#checkout_btn').lastSelectedDate;
        if (!Ext.isEmpty(checkOutDt)) {
            // disabled checkkou date if defined
            selDts.push(checkOutDt);
            disableDts.push(checkOutDt);

        }

        var getDts = Ext.create('widget.calendarpicker', {
            title : 'Choose Check In',
            itemId : 'calendar_checkin',
            customCls : ['calendarpicker-kayak'],
            selectMode: 'SINGLE',
            backMonths: 0,
            forwardMonths: 12,
            autoCollapseMonthsPriorToMinSelDt: true,
            useIconsForExpCollapse: false,
            disablePastDates: true,
            holidayDtArr: ['2013-01-01', '2013-01-21', '2013-02-18', '2013-05-27', '2013-07-04', '2013-09-02', '2013-11-28', '2013-12-25', '2014-01-01', '2014-01-20', '2014-02-17'],
            returnItem: returnItem,
            selDtArr: selDts,
            disableDtArr: disableDts,
            singleExpand: true,
            defaultCollapseLevel: 1,

            height: '100%',
            width: '100%'
        });

        var overPnl = this.getOverlayPanel();
        overPnl.add(getDts);
        overPnl.showBy(container);



    },

    onCheckInClosed: function(calendarpicker) {
        var selDts = calendarpicker.getSelDtArr();
        var lastSelDt = calendarpicker.getLastSelectedDate();
        if (!Ext.isEmpty(lastSelDt)) {
            var returnItem=calendarpicker.getReturnItem();
            var day = Ext.Date.parse(lastSelDt, 'Y-m-d');

            var day_html = returnItem.down('#checkin_day');
            day_html.setHtml(Ext.Date.format(day, 'j')); 
            day_html.addCls('kayak-button-day');
            day_html.removeCls('kayak-button-select');

            var other_html = returnItem.down('#checkin_dayname_month');
            other_html.setHtml(Ext.Date.format(day, 'D')+'<br>'+Ext.Date.format(day, 'M')); 

            returnItem.down('#checkin_btn').lastSelectedDate = lastSelDt;

            // clear checkout date if new checkin date is changed to after it
            var out = returnItem.down('#checkout_btn');

            if (out) {
                day_html = out.down('#checkout_day');        
                if (out.lastSelectedDate < lastSelDt) {   
                    out.lastSelectedDate = '';
                    day_html.setHtml('Select');
                    day_html.addCls('kayak-button-select');

                    other_html = out.down('#checkout_dayname_month');
                    other_html.setHtml(''); 
                } else {
                    if (!Ext.isEmpty(out.lastSelectedDate)) {
                        //       day_html.removeCls('kayak-button-select');
                    }
                }
            }
        }
        var overPnl = this.getOverlayPanel();
        overPnl.removeAll(true, true);  // remove all items from DOM 
        overPnl.hide();
    },

    onCheckout: function(container) {
        var returnItem = this.getDateexamples().down('#example1');
        var lastSelDt = returnItem.down('#checkout_btn').lastSelectedDate;

        var back=0, fwd=12, selDts=(Ext.isEmpty(lastSelDt) ? [] : [lastSelDt]), disableDts=[];
        var checkInDt = returnItem.down('#checkin_btn').lastSelectedDate;
        if (!Ext.isEmpty(checkInDt)) {
            // disabled all dates on and prior to check in date (for that month)
            // and mark checkin date as selected
            selDts.push(checkInDt);

            var inActDt = Ext.Date.parse(checkInDt, 'Y-m-d');
            var inFirstDt = Ext.Date.clearTime(Ext.Date.getFirstDateOfMonth(inActDt), true);

            var today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);
            var currFirstDt = Ext.Date.clearTime(Ext.Date.getFirstDateOfMonth(today), true);

            var modiff = Ext.Date.diff(currFirstDt, inFirstDt, Ext.Date.MONTH);
            back = -1*modiff;

            var tmpDt = inActDt, tmpDt2;
            do {
                disableDts.push(Ext.Date.format(tmpDt, 'Y-m-d'));

                tmpDt2 = Ext.Date.clone(tmpDt);
                tmpDt = Ext.Date.add(tmpDt, Ext.Date.DAY, -1);  // next day
                if (Ext.Date.format(tmpDt2, 'Y-m-d')===Ext.Date.format(tmpDt, 'Y-m-d')) {
                    // Correct for day light savings changes were add() method only adds 23 hours
                    tmpDt = Ext.Date.add(tmpDt, Ext.Date.DAY, -1);  // next day
                }
                Ext.Date.clearTime(tmpDt);        

            } while (tmpDt >= inFirstDt);
        }



        var getDts = Ext.create('widget.calendarpicker', {
            //   xtype: 'calendarpicker',
            title : 'Choose Check Out',
            itemId : 'calendar_checkout',
            customCls : ['calendarpicker-kayak'],
            selectMode: 'SINGLE',
            backMonths: back,
            forwardMonths: fwd,
            useIconsForExpCollapse: false,
            disablePastDates: true,    
            holidayDtArr: ['2013-01-01', '2013-01-21', '2013-02-18', '2013-05-27', '2013-07-04', '2013-09-02', '2013-11-28', '2013-12-25', '2014-01-01', '2014-01-20', '2014-02-17'],
            includeCustomFooterItems: false,
            returnItem: returnItem,
            selDtArr : selDts,
            disableDtArr: disableDts,
            height: '100%',
            width: '100%'
        });

        var overPnl = this.getOverlayPanel();
        overPnl.add(getDts);


        overPnl.showBy(container);


    },

    onCheckOutClosed: function(calendarpicker) {
        var selDts = calendarpicker.getSelDtArr();
        var lastSelDt = calendarpicker.getLastSelectedDate();
        if (!Ext.isEmpty(lastSelDt)) {
            var returnItem=calendarpicker.getReturnItem();
            var day = Ext.Date.parse(lastSelDt, 'Y-m-d');

            var day_html = returnItem.down('#checkout_day');
            day_html.setHtml(Ext.Date.format(day, 'j')); 
            day_html.addCls('kayak-button-day');
            day_html.removeCls('kayak-button-select');    

            var other_html = returnItem.down('#checkout_dayname_month');
            other_html.setHtml(Ext.Date.format(day, 'D')+'<br>'+Ext.Date.format(day, 'M')); 

            returnItem.down('#checkout_btn').lastSelectedDate = lastSelDt;
        }

        var overPnl = this.getOverlayPanel();
        overPnl.removeAll(true, true);  // remove all items from DOM 
        overPnl.hide();
    },

    onCheckin2: function(container) {
        var returnItem = this.getDateexamples().down('#example2');
        var selDtArr = returnItem.down('#checkin_btn2').selDtArr;

        var selDts=(Ext.isEmpty(selDtArr) ? [] : selDtArr), disableDts=[];

        var getDts = Ext.create('widget.calendarpicker', {
            //     xtype: 'calendarpicker',
            title : 'Check In / Check Out',
            itemId : 'calendar_checkin2',
            customCls : ['calendarpicker-kayak'],
            selectMode: 'RANGE',
            backMonths: 0,
            forwardMonths: 12,
            autoCollapseMonthsPriorToMinSelDt: true,
            useIconsForExpCollapse: true,
            disablePastDates: true,
            holidayDtArr: ['2013-01-01', '2013-01-21', '2013-02-18', '2013-05-27', '2013-07-04', '2013-09-02', '2013-11-28', '2013-12-25', '2014-01-01', '2014-01-20', '2014-02-17'],
            includeCustomFooterItems: true,
            returnItem: returnItem,
            defaultCollapseLevel: 99,
            selDtArr: selDts,
            disableDtArr: disableDts,
            height: '100%',
            width: '100%'
        });

        var overPnl = this.getOverlayPanel();
        overPnl.add(getDts);

        overPnl.showBy(container);


    },

    onCheckin2Closed: function(calendarpicker) {
        //debugger;

        var returnItem=calendarpicker.getReturnItem();
        var day_html = returnItem.down('#checkin_day2');
        var other_html = returnItem.down('#checkin_dayname_month2');
        var day_html2 = returnItem.down('#checkout_day2');
        var other_html2 = returnItem.down('#checkout_dayname_month2');

        var selDts = calendarpicker.getSelDtArr();
        returnItem.down('#checkin_btn2').selDtArr = selDts;

        day_html.removeCls('kayak-button-select');  
        day_html2.removeCls('kayak-button-select');

        if (Ext.isEmpty(selDts)) {
            day_html.setHtml('Select');
            day_html2.setHtml('Select');
            other_html.setHtml(''); 
            other_html2.setHtml(''); 
            day_html.addCls('kayak-button-select');  // show select button
            day_html2.addCls('kayak-button-select');
        } else {       
            var maxDt = Ext.Array.max(selDts);
            var minDt = Ext.Array.min(selDts);   

            var minDay = Ext.Date.parse(minDt, 'Y-m-d');
            var maxDay = Ext.Date.parse(maxDt, 'Y-m-d');


            day_html.setHtml(Ext.Date.format(minDay, 'j')); 
            day_html2.setHtml(Ext.Date.format(maxDay, 'j')); 

            day_html.addCls('kayak-button-day');
            day_html2.addCls('kayak-button-day');


            other_html.setHtml(Ext.Date.format(minDay, 'D')+'<br>'+Ext.Date.format(minDay, 'M')); 
            other_html2.setHtml(Ext.Date.format(maxDay, 'D')+'<br>'+Ext.Date.format(maxDay, 'M'));     
        }    

        var overPnl = this.getOverlayPanel();
        overPnl.removeAll(true, true);  // remove all items from DOM 
        overPnl.hide();
    },

    onMultisel_btn: function(container) {
        var returnItem = this.getDateexamples().down('#example3');
        var selDtArr = returnItem.down('#multisel_btn').selDtArr;
        var initDtArr = ['2013-09-11', '2013-09-17', '2013-11-06'];

        var selDts=(Ext.isEmpty(selDtArr) ? initDtArr : selDtArr), disableDts=[];

        var getDts = Ext.create('widget.calendarpicker', {
            //     xtype: 'calendarpicker',
            title : 'Select Multiple Dates',
            itemId : 'calendar_multi',
            customCls : ['calendarpicker-kayak'],
            selectMode: 'MULTI',
            backMonths: 3,
            forwardMonths: 6,
            autoCollapseMonthsPriorToMinSelDt: true,
            useIconsForExpCollapse: true,
            disablePastDates: false,
            disableWeekends: true,
            disableHolidays: true,
            holidayDtArr: ['2013-01-01', '2013-01-21', '2013-02-18', '2013-05-27', '2013-07-04', '2013-09-02', '2013-11-28', '2013-12-25', '2014-01-01', '2014-01-20', '2014-02-17'],
            includeCustomFooterItems: true,
            returnItem: returnItem,
            defaultCollapseLevel: 1,
            selDtArr: selDts,
            disableDtArr: disableDts,
            height: '100%',
            width: '100%'
        });

        var overPnl = this.getOverlayPanel();
        overPnl.add(getDts);

        overPnl.showBy(container);

    },

    onMultiselClosed: function(calendarpicker) {
        //debugger;

        var returnItem=calendarpicker.getReturnItem();
        var multi_html = returnItem.down('#multisel_dates_html');

        var selDts = calendarpicker.getSelDtArr();
        returnItem.down('#multisel_btn').selDtArr = selDts;

        // sort array, build string and update html
        selDts.sort();
        multi_html.setHtml(selDts.join(', '));

        var overPnl = this.getOverlayPanel();
        overPnl.removeAll(true, true);  // remove all items from DOM 
        overPnl.hide();
    },

    onLookup_btn: function(container) {
        var dateEx = this.getDateexamples();
        var returnItem = dateEx.down('#example4');
        var newcont = dateEx.down('#datePlanner');

        // Save title bar state and rename 
        var appTitle = dateEx.down('#appTitle');
        appTitle.origTitle = appTitle.getTitle()._title;
        appTitle.origUi = appTitle.getUi();
        appTitle.origCls = appTitle.getCls();

        appTitle.setTitle('Custom Calendar');
        appTitle.setUi('light');
        appTitle.setCls('');

        var planner_cal = newcont.down('#planner_cal');


        var holidayDtArr = ['2013-01-01', '2013-01-21', '2013-02-18', '2013-05-27', '2013-07-04', '2013-09-02', '2013-11-28', '2013-12-25', '2014-01-01', '2014-01-20', '2014-02-17'];

        myCustomBtns = {
            xtype: 'segmentedbutton',
            itemId : 'pickerfooterbtns',
            docked : 'right',
            items: [
            {
                xtype: 'button',
                text: 'RETURN',
                iconCls: '',
                cls: 'pickerfooterbtns',
                listeners : {
                    tap: function (button, e, options) {
                        this.up('calendarpicker').customBtns('CANCEL');
                    }
                }
            }
        ]};

        var getDts = Ext.create('widget.calendarpicker', {
            //     xtype: 'calendarpicker',
            hideTitleBar: true,
            itemId : 'calendar_lookup',
            selectMode: 'NONE',
            backMonths: 3,
            forwardMonths: 12,
            useIconsForExpCollapse: false,
            holidayDtArr: holidayDtArr,
            includeCustomFooterItems: true,
            returnItem: returnItem,
            defaultCollapseLevel: 99,
            enableQuickDaySelection: true,
            height: '100%',
            width: '100%',
            customFooterItems: myCustomBtns,
            footerDock: 'top'
        });


        planner_cal.add(getDts);

        dateEx.setActiveItem(newcont);



    },

    onContainerDateSelected: function(calendarpicker, dateStr, date) {

        var dateEx = this.getDateexamples();
        var returnItem = dateEx.down('#example4');
        var plannerDetailText = dateEx.down('#plannerDetailText');

        if (!Ext.isEmpty(plannerDetailText)) {
            plannerDetailText.setHtml(dateStr);
        }

    },

    onLookupClosed: function(calendarpicker) {
        var dateEx = this.getDateexamples();

        var returnItem=calendarpicker.getReturnItem();

        // Restore title bar state
        var appTitle = dateEx.down('#appTitle');
        appTitle.setTitle(appTitle.origTitle);
        appTitle.setUi(appTitle.origUi);
        appTitle.setCls(appTitle.origCls);

        var planner_cal = dateEx.down('#planner_cal');
        var newcont = dateEx.down('#firstSet');
        dateEx.setActiveItem(newcont);
        planner_cal.removeAll(true, true);





    },

    onFilter_btn: function(container) {
        var returnItem = this.getDateexamples().down('#example4');

        var myCategImg = '<img src="./resources/images/ribbon.png" class="christmas-categ-img">';

        var myCustomBtns = [ 
        {
            xtype: 'img',
            src: './resources/images/holly.png',
            cls: 'christmas-img'
        },     
        {
            xtype: 'label',
            html: 'Christmas Calendars',
            cls: 'christmas-label'
        }, 
        {    
            xtype: 'segmentedbutton',
            itemId : 'pickerfooterbtns',
            docked : 'right',
            items: [
            {
                xtype: 'button',
                text: 'RETURN',
                iconCls: '',
                cls: 'pickerfooterbtns',
                listeners : {
                    tap: function (button, e, options) {
                        this.up('calendarpicker').customBtns('CANCEL');
                    }
                }
            }
        ]}
        ];


        var myRend = {renderer_month: function (values)
            {return myCategImg+values.month + ' ' + values.year+myCategImg;},
            renderer_dates: function (fldName, values) {
                var elem=values[fldName];
                hol = values['isHoliday_'+fldName];
                if (hol) {
                    elem = '<img src="./resources/images/christmas_tree.png" >';
                }
            return elem;},             
            cls_renderer_dates: function (fldName, values)
            {var cls="", dt, sel, hol, dis, par = this.scope.parent;
                dt = values['dt_'+fldName];
                hol = values['isHoliday_'+fldName];
                dis = values['isDisabled_'+fldName];

                if (values.rowType === 'H') {}  // do nothing for header rows
                else if (Ext.isEmpty(dt)) {} // do nothing for empty dates

                else if (hol) {
                return 'calendar-tree'; }     
                else {
                    sel = (par.getSelDtArr().indexOf(Ext.Date.format(dt, 'Y-m-d'))>-1);            
                    if (Ext.Date.format(dt, 'w')==='0' || Ext.Date.format(dt, 'w')==='6') {
                        cls = cls+' calendarpicker-weekend';
                    }   
                    if (hol){cls = cls+' calendarpicker-holiday';}
                    if (!Ext.isEmpty(this.scope.todayDt)){
                        if (this.scope.todayDt === Ext.Date.format(dt, 'Y-m-d')) {
                            cls = cls+' calendarpicker-today';
                        }
                    }     
                    if (dis){cls = cls+' calendarpicker-disabled';}
                    if (sel){cls = cls+' calendarpicker-selected';}
                }

                return ("calendarpicker-days" + cls);
            }};

            var myFilt = {
                enabled: true,
                displayNodesWithAllMembersFilteredAsLeafs: true,
                filterFn: function(rowObj) {return (rowObj.month === 'December');}
            };

            var getDts = Ext.create('widget.calendarpicker', {
                //     xtype: 'calendarpicker',
                title : 'Christmas Calendars',
                itemId : 'calendar_filter',
                customCls : ['calendarpicker-christmas'],
                selectMode: 'NONE',
                backMonths: 0,
                forwardMonths: 144,
                useIconsForExpCollapse: false,
                holidayDtArr: ['2013-12-25', '2014-12-25', '2015-12-25', '2016-12-26', '2017-12-25', '2018-12-25', '2019-12-25', '2020-12-25', '2021-12-24', '2022-12-26', '2023-12-25', '2024-12-25', '2025-12-25', '2026-12-25', '2027-12-25'],
                includeCustomFooterItems: true,
                returnItem: returnItem,
                defaultCollapseLevel: 99,
                height: '100%',
                width: '100%',
                customFooterItems: myCustomBtns,
                footerDock: 'top',
                hideExpandCollapseBtns: true,
                disableExpandCollapse: true,
                hideTitleBar: true,
                filter: myFilt,
                renderers: myRend

            });

            var overPnl = this.getOverlayPanel();
            overPnl.add(getDts);

            overPnl.showBy(container);
    },

    onFilterClosed: function(calendarpicker) {

        var returnItem=calendarpicker.getReturnItem();

        var overPnl = this.getOverlayPanel();
        overPnl.removeAll(true, true);  // remove all items from DOM 
        overPnl.hide();
    }

});