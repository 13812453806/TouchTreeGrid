/*
 * File: app/controller/calendarDetailController.js
 *
 * This file was generated by Sencha Architect version 3.0.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CalendarPicker.controller.calendarDetailController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            matrixView: {
                autoCreate: true,
                selector: 'matrixView',
                xtype: 'matrixView'
            },
            matrixViewPhone: {
                autoCreate: true,
                selector: 'matrixViewPhone',
                xtype: 'matrixViewPhone'
            },
            calCont: {
                selector: 'calCont',
                xtype: 'calCont'
            },
            dateexamples: {
                selector: 'dateexamples',
                xtype: 'dateexamples'
            },
            languageSelect: '#languageSelect'
        },

        control: {
            "container": {
                optionDatesMatrix_btn: 'onExample7_MatrixView',
                lookup_btn: 'onExample4_MatrixView',
                nodeItemTap: 'onMonthTap',
                dateSelected: 'onCalendarDayTap'
            },
            "list#calendarlist": {
                itemswipe: 'onListItemSwipe'
            },
            "container#dayView": {
                dayViewSwipe: 'onDayViewSwipe'
            },
            "button#matrixViewBackBtn": {
                tap: 'onMatrixViewBackBtnTap'
            },
            "button#matrixViewYearBtn": {
                tap: 'onYearViewTap'
            },
            "button#matrixViewMonthBtn": {
                tap: 'onMonthViewTap'
            },
            "button#matrixViewListBtn": {
                tap: 'onListViewTap'
            },
            "button#matrixViewDayBtn": {
                tap: 'onDayViewTap'
            },
            "container#matrix_month_yearMoSel": {
                yearMoSel: 'onMonth_YearMoSel'
            },
            "container#matrix_day_yearMoSel": {
                yearMoSel: 'onDay_YearMoSel'
            }
        }
    },

    onExample7_MatrixView: function(container) {
        if(Ext.os.is.Phone) {
            Ext.Msg.alert('Tablet-only example...');
            return;
        }

        var languageSelect = this.getLanguageSelect();

        var dateEx = this.getDateexamples();
        var returnItem = dateEx.down('#example8');

        var newcont = this.getMatrixView();

        newcont.down('#matrixViewLabel').setHtml('Options Matrix View Example');
        newcont.down('#matrixViewSegBtn').setHidden(true);
        newcont.down('#yearView').setMaxWidth('40em');

        var yearView = newcont.down('#yearView');

        var customDateTypes = [
        {
            customType: 'holiday',
            customDescr: 'Holiday',
            useCustomDtArr: false,
            storeId: 'optionDates',
            priority: 4,
            disabled: false,
            cls: 'optionDates-holiday'
        },
        {
            customType: 'stopTrading',
            customDescr: 'Stop Trading',
            useCustomDtArr: false,
            storeId: 'optionDates',
            priority: 2,
            disabled: false,
            cls: 'optionDates-stopTrading'
        },
        {
            customType: 'optionsExpire',
            customDescr: 'Options Expire',
            useCustomDtArr: false,
            storeId: 'optionDates',
            priority: 1,
            disabled: false,
            cls: 'optionDates-optionsExpire'
        },
        {
            customType: 'quarterlyExpiration',
            customDescr: 'Quarterly Expiration',
            useCustomDtArr: false,
            storeId: 'optionDates',
            priority: 3,
            disabled: false,
            cls: 'optionDates-quarterlyExpiration'
        }
        ];

        var getDts = Ext.create('widget.calendarpicker', {
            itemId : 'calendar_optionMatrixDates',
            customCls : ['calendarpicker-optionDates'],
            selectMode: 'NONE',
            backMonths: 0,
            forwardMonths: 6,
            itemHeight: 24,
            variableHeights: true,
            useIconsForExpCollapse: false,
            holidayDtArr: [],
            returnItem: returnItem,
            customDateTypes: customDateTypes,
            includeCustomDatesLegend: true,

            // configs specific to matrix view follow
            hideTitleBar: true,
            includeFooter: false,
            matrixView: true,
            matrixCols: 3,
            matrixRows: 99,
            matrixContainer: yearView,
            matrixItemHeight: '12.5em',
            matrixItem6WeekHeight: '14em',

            // Language overridable configs
            monthsToInsertPullText: (Ext.isEmpty(languageSelect.monthsToInsertPullText) ? 'Pull to Insert Months...' : languageSelect.monthsToInsertPullText),
            monthsToInsertRefreshText: (Ext.isEmpty(languageSelect.monthsToInsertRefreshText) ? 'Release to Insert Months...' : languageSelect.monthsToInsertRefreshText),
            monthsToInsertLastUpdatedText: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedText) ? 'Last Updated:&nbsp;' : languageSelect.monthsToInsertLastUpdatedText),
            monthsToInsertLastUpdatedDateFormat: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedDateFormat) ? 'm/d/Y h:iA' : languageSelect.monthsToInsertLastUpdatedDateFormat),
            monthsToInsertLoadedText: (Ext.isEmpty(languageSelect.monthsToInsertLoadedText) ? 'Loaded.' : languageSelect.monthsToInsertLoadedText),
            monthsToInsertLoadingText: (Ext.isEmpty(languageSelect.monthsToInsertLoadingText) ? 'Loading...' : languageSelect.monthsToInsertLoadingText),
            monthsToAppendText: (Ext.isEmpty(languageSelect.monthsToAppendText) ? 'Append more Months...' : languageSelect.monthsToAppendText),
            todayText: (Ext.isEmpty(languageSelect.todayText) ? 'Today' : languageSelect.todayText),
            longDayFormat: (Ext.isEmpty(languageSelect.longDayFormat) ? 'F d, Y' : languageSelect.longDayFormat),
            monthYearFormat: (Ext.isEmpty(languageSelect.monthYearFormat) ? 'F Y' : languageSelect.monthYearFormat),
            startDay: (Ext.isEmpty(languageSelect.startDay) ? 0 : languageSelect.startDay),
            weekendIndexArr: (Ext.isEmpty(languageSelect.weekendIndexArr) ? [0,6] : languageSelect.weekendIndexArr),

            allowMatrixMonthAdditions:true,
            monthsToAppend: 6
        });


        Ext.Viewport.add(newcont);

        Ext.Viewport.setActiveItem(newcont);

    },

    onExample4_MatrixView: function(container) {
        this.processDetailCalendar();
    },

    onMonthTap: function(me, list, index, target, record, e) {
        // Used for multiple purposes:
        //  1) Tap month header on year view to navigate to month view
        //  2) Tap on yearMonthSelector of Month View to change month
        //  3) Tap on yearMonthSelector of Day View to change month
        //  4) Tap on <today> for Month or Day view

        var thisItem = me.parent.getItemId();

        var matrixView = me.up('#matrixView');
        var matrixViewPhone = me.up('#matrixViewPhone');
        var thisView = (Ext.isEmpty(matrixView) ? matrixViewPhone : matrixView);
        if (Ext.isEmpty(thisView)) {return;}  // Ignore other triggered events (fix controlQuery later if possible)

        if (thisItem === 'myMonth') {
            // yearMoSel or Today selection from Month view
            this.processMonthViewCategTap(me, list, index, target, record, e);
            return;
        }
        else if (thisItem === 'myDay') {
            // yearMoSel or Today selection from Day view
            this.processDayViewCategTap(me, list, index, target, record, e);
            return;
        }
        else {if (thisItem.substring(0,6) !== 'myYear') {return;}}

        // Process Month view for selected Month from YearView
        var selMo = me.parent;
        var backMonths = selMo.getBackMonths();
        var forwardMonths = selMo.getForwardMonths();

        this.updateMonthView(backMonths, forwardMonths);




    },

    onListItemSwipe: function(dataview, index, target, record, e, eOpts) {
        // Process item swipe in month or day view calendars to change to next month

        // Ignore other triggered events (fix controlQuery later if possible)
        var matrixView = dataview.up('#matrixView');
        var matrixViewPhone = dataview.up('#matrixViewPhone');
        var thisView = (Ext.isEmpty(matrixView) ? matrixViewPhone : matrixView);
        if (Ext.isEmpty(thisView)) {return;}

        dataview.suspendEvents();

        var monthPkr = dataview.up('#myMonth');
        var dayPkr = dataview.up('#myDay');
        var dir = e.direction;

        var backMonths, newBackMonths, today, firstdt, newFirstDate, newFirstDtStr;

        if (!Ext.isEmpty(monthPkr)) {
            // Handle swipe from Month view
            backMonths = monthPkr.getBackMonths();
            newBackMonths = backMonths + (e.direction==='left' ? -1 : 1);
            this.updateMonthView(newBackMonths, newBackMonths*-1);

        }

        if (!Ext.isEmpty(dayPkr)) {
            // Handle swipe from Day view within the month calendar
            backMonths = dayPkr.getBackMonths();
            newBackMonths = backMonths + (e.direction==='left' ? -1 : 1);

            dayPkr.newBackMonths = newBackMonths;
            dayPkr.newForwardMonths = newBackMonths*-1;

            today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);

            firstdt = Ext.Date.clearTime(Ext.Date.getFirstDateOfMonth(today), true);

            newFirstDate = Ext.Date.clearTime(Ext.Date.add(firstdt, Ext.Date.MONTH, -1*newBackMonths), true);
            newFirstDtStr = Ext.Date.format(newFirstDate, 'Y-m-d');

            dayPkr.fireEvent('dateSelected', dayPkr, newFirstDtStr, newFirstDate);
        }

        dataview.resumeEvents(true);



    },

    onDayViewSwipe: function(container, e) {
        // Used to trap swipe in day view list container to change to next day

        container.suspendEvents();


        var dayPkr = container.down('#myDay');
        var dir = e.direction;

        var backMonths, newBackMonths, today, firstdt, newFirstDate, newFirstDtStr, selDtStr, selDt;

        selDtStr = dayPkr.getSelDtArr()[0];

        if (!Ext.isEmpty(dayPkr) && !Ext.isEmpty(selDtStr)) {
            // Handle swipe from Day view within the list container
            // Get current day first
            selDt = Ext.Date.parse(selDtStr, 'Y-m-d');
            newFirstDate = Ext.Date.clearTime(Ext.Date.add(selDt, Ext.Date.DAY, (dir==='left' ? 1 : -1)), true);
            newFirstDtStr = Ext.Date.format(newFirstDate, 'Y-m-d');

            if (Ext.Date.format(newFirstDate, 'm') === Ext.Date.format(selDt, 'm')) {
                // moving one day in same month
                // dateSelected event will handle this
            }
            else {
                // moving to different month

                backMonths = dayPkr.getBackMonths();
                newBackMonths = backMonths + (dir==='left' ? -1 : 1);

                dayPkr.newBackMonths = newBackMonths;
                dayPkr.newForwardMonths = newBackMonths*-1;
            }

            dayPkr.fireEvent('dateSelected', dayPkr, newFirstDtStr, newFirstDate);
        }

        container.resumeEvents(true);


    },

    onCalendarDayTap: function(calendarpicker, dateStr, date) {
        // Year, Month and Day calendars fire dateSelected event to navigate to appropriate day in Day View

        var itemId = calendarpicker.getItemId();  // for Year day select

        var fromYear = (itemId.substring(0,6) === 'myYear');
        var fromMonth = (itemId === 'myMonth');
        var fromDay = (itemId === 'myDay');

        if (!fromYear && !fromMonth && !fromDay) {return;}

        // Process Day view for selected Day

        var matrixView = (Ext.os.is.Phone ? this.getMatrixViewPhone() : this.getMatrixView());
        var dayView = matrixView.down('#dayView');
        var backMonths, forwardMonths;
        var today, firstdt, selFirstdt;

        if (!Ext.os.is.Phone) {
            dayView.down('#dayViewBigDay').setHtml(Ext.Date.format(date, 'j'));
            dayView.down('#dayViewDayName').setHtml(Ext.Date.format(date, 'l') +
            ', ' + Ext.Date.format(date, 'F') +
            ' ' + Ext.Date.format(date, 'j') +
            '<br>' + Ext.Date.format(date, 'Y'));
        }

        this.customDayList(dateStr);

        backMonths = calendarpicker.getBackMonths();
        forwardMonths = calendarpicker.getForwardMonths();

        if (fromYear && Ext.os.is.Phone) {
            // Compute number of months back from today and selected date
            today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);
            firstdt = Ext.Date.clearTime(Ext.Date.getFirstDateOfMonth(today), true);
            selFirstdt = Ext.Date.clearTime(Ext.Date.getFirstDateOfMonth(date), true);
            backMonths = Ext.Date.diff(selFirstdt, firstdt, Ext.Date.MONTH);
            forwardMonths = backMonths*-1;
        }

        var selDts;
        if (fromDay) {
            if (!Ext.isEmpty(calendarpicker.newBackMonths) && calendarpicker.newBackMonths != backMonths) {
                selDts = [dateStr];
                backMonths = calendarpicker.newBackMonths;
                forwardMonths = calendarpicker.newForwardMonths;
            } else {
                selDts = [dateStr];
                calendarpicker.setSelDtArr(selDts);
                calendarpicker.down('#calendarlist').refresh();
                return;
            }
        }
        var returnItem = dayView.down('#dayViewMoCal');
        returnItem.removeAll(true, true); // clean up from prior navigation ... may need to customize this


        var getDts = this.createDayCalendar(returnItem, dateStr, backMonths, forwardMonths, dayView);

        returnItem.add(getDts);
        matrixView.setActiveItem(dayView);
        matrixView.down('#matrixViewSegBtn').setPressedButtons([3]);





    },

    onMatrixViewBackBtnTap: function(button, e, eOpts) {
        // Closes Matrix View and returns to calling panel
        var matrixView = button.up('#matrixView');
        var matrixViewPhone = button.up('#matrixViewPhone');
        var thisView = (Ext.isEmpty(matrixView) ? matrixViewPhone : matrixView);
        if (Ext.isEmpty(thisView)) {return;}

        Ext.Viewport.remove(thisView);

        Ext.Viewport.setActiveItem(0);


    },

    onYearViewTap: function(button, e, eOpts) {
        var matrixView = (Ext.os.is.Phone ? this.getMatrixViewPhone() : this.getMatrixView());
        matrixView.setActiveItem(matrixView.down('#yearView'));
    },

    onMonthViewTap: function(button, e, eOpts) {
        var matrixView = (Ext.os.is.Phone ? this.getMatrixViewPhone() : this.getMatrixView());
        var monthView = matrixView.down('#monthView');
        var dayCalView = matrixView.down('#dayView').down('#myDay');

        if (Ext.isEmpty(monthView.down('#calendar'))) {
            // Only create calendar for current month if not previously navigated to
            this.updateMonthView(0, 0);
        }
        else if (!Ext.isEmpty(dayCalView)) {
            // Navigate to same month as in Day view already
            this.updateMonthView(dayCalView.getBackMonths(), dayCalView.getForwardMonths());
        }
        else {
            matrixView.setActiveItem(matrixView.down('#monthView'));
        }

    },

    onListViewTap: function(button, e, eOpts) {
        // Add logic later to update List view based on context when pressing List tab
        var matrixView = (Ext.os.is.Phone ? this.getMatrixViewPhone() : this.getMatrixView());
        matrixView.setActiveItem(matrixView.down('#listView'));
    },

    onDayViewTap: function(button, e, eOpts) {
        var matrixView = (Ext.os.is.Phone ? this.getMatrixViewPhone() : this.getMatrixView());

        var dayView = matrixView.down('#dayView');
        var returnItem = dayView.down('#dayViewMoCal');

        if (Ext.isEmpty(returnItem.down('#calendar'))) {
            var date = Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);
            var selDts = [Ext.Date.format(date, 'Y-m-d')];

            if (!Ext.os.is.Phone) {
                dayView.down('#dayViewBigDay').setHtml(Ext.Date.format(date, 'j'));
                dayView.down('#dayViewDayName').setHtml(Ext.Date.format(date, 'l') +
                ', ' + Ext.Date.format(date, 'F') +
                ' ' + Ext.Date.format(date, 'j') +
                '<br>' + Ext.Date.format(date, 'Y'));
            }

            this.customDayList(selDts[0]);

            var getDts = this.createDayCalendar(returnItem, selDts[0], 0, 0, dayView);

            returnItem.add(getDts);
        }
        matrixView.setActiveItem(matrixView.down('#dayView'));
    },

    onMonth_YearMoSel: function(yearMoSelPicker, yearMoSel) {
        // Handle user selection of Year+Month for Month view

        var backMonths = yearMoSelPicker.getBackMonths();
        var forwardMonths = yearMoSelPicker.getForwardMonths();

        yearMoSelPicker.destroy();

        this.updateMonthView(backMonths, forwardMonths);




    },

    onDay_YearMoSel: function(yearMoSelPicker, yearMoSel) {
        // Handle user selection of Year+Month for Day view

        var backMonths = yearMoSelPicker.getBackMonths();
        var forwardMonths = yearMoSelPicker.getForwardMonths();
        var firstSelDt = yearMoSelPicker.getFirstSelDt();

        yearMoSelPicker.destroy();

        var matrixView = (Ext.os.is.Phone ? this.getMatrixViewPhone() : this.getMatrixView());

        var calendarpicker = matrixView.down('#myDay');
        var dateStr = Ext.Date.format(firstSelDt, 'Y-m-d');

        calendarpicker.newBackMonths = backMonths;
        calendarpicker.newForwardMonhs = forwardMonths;

        calendarpicker.fireEvent('dateSelected', calendarpicker, dateStr, firstSelDt);
    },

    processDetailCalendar: function() {
        // Launch MatrixView

        if(Ext.os.is.Phone) {
            this.processDetailCalendarPhone();
            return;
        }

        var languageSelect = this.getLanguageSelect();

        var matrixView = this.getMatrixView();

        matrixView.down('#matrixViewLabel').setHtml('Calendar');
        var yearView = matrixView.down('#yearView');
        yearView.setMaxWidth('50em');
        yearView.setCls('matrix-view-year');


        var customDateTypes = [
        {
            customType: 'holiday',
            customDescr: 'Holiday',
            useCustomDtArr: false,
            storeId: 'optionDates',
            priority: 1,
            disabled: false,
            cls: 'calendarpicker-holiday'
        }
        ];


        var getDts = Ext.create('widget.calendarpicker', {
            customCls : ['calendarpicker-matrix-year'],
            itemId : 'myYear' ,
            selectMode: 'NONE',
            itemHeight: 16,
            variableHeights: true,
            backMonths: 0,
            forwardMonths: 6,
            useIconsForExpCollapse: false,
            returnItem: yearView,
            enableQuickDaySelection: true,
            customDateTypes: customDateTypes,
            includeCustomDatesLegend: true,

            // configs specific to matrix view follow
            hideTitleBar: true,
            includeFooter: false,
            matrixView: true,
            matrixCols: 3,
            matrixRows: 99,
            matrixItemHeight: '10em',
            matrixItem6WeekHeight: '11.5em',
            matrixContainer: yearView,

            // Language overridable configs
            monthsToInsertPullText: (Ext.isEmpty(languageSelect.monthsToInsertPullText) ? 'Pull to Insert Months...' : languageSelect.monthsToInsertPullText),
            monthsToInsertRefreshText: (Ext.isEmpty(languageSelect.monthsToInsertRefreshText) ? 'Release to Insert Months...' : languageSelect.monthsToInsertRefreshText),
            monthsToInsertLastUpdatedText: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedText) ? 'Last Updated:&nbsp;' : languageSelect.monthsToInsertLastUpdatedText),
            monthsToInsertLastUpdatedDateFormat: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedDateFormat) ? 'm/d/Y h:iA' : languageSelect.monthsToInsertLastUpdatedDateFormat),
            monthsToInsertLoadedText: (Ext.isEmpty(languageSelect.monthsToInsertLoadedText) ? 'Loaded.' : languageSelect.monthsToInsertLoadedText),
            monthsToInsertLoadingText: (Ext.isEmpty(languageSelect.monthsToInsertLoadingText) ? 'Loading...' : languageSelect.monthsToInsertLoadingText),
            monthsToAppendText: (Ext.isEmpty(languageSelect.monthsToAppendText) ? 'Append more Months...' : languageSelect.monthsToAppendText),
            longDayFormat: (Ext.isEmpty(languageSelect.longDayFormat) ? 'F d, Y' : languageSelect.longDayFormat),
            monthYearFormat: (Ext.isEmpty(languageSelect.monthYearFormat) ? 'F Y' : languageSelect.monthYearFormat),
            startDay: (Ext.isEmpty(languageSelect.startDay) ? 0 : languageSelect.startDay),
            weekendIndexArr: (Ext.isEmpty(languageSelect.weekendIndexArr) ? [0,6] : languageSelect.weekendIndexArr),

            allowMatrixMonthAdditions:true,
            monthsToAppend: 6,
            monthsToAppendText: 'Append more Months...'
        });


        Ext.Viewport.add(matrixView);

        Ext.Viewport.setActiveItem(matrixView);

    },

    processDetailCalendarPhone: function() {
        var languageSelect = this.getLanguageSelect();

        var matrixView = this.getMatrixViewPhone();

        matrixView.down('#matrixViewLabel').setHtml('Calendar');
        var yearView = matrixView.down('#yearView');
        yearView.setMaxWidth('100%');
        yearView.setCls('matrix-view-year');


        var customDateTypes = [
        {
            customType: 'holiday',
            customDescr: 'Holiday',
            useCustomDtArr: false,
            storeId: 'optionDates',
            priority: 1,
            disabled: false,
            cls: 'calendarpicker-holiday'
        }
        ];


        var getDts = Ext.create('widget.calendarpicker', {
            customCls : ['calendarpicker-matrix-year'],
            itemId : 'myYear',
            selectMode: 'NONE',
            itemHeight: 16,
            variableHeights: true,
            backMonths: 0,
            forwardMonths: 12,
            useIconsForExpCollapse: false,
            returnItem: yearView,
            includeCustomFooterItems: false,
            enableQuickDaySelection: true,
            customDateTypes: customDateTypes,
            includeCustomDatesLegend: true,

            // Language overridable configs
            monthsToInsertPullText: (Ext.isEmpty(languageSelect.monthsToInsertPullText) ? 'Pull to Insert Months...' : languageSelect.monthsToInsertPullText),
            monthsToInsertRefreshText: (Ext.isEmpty(languageSelect.monthsToInsertRefreshText) ? 'Release to Insert Months...' : languageSelect.monthsToInsertRefreshText),
            monthsToInsertLastUpdatedText: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedText) ? 'Last Updated:&nbsp;' : languageSelect.monthsToInsertLastUpdatedText),
            monthsToInsertLastUpdatedDateFormat: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedDateFormat) ? 'm/d/Y h:iA' : languageSelect.monthsToInsertLastUpdatedDateFormat),
            monthsToInsertLoadedText: (Ext.isEmpty(languageSelect.monthsToInsertLoadedText) ? 'Loaded.' : languageSelect.monthsToInsertLoadedText),
            monthsToInsertLoadingText: (Ext.isEmpty(languageSelect.monthsToInsertLoadingText) ? 'Loading...' : languageSelect.monthsToInsertLoadingText),
            monthsToAppendText: (Ext.isEmpty(languageSelect.monthsToAppendText) ? 'Append more Months...' : languageSelect.monthsToAppendText),
            longDayFormat: (Ext.isEmpty(languageSelect.longDayFormat) ? 'F d, Y' : languageSelect.longDayFormat),
            monthYearFormat: (Ext.isEmpty(languageSelect.monthYearFormat) ? 'F Y' : languageSelect.monthYearFormat),
            startDay: (Ext.isEmpty(languageSelect.startDay) ? 0 : languageSelect.startDay),
            weekendIndexArr: (Ext.isEmpty(languageSelect.weekendIndexArr) ? [0,6] : languageSelect.weekendIndexArr),

            hideTitleBar: true,
            includeFooter: true,
            maxWidth: '17em'  // applied here for phones

        });

        yearView.add(getDts);

        Ext.Viewport.add(matrixView);

        Ext.Viewport.setActiveItem(matrixView);

    },

    processMonthViewCategTap: function(me, list, index, target, record, e) {
        // Process tap of MonthView header (aka category row) tap
        var tgt = e.getTarget(null,null,true);
        var today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);
        var thisYear = Ext.Date.format(today, 'Y');
        var yearMoCurr = record.get('year')+record.get('mo');

        if (tgt.hasCls('calendarpicker-month')) {
            // LATER display list of months in current year if tapping on month
            //       display list of years if tapping on  year ????
        }

        else if (tgt.hasCls('matrix-month-img')) {
            // Launch year selector code
            var yearMoSel = Ext.create('widget.yearMonthSelect', {
                itemId: 'matrix_month_yearMoSel',
                yearInit: thisYear,
                yearMoCurr: yearMoCurr,
                backYears: 2,
                forwardYears: 12
            });
            yearMoSel.showBy(tgt);
        }
        else if (tgt.hasCls('matrix-month-gotoToday')) {
            this.updateMonthView(0, 0);
        }
        else {
            // do nothing
        }

    },

    updateMonthView: function(backMonths, forwardMonths) {
        // Code for displaying calendar in Month view

        var languageSelect = this.getLanguageSelect();

        var matrixView = this.getMatrixView();
        var monthView = matrixView.down('#monthView');
        monthView.removeAll(true, true); // clean up from prior navigation ... may need to customize this



        var customDateTypes = [
        {
            customType: 'holiday',
            customDescr: 'Holiday',
            useCustomDtArr: false,
            storeId: 'optionDates',
            priority: 1,
            disabled: false,
            cls: 'matrix-month-holiday'
        }
        ];

        var myRend = {  renderer_month_img: function (values){return '';},
            renderer_month_gotoToday: function (values)
            {var par = this.scope.parent;
        return par.config.todayText;},

        // Customize renderer_dates() to display custom date description if applicable
        renderer_dates: function (fldName, values) {
            var elem      = values[fldName];
            if (Ext.isEmpty(elem)) {return;}

            var htmlFldNm = 'customHtml_'+fldName;
            var cssFldNm  = 'customCls_'+fldName;
            var html      = values[htmlFldNm];
            var css       = values[cssFldNm];
            var htmlStr   = '';

            if (!Ext.isEmpty(html)) {
                htmlStr = '<span class=" '+css+' calendarpicker-legend-cls-override">&nbsp;</span>'+
                '<span class=" calendarpicker-legend-cls-html">'+html+'</span>';
            }
        return (elem.toString() + (Ext.isEmpty(htmlStr) ? '' : '<div class=" calendarpicker-days2">'+htmlStr+'</div>'));},

        // Customize cls_renderer_dates() to not render customCls since this is handled above
        cls_renderer_dates: function (fldName, values)
        {var cls="", dt, sel, hol, dis, par = this.scope.parent, cust;
            dt = values['dt_'+fldName];
            hol = values['isHoliday_'+fldName];
            dis = values['isDisabled_'+fldName];
            cust = '';  // values['customCls_'+fldName];

            if (values.rowType === 'H') {
            cls = cls + ' calendarpicker-header';}
            else if (Ext.isEmpty(dt)) {} // do nothing for empty dates
            else {
                sel = (par.getSelDtArr().indexOf(Ext.Date.format(dt, 'Y-m-d'))>-1);
                if (Ext.Date.format(dt, 'w')==='0' || Ext.Date.format(dt, 'w')==='6') {
                    cls = cls+' calendarpicker-weekend';
                }
                if (hol){cls = cls+' calendarpicker-holiday';}
                if (!Ext.isEmpty(cust)) {cls = cls + ' ' + cust;}
                if (!Ext.isEmpty(this.scope.todayDt)){
                    if (this.scope.todayDt === Ext.Date.format(dt, 'Y-m-d')) {
                        cls = cls+' calendarpicker-today';
                    }
                }
                if (dis){cls = cls+' calendarpicker-disabled';}
                if (sel){cls = cls+' calendarpicker-selected';}
            }

            return ("calendarpicker-days" + cls);
        }
        };



        categColumns = [
        {
        dataIndex: 'month',
        width: '10%',
        categCss: 'matrix-month-img',
        renderer: 'this.renderer_month_img(values)'
        },
        {
        dataIndex: 'month',
        width: '80%',
        categCss: 'calendarpicker-month',
        renderer: 'this.renderer_month(values)'
        },
        {
        dataIndex: 'month',
        width: '3.5em',
        categCss: 'matrix-month-gotoToday',
        renderer: 'this.renderer_month_gotoToday(values)'
        }
        ];

        monthView.setMaxWidth('50em');


        var getDts = Ext.create('widget.calendarpicker', {
        customCls : ['calendarpicker-matrix-month'],
        itemId: 'myMonth' ,
        selectMode: 'NONE',
        itemHeight: 16,
        variableHeights: true,
        backMonths: backMonths,
        forwardMonths: forwardMonths,
        returnItem: monthView,
        enableQuickDaySelection: true,
        disableExpandCollapse: true,
        hideTitleBar: true,
        includeFooter: false,
        categColumns: categColumns,

            // Language overridable configs
            monthsToInsertPullText: (Ext.isEmpty(languageSelect.monthsToInsertPullText) ? 'Pull to Insert Months...' : languageSelect.monthsToInsertPullText),
            monthsToInsertRefreshText: (Ext.isEmpty(languageSelect.monthsToInsertRefreshText) ? 'Release to Insert Months...' : languageSelect.monthsToInsertRefreshText),
            monthsToInsertLastUpdatedText: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedText) ? 'Last Updated:&nbsp;' : languageSelect.monthsToInsertLastUpdatedText),
            monthsToInsertLastUpdatedDateFormat: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedDateFormat) ? 'm/d/Y h:iA' : languageSelect.monthsToInsertLastUpdatedDateFormat),
            monthsToInsertLoadedText: (Ext.isEmpty(languageSelect.monthsToInsertLoadedText) ? 'Loaded.' : languageSelect.monthsToInsertLoadedText),
            monthsToInsertLoadingText: (Ext.isEmpty(languageSelect.monthsToInsertLoadingText) ? 'Loading...' : languageSelect.monthsToInsertLoadingText),
            monthsToAppendText: (Ext.isEmpty(languageSelect.monthsToAppendText) ? 'Append more Months...' : languageSelect.monthsToAppendText),
            todayText: (Ext.isEmpty(languageSelect.todayText) ? 'Today' : languageSelect.todayText),
            longDayFormat: (Ext.isEmpty(languageSelect.longDayFormat) ? 'F d, Y' : languageSelect.longDayFormat),
            monthYearFormat: (Ext.isEmpty(languageSelect.monthYearFormat) ? 'F Y' : languageSelect.monthYearFormat),
            startDay: (Ext.isEmpty(languageSelect.startDay) ? 0 : languageSelect.startDay),
            weekendIndexArr: (Ext.isEmpty(languageSelect.weekendIndexArr) ? [0,6] : languageSelect.weekendIndexArr),

        renderers: myRend,
        customDateTypes: customDateTypes,
        includeCustomDatesLegend: false
        });


        monthView.add(getDts);
        matrixView.setActiveItem(monthView);
        matrixView.down('#matrixViewSegBtn').setPressedButtons([1]);




    },

    createDayCalendar: function(returnItem, dateStr, backMonths, forwardMonths, dayView) {
        // Code for displaying day view calendar

        var languageSelect = this.getLanguageSelect();

        var customDateTypes = [
        {
            customType: 'holiday',
            customDescr: 'Holiday',
            useCustomDtArr: false,
            storeId: 'optionDates',
            priority: 1,
            disabled: false,
            cls: 'calendarpicker-holiday'
        }
        ];

        categColumns = [
        {
            dataIndex: 'month',
            width: '20%',
            categCss: 'matrix-month-img',
            renderer: 'this.renderer_month_img(values)'
        },
        {
            dataIndex: 'month',
            width: '60%',
            categCss: 'calendarpicker-month',
            renderer: 'this.renderer_month(values)'
        },
        {
            dataIndex: 'month',
            width: '3.5em',
            categCss: 'matrix-month-gotoToday',
            renderer: 'this.renderer_month_gotoToday(values)'
        }
        ];

        var myRend = {renderer_month_img: function (values){return '';},
            renderer_month_values: function (values){return (Ext.os.is.Phone ? values.month + ' ' + values.year : '');},
            renderer_month_gotoToday: function (values)
            {var par = this.scope.parent;
             return par.config.todayText;}}


        var selDts=(Ext.isEmpty(dateStr) ? [] : [dateStr]);


        var getDts = Ext.create('widget.calendarpicker', {
            customCls : ['calendarpicker-matrix-day'],
            itemId: 'myDay' ,
            selectMode: 'NONE',
            backMonths: backMonths,
            forwardMonths: forwardMonths,
            itemHeight: 16,
            variableHeights: true,
            selDtArr: selDts,
            returnItem: dayView,
            enableQuickDaySelection: true,
            disableExpandCollapse: true,
            hideTitleBar: true,
            includeFooter: false,
            disableListScroll: true,
            categColumns: categColumns,

            // Language overridable configs
            monthsToInsertPullText: (Ext.isEmpty(languageSelect.monthsToInsertPullText) ? 'Pull to Insert Months...' : languageSelect.monthsToInsertPullText),
            monthsToInsertRefreshText: (Ext.isEmpty(languageSelect.monthsToInsertRefreshText) ? 'Release to Insert Months...' : languageSelect.monthsToInsertRefreshText),
            monthsToInsertLastUpdatedText: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedText) ? 'Last Updated:&nbsp;' : languageSelect.monthsToInsertLastUpdatedText),
            monthsToInsertLastUpdatedDateFormat: (Ext.isEmpty(languageSelect.monthsToInsertLastUpdatedDateFormat) ? 'm/d/Y h:iA' : languageSelect.monthsToInsertLastUpdatedDateFormat),
            monthsToInsertLoadedText: (Ext.isEmpty(languageSelect.monthsToInsertLoadedText) ? 'Loaded.' : languageSelect.monthsToInsertLoadedText),
            monthsToInsertLoadingText: (Ext.isEmpty(languageSelect.monthsToInsertLoadingText) ? 'Loading...' : languageSelect.monthsToInsertLoadingText),
            monthsToAppendText: (Ext.isEmpty(languageSelect.monthsToAppendText) ? 'Append more Months...' : languageSelect.monthsToAppendText),
            todayText: (Ext.isEmpty(languageSelect.todayText) ? 'Today' : languageSelect.todayText),
            longDayFormat: (Ext.isEmpty(languageSelect.longDayFormat) ? 'F d, Y' : languageSelect.longDayFormat),
            monthYearFormat: (Ext.isEmpty(languageSelect.monthYearFormat) ? 'F Y' : languageSelect.monthYearFormat),
            startDay: (Ext.isEmpty(languageSelect.startDay) ? 0 : languageSelect.startDay),
            weekendIndexArr: (Ext.isEmpty(languageSelect.weekendIndexArr) ? [0,6] : languageSelect.weekendIndexArr),

            renderers: myRend,
            customDateTypes: customDateTypes,
            includeCustomDatesLegend: false,
            maxWidth: '17em'  // applied here for phones
        });

        return getDts;
    },

    processDayViewCategTap: function(me, list, index, target, record, e) {
        // Process tap of MonthView header (aka category row) tap
        var tgt = e.getTarget(null,null,true);
        var today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);
        var todayDt = Ext.Date.format(today, 'Y-m-d');
        var thisYear = Ext.Date.format(today, 'Y');
        var yearMoCurr = record.get('year')+record.get('mo');

        if (tgt.hasCls('matrix-month-img')) {
            // Launch year selector code
            var yearMoSel = Ext.create('widget.yearMonthSelect', {
                itemId: 'matrix_day_yearMoSel',
                yearInit: thisYear,
                yearMoCurr: yearMoCurr,
                backYears: 2,
                forwardYears: 10
            });
            yearMoSel.showBy(tgt);
        }
        else if (tgt.hasCls('matrix-month-gotoToday')) {
            me.parent.newBackMonths=0;
            me.parent.newforwardMonths=0;
            me.fireEvent('dateSelected', me.parent, todayDt, today);
        }
        else {
            // do nothing
        }

    },

    customDayList: function(dateStr) {
        // Sample custom method to display detail for selected day
        var matrixView, dayList, storeId, store, htmlArr=[], i, htmlStr='', date, dateDescr;

        matrixView = (Ext.os.is.Phone ? this.getMatrixViewPhone() : this.getMatrixView());
        dayList = matrixView.down('#dayViewListDetail');

        date = Ext.Date.parse(dateStr, 'Y-m-d');

        dateDescr =
        '<span style="font-size: 1.1em;">' +
        Ext.Date.format(date, 'l') + ', ' +
        Ext.Date.format(date, 'F') + ' ' +
        Ext.Date.format(date, 'j') + ' ' +
        Ext.Date.format(date, 'Y') +
        '</span><br><HR>';


        // Search if optionDates store for Holiday description  (can be any custom store)
        storeId = 'optionDates';
        store = Ext.data.StoreManager.getByKey(storeId);
        if (!Ext.isEmpty(store)){
            // Loop through store and update customDtArrMod[] for matching rows for current customType
            store.each(function (item, index, length) {
                var htmlDescr = (Ext.isEmpty(item.get('descr')) ? '' : item.get('descr'));
                if (item.get('customType')==='holiday' && item.get('dateStr')===dateStr) {
                    htmlArr.push({descr: htmlDescr});
                }
            });
        }

        for (i=0; i<htmlArr.length; i++) {
            htmlStr = (Ext.isEmpty(htmlStr) ? '' : '<br>') + htmlArr[i].descr;
        }

        htmlStr = Ext.isEmpty(htmlStr) ? 'No details for selected day...' : htmlStr;
        dayList.setHtml((Ext.os.is.Phone ? dateDescr : '')+htmlStr);
    }

});