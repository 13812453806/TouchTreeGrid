{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "models": [
            "Task"
        ],
        "stores": [
            "MenuOptsStore",
            "OverrideStore"
        ],
        "views": [
            "MainContainer",
            "GridDetailPanel",
            "OverrideExampleCont"
        ],
        "designer|userClassName": "CommonController"
    },
    "designerId": "97a4c3a2-9a08-4611-87a1-12b030c85f82",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMenuButtonRelease",
                "implHandler": [
                    "// Use RELEASE event (vs. tap event ... see button handler for #menubtn) for handling button press and prevent default\r",
                    "// browser behaviour which activates underlying elements off TAP event (e.g. if search field or some other component placed underneath)\r",
                    "\r",
                    "\r",
                    "var nav = this.getMenunav();\r",
                    "var closed = nav.isHidden();\r",
                    "\r",
                    "if (!Ext.os.is.Phone) {\r",
                    "    if (closed) {nav.show();}\r",
                    "    else {nav.hide();}\r",
                    "\r",
                    "    var mycont = this.getMenucont();\r",
                    "    if (closed) {mycont.setWidth('80%');}\r",
                    "    else {mycont.setWidth('100%');}\r",
                    "}\r",
                    "else {\r",
                    "    if (closed) {nav.show();}\r",
                    "    var cont = Ext.get('menucont');\r",
                    "\r",
                    "    if (cont.hasCls('out')) {\r",
                    "        cont.removeCls('out');\r",
                    "        cont.addCls('in'); \r",
                    "    } else {\r",
                    "        cont.removeCls('in');    \r",
                    "        cont.addCls('out');          \r",
                    "    }\r",
                    "}"
                ],
                "name": "release",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#menubtn"
            },
            "designerId": "687a8b04-b917-45cb-b277-d968530006af"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMenuOptListSelect",
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var numRecords, gridcont, grid, gridListItemId, text, swap, newcont, idx, menulist,\r",
                    "    cont, menucont, isLeaf, result, swapcont;\r",
                    "\r",
                    "var isPhone = !Ext.isEmpty(Ext.os.is.Phone);  // needed since this function returns either undefined or true\r",
                    "\r",
                    "text = record.get('Text');\r",
                    "isLeaf = record.get('leaf');\r",
                    "\r",
                    "// Treat as new selection below if a leaf and either text changes or even if not for phones (since we are sliding menu again)\r",
                    "var newSelection=(isLeaf && (lastSelectionText !== text || isPhone));\r",
                    "\r",
                    "menucont = commonController.getMenucont();\r",
                    "swapcont = menucont.down('#menucontswap');\r",
                    "menulist = commonController.getMenuopt().down('#menuoptlist');\r",
                    "\r",
                    "if (text === 'Accordion') {\r",
                    "\r",
                    "    result = this.swapCont(tasksController.getAccordionCont(), newSelection);  \r",
                    "    this.showHelp(result.gridcont, (isPhone ? '0px' : '340px'), isPhone);\r",
                    "}\r",
                    "else if (text === 'Task#2') {\r",
                    "    result = this.swapCont(tasksController.getTask2Cont(), newSelection);  \r",
                    "    this.showHelp(result.gridcont, (isPhone ? '0px' : '340px'), isPhone);\r",
                    "    if (isPhone) {Ext.Msg.alert('Collapse disabled!');}   \r",
                    "}\r",
                    "else if (text === 'Task#3') {\r",
                    "    result = this.swapCont(tasksController.getTask3Cont(), newSelection);  \r",
                    "    this.showHelp(result.gridcont, (isPhone ? '0px' : '340px'), isPhone);\r",
                    "    result.grid.getScrollable().getScroller().setDisabled(true);\r",
                    "    if (isPhone) {Ext.Msg.alert('Non-scrolling!');}  \r",
                    "}\r",
                    "else if (text === 'Project #1') {\r",
                    "    result = this.swapCont(projectController.getExample2container(), newSelection);      \r",
                    "    this.showHelp(result.gridcont, (isPhone ? '0px' : '340px'), isPhone);\r",
                    "    // Check store for data and load if empty (only)\r",
                    "    numNodes = result.grid.getStore().getData().length;\r",
                    "    if (numNodes === 0) {projectController.loadExample2Store(result.gridcont);} \r",
                    "}\r",
                    "else if (text === 'Project #2') {\r",
                    "    result = this.swapCont(projectController.getExample2Bcontainer(), newSelection);          \r",
                    "    this.showHelp(result.gridcont, (isPhone ? '0px' : '340px'), isPhone);\r",
                    "    // Check store for data and load if empty (only)\r",
                    "    numNodes = result.grid.getStore().getData().length;\r",
                    "    if (numNodes === 0) {projectController.loadExample2Store(result.gridcont);} \r",
                    "}\r",
                    "else if (text === 'Project #3') {\r",
                    "    result = this.swapCont(projectController.getExample2Ccontainer(), newSelection);  \r",
                    "    this.showHelp(result.gridcont, (isPhone ? '0px' : '340px'), isPhone);\r",
                    "\r",
                    "    // Check store for data and load if empty (only)\r",
                    "    numNodes = result.grid.getStore().getData().length;\r",
                    "    if (numNodes === 0) {projectController.loadExample2Store(result.gridcont);} \r",
                    "}\r",
                    "\r",
                    "else if (text === 'US Census - Maine') {\r",
                    "    result = this.swapCont(censusController.getCensusMaineContainer(), newSelection); \r",
                    "    this.onMenuButtonRelease();\r",
                    "    this.showHelp(result.gridcont, (isPhone ? '0px' : '200px'), true);\r",
                    "\r",
                    "    numRecords = result.grid.getStore().getData().length;\r",
                    "    if (numRecords === 0) {\r",
                    "        censusController.loadCensusMaine2000Store();\r",
                    "    }      \r",
                    "}\r",
                    "else if (text === 'Census Filter Ex#1') {\r",
                    "    result = this.swapCont(censusController.getCensusFilterCont(), newSelection);   \r",
                    "    this.onMenuButtonRelease();    \r",
                    "    this.showHelp(result.gridcont, (isPhone ? '0px' : '200px'), true);\r",
                    "    numRecords = result.grid.getStore().getData().length;\r",
                    "    if (numRecords === 0) {\r",
                    "        censusController.loadCensusFilterStore(result.gridcont, result.grid);\r",
                    "    }  \r",
                    "}\r",
                    "else if (text === 'Basic List #1') {\r",
                    "    result = this.swapCont(listsController.getDow2012Cont(), newSelection);   \r",
                    "    this.showHelp(result.gridcont, (isPhone ? '0px' : '340px'), isPhone);\r",
                    "\r",
                    "    numRecords = result.grid.getStore().getData().length;\r",
                    "    if (numRecords === 0) {\r",
                    "        Ext.Viewport.setMasked({\r",
                    "            xtype: 'loadmask',\r",
                    "            message: 'Loading Basic #1...'\r",
                    "        });\r",
                    "        result.grid.getStore().load();\r",
                    "        result.gridcont.doRefreshList();\r",
                    "        Ext.Viewport.setMasked(false);\r",
                    "    }  \r",
                    "}\r",
                    "else if (text === 'Basic List #2') {\r",
                    "    result = this.swapCont(listsController.getDow2012Basic2Cont(), newSelection);              \r",
                    "    this.showHelp(result.gridcont, (isPhone ? '0px' : '340px'), isPhone);\r",
                    "    numRecords = result.grid.getStore().getData().length;\r",
                    "    if (numRecords === 0) {\r",
                    "        Ext.Viewport.setMasked({\r",
                    "            xtype: 'loadmask',\r",
                    "            message: 'Loading Basic #2...'\r",
                    "        });\r",
                    "        result.grid.getStore().load();\r",
                    "        result.gridcont.doRefreshList();\r",
                    "        Ext.Viewport.setMasked(false);\r",
                    "    }\r",
                    "}\r",
                    "else if (text === 'Grouper #1') {\r",
                    "    result = this.swapCont(listsController.getDow2012grouperCont(), newSelection);   \r",
                    "    this.showHelp(result.gridcont, (isPhone ? '0px' : '340px'), isPhone);\r",
                    "\r",
                    "    numRecords = result.grid.getStore().getData().length;\r",
                    "    if (numRecords === 0) {\r",
                    "        Ext.Viewport.setMasked({\r",
                    "            xtype: 'loadmask',\r",
                    "            message: 'Loading Grouper ...'\r",
                    "        });\r",
                    "        result.grid.getStore().load();\r",
                    "        result.gridcont.doRefreshList();\r",
                    "        Ext.Viewport.setMasked(false);\r",
                    "    }  else {result.grid.refresh();}\r",
                    "    }\r",
                    "    else if (text === 'Grouper #2') {\r",
                    "        result = this.swapCont(listsController.getDow2012grouper2Cont(), newSelection);                 \r",
                    "        this.showHelp(result.gridcont, (isPhone ? '0px' : '340px'), isPhone);\r",
                    "        numRecords = result.grid.getStore().getData().length;\r",
                    "        if (numRecords === 0) {\r",
                    "            Ext.Viewport.setMasked({\r",
                    "                xtype: 'loadmask',\r",
                    "                message: 'Loading Grouper#2 ...'\r",
                    "            });\r",
                    "            listsController.loadDow2012Grouper2Store(result.gridcont, result.grid);  \r",
                    "        }  else {result.grid.refresh();}\r",
                    "        }\r",
                    "        else if (text === 'Horizontal Scrolling') {\r",
                    "            result = this.swapCont(listsController.getDow2012HorizCont(), newSelection); \r",
                    "            this.onMenuButtonRelease();            \r",
                    "            this.showHelp(result.gridcont, (isPhone ? '0px' : '340px'), isPhone);\r",
                    "            numRecords = result.grid.getStore().getData().length;\r",
                    "            if (numRecords === 0) {\r",
                    "                Ext.Viewport.setMasked({\r",
                    "                    xtype: 'loadmask',\r",
                    "                    message: 'Loading Horiz ...'\r",
                    "                });\r",
                    "                result.grid.getStore().load();\r",
                    "                result.gridcont.doRefreshList();\r",
                    "                Ext.Viewport.setMasked(false);\r",
                    "            }  \r",
                    "        }\r",
                    "        else if (text === 'Dynamic Grid') {\r",
                    "            result = this.swapCont(listsController.getDow2012DynamicCont(), newSelection);                    \r",
                    "            this.onMenuButtonRelease();            \r",
                    "            this.showHelp(result.gridcont, (isPhone ? '0px' : '340px'), isPhone);\r",
                    "\r",
                    "            // Reload each time pressed for dynamic grid example\r",
                    "            listsController.loadDow2012DynamicStore(result.gridcont, result.grid);  \r",
                    "        }\r",
                    "        else if (text === 'Manual TPL') {\r",
                    "            result = this.swapCont(commonController.getOverrideExampleCont(), newSelection);  \r",
                    "            this.showHelp(result.gridcont, (isPhone ? '0px' : '340px'), isPhone);\r",
                    "        }\r",
                    "\r",
                    "        else {\r",
                    "\r",
                    "            // If none of the above then assume category row selection so deselect.\r",
                    "            // Original record remains selected since mode=MULTI defined\r",
                    "            idx = menulist.getStore().find('Text', text);\r",
                    "            menulist.deselect(idx);\r",
                    "            newSelection = false;\r",
                    "\r",
                    "        }\r",
                    "        if (newSelection) {\r",
                    "\r",
                    "            // Deselect prior item \r",
                    "            idx = menulist.getStore().find('Text', lastSelectionText);\r",
                    "            menulist.deselect(idx);\r",
                    "            lastSelectionText = text;  // redefine global variable with current selection\r",
                    "\r",
                    "            // Slide container panel for phones after menu selection\r",
                    "            var modText= text;\r",
                    "            if (isPhone) {\r",
                    "                modText = text;\r",
                    "                cont = Ext.get('menucont');\r",
                    "                cont.removeCls('out');\r",
                    "                cont.addCls('in'); \r",
                    "\r",
                    "            } else {\r",
                    "                modText = ((text === 'Horizontal Scrolling') ? text + ' (phone)' : text);\r",
                    "            }\r",
                    "            menucont.down('#menuconttoolbar').setTitle(modText);\r",
                    "\r",
                    "        }\r",
                    "\r",
                    ""
                ],
                "name": "select",
                "designer|targetType": "Ext.dataview.List",
                "designer|controlQuery": "list"
            },
            "designerId": "9e5a815f-e856-4478-a2fb-67d3ed6cd450"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMenuOptListDisclose",
                "implHandler": [
                    "// Disclose handled same as item tap\r",
                    "this.onMenuOptListSelect(null, record);"
                ],
                "name": "disclose",
                "designer|targetType": "Ext.dataview.List",
                "designer|controlQuery": "list#menuoptlist"
            },
            "designerId": "40601a7b-6358-4360-8eee-14bf990f3e7f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onOrientationChange",
                "designer|params": [
                    "viewport, orientation, width, height"
                ],
                "implHandler": [
                    "//Ext.Msg.alert('', 'Orientation change: ' + orientation, Ext.emptyFn); \r",
                    "var gridcont = this.getMenucont().down('#menucontswap').getActiveItem().down('touchtreegrid');\r",
                    "if (!gridcont) {return;}\r",
                    "var gridItemId = gridcont.getItemId();\r",
                    "\r",
                    "// Demo reconfiguring columns array for Census example based on device and orientation\r",
                    "if (gridItemId === 'censusmaine' || gridItemId === 'censusfilter') {\r",
                    "    censusController.loadColumnsCensusMaine(gridcont);\r",
                    "}    "
                ],
                "name": "orientationchange",
                "designer|targetType": null,
                "designer|controlQuery": "viewport"
            },
            "designerId": "1957e403-4289-462b-bb68-e8666098f2ca"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onGridDetailBackButtonTap",
                "implHandler": [
                    "// Reusing the Back button for all Project Task examples by storing references when creating detail panel (list disclose)\r",
                    "var swapcont = button.up('#griddetailpanel').swapcont;  \r",
                    "if (swapcont)\r",
                    "{\r",
                    "    gridItemId = button.up('#griddetailpanel').gridItemId;\r",
                    "    var newcont = swapcont.down('#'+gridItemId); \r",
                    "\r",
                    "    newcont.setShowAnimation({type :\"slide\", direction : \"right\"});\r",
                    "    swapcont.setActiveItem(newcont);  \r",
                    "}    "
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#griddetailbackbtn"
            },
            "designerId": "6b85c248-9ff9-4340-82ca-ac84717f052f"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "main",
                "selector": "main",
                "xtype": "main"
            },
            "designerId": "01d8e11c-17a7-469c-87dc-4027daa55522"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "griddetailpanel",
                "selector": "griddetailpanel",
                "xtype": "griddetailpanel"
            },
            "designerId": "d61f7ac2-7a3f-4b36-8f14-6e09cc9b4f53"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "menuopt",
                "selector": "#menuopt"
            },
            "designerId": "f41de088-2a83-431a-a736-3f356775c583"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "menunav",
                "selector": "#menunav"
            },
            "designerId": "84af3fa5-0770-4de8-a839-8aba520e6daf"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "menucont",
                "selector": "#menucont"
            },
            "designerId": "377e7776-2e3c-4e01-a4f6-4c3ec8c4c0aa"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "menuconthelppanel",
                "selector": "#menuconthelppanel"
            },
            "designerId": "d8f527e9-34c2-4a3b-992f-24a06045d052"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "menuconttoolbar",
                "selector": "#menuconttoolbar"
            },
            "designerId": "cba3e347-b539-46da-805d-c96917d09efa"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "overrideExampleCont",
                "selector": "overrideExampleCont",
                "xtype": "overrideExampleCont"
            },
            "designerId": "0d399ef8-b63e-4dc4-9947-03e932174b71"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "swapCont",
                "designer|params": [
                    "newcont",
                    "newSelection"
                ],
                "implHandler": [
                    "var menucont = commonController.getMenucont();\r",
                    "var swapcont = menucont.down('#menucontswap');\r",
                    "\r",
                    "if (newSelection) {\r",
                    "    swapcont.add(newcont);\r",
                    "    swapcont.setActiveItem(newcont);\r",
                    "}    \r",
                    "gridcont = newcont.down('touchtreegrid');\r",
                    "gridListItemId = '#'+gridcont.getListItemId();\r",
                    "grid = gridcont.down(gridListItemId);  \r",
                    "return {gridcont: gridcont, gridListItemId: gridListItemId, grid: grid};"
                ]
            },
            "designerId": "1d362a05-b054-430b-b64e-ff99e50ad117"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showHelp",
                "designer|params": [
                    "gridcont",
                    "myWidth",
                    "close"
                ],
                "implHandler": [
                    "var gridId, help, me=this, cont;\r",
                    "\r",
                    "gridId = gridcont.getHelpHtml();\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "    url: gridId,\r",
                    "    method: 'GET',\r",
                    "    callback: function(options, success, response) {\r",
                    "\r",
                    "        cont = me.getMenucont();  \r",
                    "        help = me.getMenuconthelppanel();\r",
                    "        icon = me.getMenuconttoolbar().down('#gridhelp');\r",
                    "        help.setWidth(myWidth);\r",
                    "\r",
                    "        if (close) {\r",
                    "            icon.setSrc('./resources/images/question.png');\r",
                    "            icon.closed = true;\r",
                    "        } else {\r",
                    "            icon.setSrc('./resources/images/bullet_arrow_right_2.png');     \r",
                    "            icon.closed = false;\r",
                    "        }       \r",
                    "        help.setHtml(response.responseText );\r",
                    "    }\r",
                    "});"
                ]
            },
            "designerId": "33a6b875-028c-4b9b-9622-cdf6ff728c0d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadTree",
                "designer|params": [
                    "collapseLevel",
                    "ArrRef",
                    "fldListArr",
                    "gridcont",
                    "rootVal",
                    "hasTopRoot",
                    "filterOpts",
                    "skipApplyDefaultCollapseLevel"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var gridlistname = gridcont.getListItemId();\r",
                    "var gridlist = gridcont.down('#'+gridlistname);\r",
                    "\r",
                    "if (!Ext.isEmpty(ArrRef)) {gridlist.ArrRef = ArrRef;}  // Store ArrRef to Grid component for faster collapse/expand\r",
                    "else {ArrRef = gridlist.ArrRef;} // Retrieved on subsequent calls\r",
                    "\r",
                    "var treejson = this.getTree(ArrRef, rootVal, collapseLevel, fldListArr, hasTopRoot, filterOpts);\r",
                    "\r",
                    "// Update current level for next time\r",
                    "gridcont.collapseLevel = collapseLevel;\r",
                    "\r",
                    "var gridstore = gridlist.getStore();\r",
                    "\r",
                    "gridstore.suspendEvents();\r",
                    "\r",
                    "gridstore.removeAll();\r",
                    "var gridloaded = gridstore.setData(treejson);  // setRoot() not working => http://www.sencha.com/forum/showthread.php?242257\r",
                    "\r",
                    "gridstore.resumeEvents(true); // \"discard queued events\" improves performance when filtering and/or expanding all\r",
                    "\r",
                    "var refreshed = gridcont.doRefreshList(skipApplyDefaultCollapseLevel);  \r",
                    "\r",
                    "\r",
                    "// workaround to get Touch 2.2 pullrefresh plugin to auto-snapBack  ... or when collapsing rows after scrolling down     \r",
                    "var scroller = gridlist.getScrollable().getScroller();\r",
                    "scroller.minPosition.y = 1;\r",
                    "scroller.scrollTo(0,1);\r",
                    "\r",
                    "gridlist.refresh();        \r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "0992fb63-ff7b-4d82-8c17-3532a1afc829"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getTree",
                "designer|params": [
                    "list",
                    "rootId",
                    "expLevel",
                    "fldListArr",
                    "hasTopRoot",
                    "filterOpts"
                ],
                "implHandler": [
                    "// Required Fields:  'ID', 'PARENT_ID'   \r",
                    "// list       - data array to convert to treestore format\r",
                    "// rootId     - value of ultimate PARENT_ID (can be null)\r",
                    "// expLevel   - level to expand treestore to while generating\r",
                    "// fldListArr - defines columns to include in treestore from ArrRef for specific levels (if empty array then all fields are included at all levels as provided in list[])\r",
                    "//              2nd parameter defines levels including and higher where data element will be blanked out when generating the treestore\r",
                    "//              (particularly used for totalled numerics that don't apply to root levels, but the generating SQL can't update as NULL due to SQL UNION constraints \r",
                    "//              Note:  Exclude ID, PARENT_ID columns as these will be auto-added\r",
                    "//              For each field define level \"up to which\" values will be included on category rows.\r",
                    "//               '0' means highest root row will include non-nullable values (or as defined in flat file) for this field.\r",
                    "//               '1' means level 1 categories will include data (if defined)\r",
                    "//               '2' means data will only be included for up to level 2.  Level 1 and root will not show data for this column.\r",
                    "//                etc...\r",
                    "//              Example:   fldListArr = [['YearMonth', 0], ['grouper', 0], ['CloseDate', 1], ['Open', 1], ... ]\r",
                    "// hasTopRoot - true if a single root row exists\r",
                    "// filterOpts - Object defining filter options with members as follows:\r",
                    "//               - enabled : true or false (default)\r",
                    "//               - displayNodesWithAllMembersFilteredAsLeafs : true (default) or false \r",
                    "//                   (if, as result of filter a node has no displayable children, then set to true so that it appears\r",
                    "//                    as a leaf, or false to dispaly as expandable node ... regardless would not be expandable)\r",
                    "//               - filterFn : function that returns true if row is to be included in results\r",
                    "//\r",
                    "//               Example:\r",
                    "//               filterOpts = {\r",
                    "//                  enabled: true,\r",
                    "//                  displayNodesWithAllMembersFilteredAsLeafs: true,\r",
                    "//                  filterFn: function (rowObj) {return (parseInt(rowObj.Female) < parseInt(rowObj.Male));}\r",
                    "//               };\r",
                    "//\r",
                    "//               Notes about filtering:\r",
                    "//               - Node is included if any of it's children are included (whether node passes filter test or not!)\r",
                    "//               - \r",
                    "//\r",
                    "expLevel = (Ext.isEmpty(expLevel) ? 99 : expLevel);  // Level for initial expansion ...Defaults to fully expanded if not provided\r",
                    "\r",
                    "if (fldListArr.length===0) {\r",
                    "    // Initialize fldListArr with default values from all data fields in first row of list[]\r",
                    "    for (fld in list[0]) {\r",
                    "        if (fld !== 'ID' && fld !== 'PARENT_ID') {  // These are auto-added in createTreeStructure()\r",
                    "            fldListArr.push([fld, 0]);\r",
                    "        }\r",
                    "    }\r",
                    "}\r",
                    "var tree, root = {}, result = []; // fetch list from database\r",
                    "root.ID = rootId;\r",
                    "tree = {text : \".\"};\r",
                    "result.push(this.createTreeStructure(tree, root, list, 1, expLevel, fldListArr, hasTopRoot, filterOpts).result);\r",
                    "return result[0][0];"
                ]
            },
            "designerId": "ffa5c762-0b71-4c6c-b73f-7968681a27fc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createTreeStructure",
                "designer|params": [
                    "tree",
                    "root",
                    "list",
                    "level",
                    "expLevel",
                    "fldListArr",
                    "hasTopRoot",
                    "filterOpts"
                ],
                "implHandler": [
                    "var i=0, result = [], child, childList = [], children = [], temptree = {}, thisExp,\r",
                    "    has_nonfiltered_child = false;\r",
                    "\r",
                    "// Initialize Filter option variables\r",
                    "filterOpts = (Ext.isEmpty(filterOpts) ? {} : filterOpts);\r",
                    "var filtEnabled = (Ext.isEmpty(filterOpts.enabled) ? false : filterOpts.enabled);\r",
                    "var filtNodesAsLeafs = (Ext.isEmpty(filterOpts.displayNodesWithAllMembersFilteredAsLeafs) ? true : filterOpts.displayNodesWithAllMembersFilteredAsLeafs);\r",
                    "var filtFn = (Ext.isEmpty(filterOpts.filterFn) ? undefined : filterOpts.filterFn);\r",
                    "\r",
                    "if (level === 1 && hasTopRoot) {children = [list[0]];}  // Initial root\r",
                    "else {children = this.getChildren(root, list, false);} //Fetch children\r",
                    "\r",
                    "var ln = children.length;\r",
                    "\r",
                    "for(i=0; i<ln;i++)\r",
                    "{\r",
                    "    child = children[i];\r",
                    "    // Blank out categorized data above specified level as pre-specified in fldListArr\r",
                    "    // Example:  we may have 3 levels of cateogries.  Details sum to to the 3rd and perhaps 2nd level, \r",
                    "    //           but the 1st level should leave this column empty as not desired or applicable.\r",
                    "    for (var j=0; j< fldListArr.length; j++) {\r",
                    "        if (fldListArr[j][1] > 0 && fldListArr[j][1]>=level) {child[fldListArr[j][0]] = '';}\r",
                    "    }\r",
                    "\r",
                    "    if(this.getChildren(child, list, true).length===0) \r",
                    "    {\r",
                    "        temptree = {LEVEL : level, ID : child.ID, PARENT_ID : child.PARENT_ID, leaf : true};\r",
                    "        this.assignMembers(fldListArr, temptree, child);\r",
                    "\r",
                    "        // Push child to tree if filter not enabled or if passes filter condition\r",
                    "        if (!filtEnabled || filtFn(temptree)) { \r",
                    "            childList.push(temptree);\r",
                    "            tree[\"children\"] = childList; // Add leaf to child array of the passed parent (also links arrays)\r",
                    "            has_nonfiltered_child = true;\r",
                    "        }\r",
                    "    }\r",
                    "    else\r",
                    "    {\r",
                    "        thisExp = (level < expLevel ? true : false);\r",
                    "        temptree = {LEVEL : level, ID : child.ID, PARENT_ID : child.PARENT_ID, expanded : thisExp, leaf : false}; \r",
                    "        this.assignMembers(fldListArr, temptree, child);\r",
                    "\r",
                    "        // Push to children array now, but we will Pop it back later if this record and all children fail the filter condition\r",
                    "        childList.push(temptree);\r",
                    "        tree[\"children\"] = childList;  // Add node to child array of passed parent (also links arrays)\r",
                    "\r",
                    "        // Recursively create tree structure for the child since children exist.\r",
                    "        if (!this.createTreeStructure(temptree, child, list, level+1, expLevel, fldListArr, hasTopRoot, filterOpts).has_nonfiltered_child) {\r",
                    "            // If child items are all fitlered, but node passes filter test then  load this node as leaf instead of node (unless specified otherwise)\r",
                    "            if (!filtEnabled || filtFn(temptree)) {\r",
                    "                tree.children[tree.children.length-1].leaf = filtNodesAsLeafs;\r",
                    "                tree.children[tree.children.length-1].expanded = false;\r",
                    "                tree.children[tree.children.length-1].expandable = false;  // disallow expand all children are filtered \r",
                    "                has_nonfiltered_child = true;\r",
                    "\r",
                    "            } else {\r",
                    "                tree.children.pop();    // If HAS_NONFILTERED_CHILD = false, then pop() per above\r",
                    "            }\r",
                    "        } else {\r",
                    "            has_nonfiltered_child = true;\r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "result.push(tree);   // DON'T NEED TO DO THIS UNTIL DONE WITH FINAL ITERATION\r",
                    "return {result: result, has_nonfiltered_child: has_nonfiltered_child};\r",
                    ""
                ]
            },
            "designerId": "8ec28a9f-5a2f-4327-9dc1-6bd0223778e2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "assignMembers",
                "designer|params": [
                    "fldListArr",
                    "treeObj",
                    "child"
                ],
                "implHandler": [
                    "for (var i=0; i< fldListArr.length; i++) {\r",
                    "    treeObj[fldListArr[i][0]] = child[fldListArr[i][0]];\r",
                    "}"
                ]
            },
            "designerId": "442bd459-be5a-4d34-86b3-012122d9ed75"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getChildren",
                "designer|params": [
                    "root",
                    "list",
                    "firstOnly"
                ],
                "implHandler": [
                    "var i=0, ln = list.length, result = [];\r",
                    "for(i=0; i<ln;i++)\r",
                    "{\r",
                    "    if(root.ID===list[i].PARENT_ID)\r",
                    "    {\r",
                    "        result.push(list[i]);\r",
                    "        if (firstOnly) {return result;} // Only checking if single child exists so abort upon first detection\r",
                    "    }\r",
                    "}\r",
                    "return result;"
                ]
            },
            "designerId": "3e9e1405-19d7-4ce6-9d97-f0f04f340ab0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadStore",
                "designer|params": [
                    "me",
                    "gridcont",
                    "gridurl",
                    "loadmask",
                    "loadStoreInPostProcess"
                ],
                "implHandler": [
                    "// Load TreeStore data from JSON file within Controller since doesn't seem to work from within Store itself.\r",
                    "// NOTE:  autoload=true -and- dummy root initialization required in Store to work=>\r",
                    "//     root: {children: []}\r",
                    "// Also:  Regular stores in JSON file format seem to load from within Store without issue.\r",
                    "\r",
                    "if (loadmask) {\r",
                    "    Ext.Viewport.setMasked({\r",
                    "        xtype: 'loadmask',\r",
                    "        message: loadmask\r",
                    "    });\r",
                    "}\r",
                    "\r",
                    "var myRequest = Ext.Ajax.request({\r",
                    "    url: gridurl,\r",
                    "    method: 'GET',\r",
                    "    timeout: 10000,\r",
                    "    cache: false,\r",
                    "    dataType: 'json',\r",
                    "    reader:{\r",
                    "        type: 'json'\r",
                    "    },\r",
                    "\r",
                    "    success: function(response) {\r",
                    "        var griddata = Ext.JSON.decode(response.responseText);\r",
                    "\r",
                    "        var gridListItemId = gridcont.getListItemId();\r",
                    "        var gridlist = gridcont.down('#'+gridListItemId);\r",
                    "        var gridstore = gridlist.getStore();\r",
                    "\r",
                    "        if (!loadStoreInPostProcess) {\r",
                    "            gridstore.suspendEvents();      \r",
                    "            gridstore.removeAll();\r",
                    "            var gridloaded = gridstore.setData(griddata);  \r",
                    "            // setRoot() not working for TreeStores => http://www.sencha.com/forum/showthread.php?242257\r",
                    "            gridstore.resumeEvents();\r",
                    "            if (loadmask) {Ext.Viewport.setMasked(false);}\r",
                    "        }            \r",
                    "\r",
                    "        commonController.postLoadProcess(gridListItemId, gridcont, griddata); \r",
                    "\r",
                    "    },\r",
                    "\r",
                    "    failure: function(response, opts) {\r",
                    "        if (loadmask) {Ext.Viewport.setMasked(false);}\r",
                    "\r",
                    "        Ext.Msg.alert('Data not loaded: '+gridurl);     \r",
                    "    }\r",
                    "});\r",
                    ""
                ]
            },
            "designerId": "f5cbfe6b-64c0-4abe-bec5-092851762cab"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadDynamicStore",
                "designer|params": [
                    "me",
                    "gridcont",
                    "gridurl",
                    "loadmask",
                    "loadStoreInPostProcess"
                ],
                "implHandler": [
                    "\r",
                    "if (loadmask) {\r",
                    "    Ext.Viewport.setMasked({\r",
                    "        xtype: 'loadmask',\r",
                    "        message: loadmask\r",
                    "    });\r",
                    "}\r",
                    "\r",
                    "var myRequest = Ext.Ajax.request({\r",
                    "    url: gridurl,\r",
                    "    method: 'GET',\r",
                    "    timeout: 10000,\r",
                    "    cache: false,\r",
                    "    dataType: 'json',\r",
                    "    reader:{\r",
                    "        type: 'json'\r",
                    "    },\r",
                    "\r",
                    "    success: function(response) {\r",
                    "        var alldata = Ext.JSON.decode(response.responseText);\r",
                    "        var griddata             = alldata.datalist;\r",
                    "        var columnsPhonePortrait = alldata.columnsPhonePortrait;\r",
                    "        var fields               = alldata.fields;\r",
                    "\r",
                    "        // NOTE:  Could load different device and orienation column configurations\r",
                    "        //        and apply based on device/orientation here .. and update again\r",
                    "        //        within onOrientationChange().  If you load multiple configurations\r",
                    "        //        It is suggested that you store each of the column arrays to gridcont\r",
                    "        //        component for easy retrieval when switching.  \r",
                    "        //\r",
                    "        //        Ex:  gridcont.columnsPhonePortrait = columnsPhonePortrait;\r",
                    "        //             gridcont.columnsTabletLandscape = columnsTabletLandscape;\r",
                    "        //             etc...\r",
                    "        //\r",
                    "        //        Simply by calling doRefreshList() method after updating columns your \r",
                    "        //        grid will immediately reflect the new column configuration.\r",
                    "        //\r",
                    "        //        Could support customized user preferences in this same way.\r",
                    "\r",
                    "        var gridListItemId = gridcont.getListItemId();\r",
                    "        var gridlist = gridcont.down('#'+gridListItemId);\r",
                    "\r",
                    "        gridcont.setColumns(columnsPhonePortrait);\r",
                    "\r",
                    "        // Note: we are defining fields directly within Store instead of creating Model\r",
                    "        var gridstore = Ext.create('Ext.data.Store', {fields: fields});\r",
                    "\r",
                    "        gridlist.setStore(gridstore);\r",
                    "\r",
                    "        if (!loadStoreInPostProcess) {\r",
                    "            gridstore.suspendEvents();      \r",
                    "            var gridloaded = gridstore.add(griddata);  \r",
                    "            gridstore.resumeEvents();\r",
                    "            if (loadmask) {Ext.Viewport.setMasked(false);}\r",
                    "        }            \r",
                    "\r",
                    "        commonController.postLoadProcess(gridListItemId, gridcont, griddata); \r",
                    "\r",
                    "    },\r",
                    "\r",
                    "    failure: function(response, opts) {\r",
                    "        if (loadmask) {Ext.Viewport.setMasked(false);}\r",
                    "\r",
                    "        Ext.Msg.alert('Data not loaded: '+gridurl);     \r",
                    "    }\r",
                    "});\r",
                    ""
                ]
            },
            "designerId": "cdf5b865-a11a-459b-96b9-4df4cc025c0e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "postLoadProcess",
                "designer|params": [
                    "gridListItemId",
                    "gridcont",
                    "griddata"
                ],
                "implHandler": [
                    "var refreshed, fldListArr = [], collapseLvl, gridlist, scroller, myFilt = {};\r",
                    "var isPhone = !Ext.isEmpty(Ext.os.is.Phone);  // needed since this function returns either undefined or true\r",
                    "\r",
                    "\r",
                    "gridlist = gridcont.down('#'+gridListItemId);\r",
                    "scroller = gridlist.getScrollable().getScroller();\r",
                    "\r",
                    "\r",
                    "if (gridListItemId === 'censusmainelist') {\r",
                    "    // Collapse nodes to defined level\r",
                    "    var depth = gridcont.getDefaultCollapseLevel();\r",
                    "    if (depth !== 99) {gridcont.doExpandDepth(depth);}\r",
                    "\r",
                    "    censusController.loadColumnsCensusMaine(gridcont, false); // also refreshes list\r",
                    "}\r",
                    "\r",
                    "else if (gridListItemId === 'censusfilterlist') {\r",
                    "\r",
                    "    collapseLvl = (Ext.isEmpty(gridcont.collapseLevel) ? 1 : gridcont.collapseLevel);\r",
                    "    // Refer to expCollapse() method where collapseLevel could be updated for manual expand processing\r",
                    "\r",
                    "    myFilt = {};\r",
                    "\r",
                    "    censusController.loadColumnsCensusMaine(gridcont, true); // also refreshes list\r",
                    "\r",
                    "    censusController.applyCensusFilter(gridcont, '3', undefined, griddata.datalist);   // Initialize with Pop>10k filter\r",
                    "\r",
                    "    //    commonController.loadTree(collapseLvl, griddata.datalist, [], gridcont, null, true, myFilt); // collapse on initial load\r",
                    "\r",
                    "    Ext.Viewport.setMasked(false);\r",
                    "\r",
                    "}\r",
                    "\r",
                    "else if ((gridListItemId ==='example2list') ||\r",
                    "(gridListItemId ==='example2Blist') ||\r",
                    "(gridListItemId ==='example2Clist')) {\r",
                    "\r",
                    "    if (gridListItemId ==='example2list' && isPhone) {\r",
                    "        Ext.Msg.alert('Custom Expand levels!'); \r",
                    "    }\r",
                    "\r",
                    "    gridcont.doRefreshList();\r",
                    "\r",
                    "    // workaround to get Touch 2.2 pullrefresh plugin to auto-snapBack\r",
                    "    scroller.scrollTo(0,1);\r",
                    "}\r",
                    "\r",
                    "else if (gridListItemId === 'dow2012grouper2list') {\r",
                    "\r",
                    "    collapseLvl = (Ext.isEmpty(gridcont.collapseLevel) ? 1 : gridcont.collapseLevel);\r",
                    "    // Refer to expCollapse() method where collapseLevel could be updated for manual expand processing\r",
                    "\r",
                    "    myFilt = {  // Test example: plug 'myFilt' parameter in loadTree() call below (6th parameter)\r",
                    "        enabled: true,\r",
                    "        displayNodesWithAllMembersFilteredAsLeafs: true,\r",
                    "        filterFn: function (rowObj) {return (rowObj.Chg < 0 && rowObj.Close>13000);}  \r",
                    "    };\r",
                    "\r",
                    "    commonController.loadTree(collapseLvl, griddata.datalist, [], gridcont, null, false, {}); // collapse on initial load\r",
                    "\r",
                    "    // Sort by YearMonth, then CloseDate\r",
                    "    gridlist.getStore().sort([{property: 'YearMonth', direction: 'DESC'},\r",
                    "    {property: 'CloseDate', direction: 'DESC'}]);\r",
                    "\r",
                    "    Ext.Viewport.setMasked(false);\r",
                    "}\r",
                    "\r",
                    "else if (gridListItemId === 'dow2012Dynamiclist') {\r",
                    "    refreshed = gridcont.doRefreshList(); \r",
                    "\r",
                    "    Ext.Msg.alert('Server defined Grid!');\r",
                    "}\r",
                    "\r",
                    "else {\r",
                    "    refreshed = gridcont.doRefreshList(); \r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "5a9e891b-3e64-4606-b465-53a28cbc5e6f"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    "/* Global object variables available throughout application */\r",
                    "commonController = this.getApplication().getController('TouchTreeGrid.controller.CommonController');\r",
                    "tasksController = this.getApplication().getController('TouchTreeGrid.controller.TasksController');\r",
                    "projectController = this.getApplication().getController('TouchTreeGrid.controller.ProjectController');\r",
                    "censusController = this.getApplication().getController('TouchTreeGrid.controller.CensusController');\r",
                    "listsController = this.getApplication().getController('TouchTreeGrid.controller.ListsController');\r",
                    "\r",
                    "// Global Varaible Tracks last selected menu item since List select event doesn't provide prior vs. current items\r",
                    "lastSelectionText = '';  \r",
                    "\r",
                    ""
                ]
            },
            "designerId": "18755ff5-ced7-46c1-b6cc-44ddc109dd17"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onHelpPanelCloseButtonTap",
                "implHandler": [
                    "button.up('gridHelpPanel').hide();"
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#helpPanelCloseBtn"
            },
            "designerId": "fb2bd70a-9001-46c0-a9b8-43efc9f33419"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "launch",
                "implHandler": [
                    "/* Global variable to define current Touch version 2.1 vs. 2.2 */\r",
                    "touchVersion = '2.2';\r",
                    "\r",
                    "/* Hack to look to see if setInfinite() function exists on one of the tree grids as means to determine framework version .. not sure if more direct method exists or not */\r",
                    "var accgrid  = tasksController.getAccordionCont().down('#firstexamplelist');\r",
                    "if (typeof accgrid.setInfinite != 'function') {  /* if not found then we are running 2.1 framework */\r",
                    "    touchVersion = '2.1';\r",
                    "}\r",
                    "\r",
                    "// Pre-select menu selection \r",
                    "// lastSelectionText is global variable initialized in init() method as ''\r",
                    "\r",
                    "var list = this.getMenuopt().down('#menuoptlist');\r",
                    "var idx = list.getStore().find('Text', 'Accordion');  // Initialize with Accordion example\r",
                    "list.select(idx); \r",
                    "\r",
                    "// Fully expand menu options for non-phones \r",
                    "if (!Ext.os.is.Phone) {\r",
                    "    this.onMenuOptExpandImageTap();\r",
                    "} else {\r",
                    "    // Initialize menu in expanded state for phones   \r",
                    "    this.onMenuButtonRelease();\r",
                    "}"
                ]
            },
            "designerId": "26f5668a-8593-45d7-92a3-21100003b54b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMenuOptExpandImageTap",
                "implHandler": [
                    "var grid = this.getMenuopt();\r",
                    "var gridlist = grid.down('#'+grid.getListItemId());\r",
                    "grid.setMinHeight((2.6*22).toString()+'em');\r",
                    "gridlist.setMinHeight((2.6*22).toString()+'em');\r",
                    "grid.doExpandDepth(99);\r",
                    "//gridlist.refresh;\r",
                    ""
                ],
                "name": "tap",
                "designer|targetType": "Ext.Img",
                "designer|controlQuery": "image#menuoptexpand"
            },
            "designerId": "76b309c3-71df-4732-87f7-8cb1349af193"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMenuOptCollapseImageTap",
                "implHandler": [
                    "var grid = this.getMenuopt();\r",
                    "var gridlist = grid.down('#'+grid.getListItemId());\r",
                    "if (Ext.os.is.Phone) {\r",
                    "    grid.setMinHeight((2.6*5).toString()+'em');\r",
                    "    gridlist.setMinHeight((2.6*5).toString()+'em');\r",
                    "} \r",
                    "grid.doExpandDepth(1);\r",
                    "//gridlist.refresh;"
                ],
                "name": "tap",
                "designer|targetType": "Ext.Img",
                "designer|controlQuery": "image#menuoptcollapse"
            },
            "designerId": "b97a570d-556e-432f-9ce2-219927be1a44"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onHelpImageTap",
                "implHandler": [
                    "var isPhone = !Ext.isEmpty(Ext.os.is.Phone);  // needed since this function returns either undefined or true\r",
                    "var menucont = commonController.getMenucont();\r",
                    "var swapcont = menucont.down('#menucontswap');\r",
                    "var gridcont = swapcont.getActiveItem().down('touchtreegrid');\r",
                    "if (!gridcont) {return;}\r",
                    "this.showHelp(gridcont, (image.closed ? (isPhone ? '100%' : '340px') : '0px'), !image.closed);\r",
                    ""
                ],
                "name": "tap",
                "designer|targetType": "Ext.Img",
                "designer|controlQuery": "image#gridhelp"
            },
            "designerId": "1302c0a2-f70f-400f-acaf-e309e712d232"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCloseHelpButtonTap",
                "implHandler": [
                    "var isPhone = !Ext.isEmpty(Ext.os.is.Phone);  // needed since this function returns either undefined or true\r",
                    "var menucont = commonController.getMenucont();\r",
                    "var swapcont = menucont.down('#menucontswap');\r",
                    "var gridcont = swapcont.getActiveItem().down('touchtreegrid');\r",
                    "this.showHelp(gridcont, '0px', true);\r",
                    ""
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#closehelp"
            },
            "designerId": "3d450637-022d-4bef-b90c-b3a391abbf69"
        }
    ]
}