/*
 * File: app/view/Dow2012DynamicCont.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TouchTreeGrid.view.Dow2012DynamicCont', {
    extend: 'Ext.Container',
    alias: 'widget.dow2012DynamicCont',

    config: {
        itemId: 'dow2012DynamicCont',
        layout: {
            type: 'hbox'
        },
        scrollable: {
            direction: 'horizontal',
            directionLock: true
        },
        items: [
            {
                xtype: 'touchtreegrid',
                store: 'dynamicstore',
                header: {
                    maxHeight: '3.2em',
                    minHeight: '3.2em'
                },
                listItemId: 'dow2012Dynamiclist',
                renderers: {
                    renderer_formatWithColorCls: function (value, decPlaces, prefix, suffix, thouSeparator, decSeparator)
                {var cls = (value >= 0) ? 'cellrend-positive' : 'cellrend-negative';
                return '<span class="' + cls + '">' + this.formatNumbers(value, decPlaces, prefix, suffix, thouSeparator, decSeparator) +
                    '</span>';}
                },
                contentItemTplOverride: '',
                helpHtml: './resources/html/DOW2012DynamicExample.html',
                simpleList: true,
                columnSorting: true,
                cls: [
                    'x-touchtreegrid-list',
                    'x-touchtreegrid-list-dow2012Horiz',
                    'x-touchtreegrid-list-dow2012Dynamic'
                ],
                itemId: 'dow2012Dynamic',
                minWidth: '36em',
                width: '36em'
            }
        ]
    },

    initialize: function() {
        this.callParent();

        var horizgrid = this.down('#dow2012Dynamiclist');
        var horizexample = this.down('#dow2012Dynamic');

        // get screen width in pixels
        var scrnwid = (window.innerWidth > 0) ? window.innerWidth : screen.width;  
        // get maximum of screen width or dow2012horiz grid width converted to pixels
        var prewid = 36 * 16;  // 36em total width * 16 pixels per em
        var minScrnWid = Math.max(prewid, scrnwid);  

        horizgrid.setWidth(minScrnWid); 
        horizgrid.setMinWidth(minScrnWid); 
        horizexample.setWidth(minScrnWid); 
        horizexample.setMinWidth(minScrnWid); 

        if (scrnwid > prewid) {
            this.setScrollable({disabled: true});  // disable scrolling if screen larger than grid
        }


    }

});