{
    "type": "Ext.Container",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "store": [
            "{}"
        ],
        "displayField": null,
        "listScrollable": true,
        "headerItemTpl": null,
        "contentItemTpl": "",
        "useAnimation": null,
        "list": [
            "{}"
        ],
        "headerItemOuter": null,
        "headerItemData": null,
        "disableSelection": true,
        "listStyle": null,
        "onItemDisclosure": false,
        "columns": [
            "[]"
        ],
        "header": [
            "{\r",
            "            xtype: 'toolbar',\r",
            "            docked: 'top',\r",
            "            cls: 'touchtreegrid-header',\r",
            "            maxHeight: '1.8em',\r",
            "            minHeight: '1.8em'\r",
            "        }"
        ],
        "headerTpl": "",
        "variableHeights": true,
        "itemHeight": 47,
        "disclosureProperty": "disclose",
        "listItemId": "touchtreegridlist",
        "categItemTpl": "",
        "footer": [
            "{\r",
            "            xtype: 'toolbar',\r",
            "            docked: 'bottom',\r",
            "            ui     : 'light',\r",
            "            cls: 'touchtreegrid-footer'\r",
            "        }"
        ],
        "includeFooter": true,
        "plugins": null,
        "listPlugins": [
            "{}"
        ],
        "categIndentPct": "3",
        "colNumberToTruncateForIndents": 1,
        "includeFooterLevels": true,
        "categDepthColors": false,
        "categDepthColorsArr": [
            "[\r",
            "'#a6a6a6',\r",
            "'#dddddd',\r",
            "'white'\r",
            "]"
        ],
        "customExpCollapseEvent": "",
        "renderers": [
            "{}"
        ],
        "categDepthColorButtons": true,
        "pressedBtnCls": null,
        "useCustomPressedBtnCls": null,
        "categItemTplOverride": "",
        "contentItemTplOverride": "",
        "headerTplOverride": "",
        "includeHeader": true,
        "applyDefaultCollapseLevel": true,
        "defaultCollapseLevel": 99,
        "landscapeIcon": "./resources/images/Recycle.png",
        "helpHtml": "",
        "pressedCls": "touchtreegrid-item-pressed",
        "simpleList": false,
        "columnSorting": false,
        "styleContentRow": "",
        "styleCategRow": "",
        "styleHeaderRow": "",
        "singleExpand": false,
        "additionalListConfigs": [
            "{}"
        ],
        "selectedCls": "touchtreegrid-item-selected",
        "mode": "SINGLE",
        "cls": [
            "x-touchtreegrid-list"
        ],
        "designer|userClassName": "TouchTreeGrid",
        "designer|userAlias": "touchtreegrid",
        "layout": "fit"
    },
    "configAlternates": {
        "store": "object",
        "listScrollable": "boolean",
        "defaultExpanded": "boolean",
        "useAnimation": "boolean",
        "disableSelection": "boolean",
        "listStyle": "object",
        "onItemDisclosure": "boolean",
        "headerItemData": "array",
        "columns": "array",
        "header": "object",
        "variableHeights": "boolean",
        "itemHeight": "number",
        "footer": "object",
        "includeFooter": "boolean",
        "list": "object",
        "plugins": "object",
        "listPlugins": "object",
        "colNumberToTruncateForIndents": "number",
        "includeFooterLevels": "boolean",
        "categDepthColors": "boolean",
        "categDepthColorsArr": "array",
        "renderers": "object",
        "categDepthColorButtons": "boolean",
        "useCustomPressedBtnCls": "boolean",
        "includeHeader": "boolean",
        "autoApplyCollapseConfig": "boolean",
        "applyDefaultCollapseLevel": "boolean",
        "defaultCollapseLevel": "number",
        "simpleList": "boolean",
        "headerSorting": "boolean",
        "columnSorting": "boolean",
        "singleExpand": "boolean",
        "additionalListConfigs": "object"
    },
    "designerId": "7d6de964-323e-4c82-a7f6-45d73c89f642",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "store",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "displayField",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "listScrollable",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "headerItemTpl",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "contentItemTpl",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "useAnimation",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "list",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "headerItemOuter",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "headerItemInner",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "headerItemData",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "disableSelection",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "listStyle",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "onItemDisclosure",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "columns",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "header",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "headerTpl",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "variableHeights",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "itemHeight",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "disclosureProperty",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "listItemId",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "categItemTpl",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "footer",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "includeFooter",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "plugins",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "listPlugins",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "categIndentPct",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "colNumberToTruncateForIndents",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "includeFooterLevels",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "categDepthColors",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "categDepthColorsArr",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "customExpCollapseEvent",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "renderers",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "categDepthColorButtons",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "pressedBtnCls",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "useCustomPressedBtnCls",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "categItemTplOverride",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "contentItemTplOverride",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "headerTplOverride",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "includeHeader",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "applyDefaultCollapseLevel",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "defaultCollapseLevel",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "landscapeIcon",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "helpHtml",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "pressedCls",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "simpleList",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "columnSorting",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "styleContentRow",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "styleCategRow",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "styleHeaderRow",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "singleExpand",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "additionalListConfigs",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "selectedCls",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "mode",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "initialize",
                "fn": "initialize",
                "designer|params": [
                    "config"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "me.callParent(arguments);\r",
                    "\r",
                    "this.doRefreshList();\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "f2679bb7-ef00-44fb-8c0f-f21de6d51179"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "updateColumns",
                "fn": "updateColumns",
                "implHandler": [
                    "// UPDATE functions on config items execute prior to INITIALIZE (and before UPDATESTORE) so \r",
                    "// insert logic here to build ItemTpl components\r",
                    "// NOTE:  Columns updated in this Class as [initialize] to force execution of this function.\r",
                    "\r",
                    "var me = this, myWidth, myWidthVal;\r",
                    "\r",
                    "var simpleList = me.getSimpleList();\r",
                    "\r",
                    "// Proceed to build TPL for header row\r",
                    "var styleStr = '', rendStr='';\r",
                    "var categ = me.getCategItemTplOverride();\r",
                    "var indent = me.getCategIndentPct().toString(); // % of window to indent per level (starting at 0%)\r",
                    "\r",
                    "var indentCol = me.getColNumberToTruncateForIndents()-1; // This column width value will be truncated to account for indent\r",
                    "// Subtract 1 from column number to array index # applied below.\r",
                    "// Width expected to be in pct format as last '%' character will be stripped for computation : '25%'\r",
                    "\r",
                    "var data = me.getColumns();\r",
                    "if (this.isObjectEmpty(data)) {  \r",
                    "    // Initialize column data for scenario where column array updated within controller after component initialization\r",
                    "    data ={header: '', dataIndex: '', width: '', style: '', categStyle: '', headerStyle: ''};\r",
                    "}\r",
                    "\r",
                    "if (categ==='' && !simpleList) {   // Use default if not provided by user\r",
                    "    var shellArr = \r",
                    "    [\r",
                    "    '<div style=\"display: -webkit-box; -webkit-box-orient: horizontal;'+me.getStyleCategRow()+'\">',\r",
                    "    '<p align=\"left\" style=\"width:{[(values.depth-1)*'+indent+']}%;\"</p>',    // 3% per depth starting at 0% \r",
                    "    '<p align=\"left\" style=\"width:4%;min-width:4%;max-width:4%;white-space: nowrap;overflow:hidden;text-overflow:ellipsis;\">', \r",
                    "    '<span class=\"touchtreegrid-details-img ',\r",
                    "    '<tpl if=\"this.isExpanded(values)\">',   \r",
                    "    'touchtreegrid-details-img-open\" </span></p>',\r",
                    "    '<tpl else>',  \r",
                    "    'touchtreegrid-details-img-close\" </span></p>',\r",
                    "    '</tpl>'\r",
                    "    ];\r",
                    "\r",
                    "\r",
                    "    for (var i=0; i<data.length; i++) {\r",
                    "\r",
                    "        // Use categStyle if exists, else applie detail row style to category row\r",
                    "        if (data[i].categStyle && data[i].categStyle > '') {styleStr = data[i].categStyle;}\r",
                    "        else if (data[i].style) {styleStr = data[i].style;}\r",
                    "        else {styleStr = '';}\r",
                    "\r",
                    "        // Substitute user-defined renderer string from Columns array if defined\r",
                    "        rendStr = ((!data[i].renderer) ? data[i].dataIndex : '[' + data[i].renderer + ']');\r",
                    "\r",
                    "        if (i===indentCol) {     \r",
                    "            shellArr.push('<p class=\"touchtreegrid-list-categ-cell\" style=\"' +\r",
                    "            'min-width:{[' + data[i].width.substr(0, data[i].width.length-1) + '-((values.depth-1)*'+indent+')]}% !important;' + \r",
                    "            'max-width:{[' + data[i].width.substr(0, data[i].width.length-1) + '-((values.depth-1)*'+indent+')]}% !important;' + \r",
                    "            'width:{[' + data[i].width.substr(0, data[i].width.length-1) + '-((values.depth-1)*'+indent+')]}% !important;' + \r",
                    "            styleStr + '\" >{' + data[i].dataIndex + '}</p>');                       \r",
                    "        } else {           \r",
                    "            shellArr.push('<p class=\"touchtreegrid-list-categ-cell\" style=\"' +\r",
                    "            'min-width:' + data[i].width + ' !important;' + \r",
                    "            'max-width:' + data[i].width + ' !important;' + \r",
                    "            'width:' + data[i].width + ' !important;' + \r",
                    "            styleStr + '\" >{' + rendStr + '}</p>');\r",
                    "        }  \r",
                    "    }\r",
                    "\r",
                    "    shellArr.push('</div>');  \r",
                    "    categ=shellArr.join('');\r",
                    "}\r",
                    "\r",
                    "var categrows = me.setCategItemTpl(categ);\r",
                    "\r",
                    "var detail = me.getContentItemTplOverride();\r",
                    "var detailArr, j;\r",
                    "if (detail==='' && !simpleList) {\r",
                    "    detailArr = [\r",
                    "    '<div style=\"display: -webkit-box;-webkit-box-orient: horizontal;'+me.getStyleContentRow()+'\">',\r",
                    "    '<p align=\"left\" style=\"width:{[(values.depth-1)*'+indent+']}%;\"</p>',    // 3% per depth starting at 0%         \r",
                    "    '<p align=\"left\" style=\"width:4%;min-width:4%;max-width:4%;white-space: nowrap;overflow:hidden;text-overflow:ellipsis;\">&nbsp;</p>'\r",
                    "    ];\r",
                    "\r",
                    "    for (j=0; j<data.length; j++) {\r",
                    "\r",
                    "        // Substitute user-defined renderer string from Columns array if defined\r",
                    "        rendStr = ((!data[j].renderer) ? data[j].dataIndex : '[' + data[j].renderer + ']');\r",
                    "\r",
                    "        if (j===indentCol) {     \r",
                    "            detailArr.push('<p class=\"touchtreegrid-list-content-cell\" style=\"' +\r",
                    "            'min-width:{[' + data[j].width.substr(0, data[j].width.length-1) + '-((values.depth-1)*'+indent+')]}% !important;' + \r",
                    "            'max-width:{[' + data[j].width.substr(0, data[j].width.length-1) + '-((values.depth-1)*'+indent+')]}% !important;' + \r",
                    "            'width:{[' + data[j].width.substr(0, data[j].width.length-1) + '-((values.depth-1)*'+indent+')]}% !important;' + \r",
                    "            ((data[j].style === '') ? '' : data[j].style) + '\" ' +\r",
                    "            '>{' + data[j].dataIndex + '}</p>');                  \r",
                    "        } else {           \r",
                    "            detailArr.push('<p class=\"touchtreegrid-list-content-cell\" style=\"' +\r",
                    "            'min-width:' + data[j].width + ' !important;' + \r",
                    "            'max-width:' + data[j].width + ' !important;' + \r",
                    "            'width:' + data[j].width + ' !important;' + \r",
                    "            ((data[j].style === '') ? '' : data[j].style) + '\" ' +\r",
                    "            '>{' + rendStr + '}</p>');\r",
                    "        }          \r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    detailArr.push('</div>');  \r",
                    "    detail=detailArr.join('');    \r",
                    "}   \r",
                    "if (detail==='' && simpleList) {\r",
                    "    detailArr = [\r",
                    " // webkit-box handled by  \"display : inline-block;\" in TouchTreeGrid.css \r",
                    " //   '<div style=\"display: -webkit-box;-webkit-box-orient: horizontal;\">',\r",
                    "    ];\r",
                    "\r",
                    "    for (j=0; j<data.length; j++) {\r",
                    "\r",
                    "        // Substitute user-defined renderer string from Columns array if defined\r",
                    "        rendStr = ((!data[j].renderer) ? data[j].dataIndex : '[' + data[j].renderer + ']');\r",
                    "\r",
                    "\r",
                    "        detailArr.push('<p class=\"touchtreegrid-simplelist-cell\" style=\"' +\r",
                    "        'min-width:' + data[j].width + ' !important;' + \r",
                    "        'max-width:' + data[j].width + ' !important;' + \r",
                    "        'width:' + data[j].width + ' !important;' + \r",
                    "        ((data[j].style === '') ? '' : data[j].style) + '\" ' +\r",
                    "        '>{' + rendStr + '}</p>');\r",
                    "\r",
                    "    }\r",
                    "\r",
                    " //   detailArr.push('</div>');  \r",
                    "    detail=detailArr.join('');    \r",
                    "}   \r",
                    "var content = me.setContentItemTpl(detail);    \r",
                    "\r",
                    ""
                ]
            },
            "designerId": "8677b7bf-b80f-4a17-ab97-d5be9d4fe895"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "updateStore",
                "fn": "updateStore",
                "designer|params": [
                    "newStore",
                    "oldStore"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var list = me.getList();\r",
                    "var disableSel = me.getDisableSelection();\r",
                    "var pressedCls = (disableSel ? '' : me.getPressedCls());  // Don't apply pressing class if selection disabled\r",
                    "var selectedCls = me.getSelectedCls();\r",
                    "var mode = me.getMode();\r",
                    "var disclose = me.getOnItemDisclosure();\r",
                    "var discloseProp = me.getDisclosureProperty();\r",
                    "var itemHeight = me.getItemHeight();\r",
                    "var variableHeights = me.getVariableHeights();\r",
                    "\r",
                    "if (this.isObjectEmpty(list)) {\r",
                    "    list = Ext.create('Ext.dataview.List', {   \r",
                    "        disableSelection: disableSel,\r",
                    "        onItemDisclosure : disclose,\r",
                    "        disclosureProperty : discloseProp,  // 'disclose' for all rows (default), 'leaf' for leafs only\r",
                    "        itemHeight: itemHeight,\r",
                    "        variableHeights: variableHeights,\r",
                    "        store: newStore,\r",
                    "        masked: false,\r",
                    "        itemCls: 'x-touchtreegrid-item',\r",
                    "        pressedCls : pressedCls,\r",
                    "        selectedCls : selectedCls,\r",
                    "        mode: mode\r",
                    "    });\r",
                    "\r",
                    "    list.on('itemtap', this.onItemTap, this);\r",
                    "\r",
                    "    var plugins = me.getListPlugins();\r",
                    "    if (!this.isObjectEmpty(plugins)) {\r",
                    "        list.setPlugins(plugins);\r",
                    "    }\r",
                    "\r",
                    "    me.setList(list);\r",
                    "\r",
                    "    if (!me.getListScrollable()) {\r",
                    "        list.setScrollable({disabled: true});  // false doesn't seem to work\r",
                    "    }\r",
                    "\r",
                    "    var listItemId = me.getListItemId();\r",
                    "    if (listItemId !== '') {\r",
                    "        list.setItemId(listItemId);\r",
                    "    }\r",
                    "\r",
                    "    // Update list with any additional configs defined in user-defined additionalListConfigs object\r",
                    "    // (this allows all configs supported by Ext.dataview.List component to be applied to TouchTreeGrid list\r",
                    "    // Note:  any duplicated configs already supported by TouchTreeGrid will overwrite those and could have \r",
                    "    //        unexpected behaviour !!\r",
                    "    var addlConfigs = me.getAdditionalListConfigs();\r",
                    "    if (!me.isObjectEmpty(addlConfigs)) {\r",
                    "        for (cfg in addlConfigs) {\r",
                    "            list.config[cfg] = addlConfigs[cfg];\r",
                    "            list['_'+cfg] = addlConfigs[cfg];\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "    me.add(list);\r",
                    "\r",
                    "}\r",
                    "else {\r",
                    "    list.setStore(newStore);\r",
                    "}    \r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "c4db9df3-9e72-4ba5-a44b-52aaba8a036b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onItemTap",
                "fn": "onItemTap",
                "designer|params": [
                    "list",
                    "index",
                    "target",
                    "record",
                    "e"
                ],
                "implHandler": [
                    "/**\r",
                    "* Called when an list item has been tapped\r",
                    "* @param list: {Ext.List}  The subList the item is on\r",
                    "* @param index: {Number} The id of the item tapped\r",
                    "* @param target: {Ext.Element} The list item tapped\r",
                    "* @param record: {Ext.data.Record} The record whichw as tapped\r",
                    "* @param e: {Ext.event.Event} The event\r",
                    "*/\r",
                    "\r",
                    "var store = list.getStore(),\r",
                    "    node = store.getAt(index);\r",
                    "\r",
                    "if (this.getSimpleList() || node.isLeaf()) {\r",
                    "    this.fireEvent('leafItemTap', this, list, index, target, record, e);\r",
                    "\r",
                    "} \r",
                    "else if (this.getSingleExpand() && !node.isExpanded()) {\r",
                    "    // If node collapsed, then expand this one and collapse all sibling nodes\r",
                    "    this.fireEvent('nodeItemTap', this, list, index, target, record, e);  \r",
                    "    debugger; \r",
                    "    node.expand(false);\r",
                    "    var parent = node.parentNode;\r",
                    "    var children = parent.childNodes;\r",
                    "    for (var i=0; i<children.length; i++) {\r",
                    "        if (children[i] !== node && children[i].isExpanded()) {\r",
                    "            children[i].collapse();\r",
                    "        }\r",
                    "    }\r",
                    "}\r",
                    "else {\r",
                    "    this.fireEvent('nodeItemTap', this, list, index, target, record, e);  \r",
                    "\r",
                    "    var xPosition = list.getScrollable().getScroller().position.x;\r",
                    "    var yPosition = list.getScrollable().getScroller().position.y;\r",
                    "\r",
                    "    if (node.isExpanded()) {\r",
                    "        node.collapse();\r",
                    "    } else {\r",
                    "        node.expand(false);\r",
                    "    }\r",
                    "\r",
                    "    list.getScrollable().getScroller().scrollTo(xPosition, yPosition, {duration: 0});\r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "45927094-7a5b-402f-bec9-481646c6088d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "applyHeader",
                "fn": "applyHeader",
                "designer|params": [
                    "config"
                ],
                "implHandler": [
                    "if (this.getIncludeHeader()) {\r",
                    "    Ext.apply(config, {\r",
                    "        docked : 'top',\r",
                    "        cls    : 'touchtreegrid-header',\r",
                    "        itemId : 'touchtreegridheader'\r",
                    "    });\r",
                    "\r",
                    "    return Ext.factory(config, Ext.Toolbar);\r",
                    "}    "
                ]
            },
            "designerId": "fdd66183-9da1-45af-bf3c-343ac00c4841"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "updateHeader",
                "fn": "updateHeader",
                "designer|params": [
                    "header"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "if (me.getIncludeHeader()) {\r",
                    "    me.insert(0, header);\r",
                    "\r",
                    "    if (this.getColumnSorting()) {  // add tap event listener to header toolbar\r",
                    "        header.element.on('tap', me[\"handleColumnSort\"], me, {});\r",
                    "    }\r",
                    "}    "
                ]
            },
            "designerId": "3482ca0f-57c0-48bb-a925-4f467945a515"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "applyFooter",
                "fn": "applyFooter",
                "designer|params": [
                    "config"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var img = me.getLandscapeIcon();\r",
                    "\r",
                    "if (this.getIncludeFooter() && !this.getSimpleList()) {\r",
                    "    Ext.apply(config, {\r",
                    "        docked : 'bottom',\r",
                    "        cls    : 'touchtreegrid-footer',\r",
                    "        itemId : 'touchtreegridbuttons',\r",
                    "\r",
                    "        items: [\r",
                    "        {\r",
                    "            xtype: 'label',\r",
                    "            docked: 'right',\r",
                    "            html: '',\r",
                    "            itemId: 'touchtreegridlabel',\r",
                    "            cls  : 'touchtreegrid-landscape-label',                       \r",
                    "            style: 'color : white'\r",
                    "        },            \r",
                    "        {\r",
                    "            xtype: 'image',\r",
                    "            docked: 'right',\r",
                    "            hidden: true,\r",
                    "            itemId: 'touchtreegridicon',\r",
                    "            cls: 'touchtreegrid-landscape-icon',\r",
                    "            src: img\r",
                    "        },\r",
                    "        {\r",
                    "            xtype: 'segmentedbutton',\r",
                    "            itemId : 'touchtreegridsegmentedbuttons',\r",
                    "            items: [\r",
                    "            {\r",
                    "                xtype: 'button',\r",
                    "                itemId: 'touchtreegridexpand',\r",
                    "                cls  : 'touchtreegrid-expand-collapse-buttons',\r",
                    "                text: 'Expand',\r",
                    "                listeners : {\r",
                    "                    tap: function (button, e, options) {\r",
                    "                        me.doExpandDepth(99);\r",
                    "                    }\r",
                    "                }\r",
                    "            },\r",
                    "            {\r",
                    "                xtype: 'button',\r",
                    "                itemId: 'touchtreegridcollapse',\r",
                    "                cls  : 'touchtreegrid-expand-collapse-buttons',\r",
                    "                text: 'Collapse',\r",
                    "                listeners : {\r",
                    "                    tap: function (button, e, options) {\r",
                    "                        me.doExpandDepth(0);\r",
                    "                    }\r",
                    "                }\r",
                    "            }\r",
                    "            ]\r",
                    "\r",
                    "        }]\r",
                    "    });\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    return Ext.factory(config, Ext.Toolbar);\r",
                    "}"
                ]
            },
            "designerId": "f6b6d43a-2bb7-47c1-a3ee-6c67e2fe475a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "updateFooter",
                "fn": "updateFooter",
                "designer|params": [
                    "footer"
                ],
                "implHandler": [
                    "if (this.getIncludeFooter() && !this.getSimpleList()) {\r",
                    "    this.insert(0, footer);\r",
                    "}"
                ]
            },
            "designerId": "5df30a86-dd3b-46b1-83d9-163285d999c5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "doExpandDepth",
                "fn": "doExpandDepth",
                "designer|params": [
                    "depth",
                    "btn"
                ],
                "implHandler": [
                    "var list = this.getList(),\r",
                    "    store = list.getStore();\r",
                    "\r",
                    "/* Unpress Expand/Collapse buttons in event they were pressed */\r",
                    "if (!Ext.isEmpty(btn)) {\r",
                    "    var btns  = this.down('#touchtreegridsegmentedbuttons');\r",
                    "    btns.setPressedButtons([]);\r",
                    "}\r",
                    "\r",
                    "// Fire custom event for expand/collapse if specified\r",
                    "var customEvent = this.getCustomExpCollapseEvent();\r",
                    "if (customEvent !== '') {\r",
                    "    this.fireEvent(customEvent, {collapseLevel: depth});\r",
                    "    return;\r",
                    "}\r",
                    "\r",
                    "store.each(function(item, index, list) {item.collapse(true);});\r",
                    "\r",
                    "function expandDepth(node) {\r",
                    "    if (!node.isLeaf() && node.data.depth <depth) {\r",
                    "        node.expand(false);\r",
                    "\r",
                    "        node.childNodes.forEach(expandDepth, this);\r",
                    "    }\r",
                    "}\r",
                    "store.each(expandDepth, this);\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "01aaa6ef-6887-4e1f-a9f1-b58179da1e57"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "doRefreshList",
                "fn": "doRefreshList",
                "designer|params": [
                    "skipApplyDefaultCollapseLevel"
                ],
                "implHandler": [
                    "// Refreshes TPL in grid and in Header\r",
                    "\r",
                    "var me = this;\r",
                    "\r",
                    "var simpleList = me.getSimpleList();\r",
                    "\r",
                    "var list = me.getList();\r",
                    "var disclose = me.getOnItemDisclosure();\r",
                    "var colorArr = me.getCategDepthColorsArr();\r",
                    "var colorDepth = me.getCategDepthColors();\r",
                    "var colorDepthButtons = me.getCategDepthColorButtons();\r",
                    "var itemTpl;\r",
                    "\r",
                    "// Customize TPL to change colors by category depth as defined in colorArr\r",
                    "var colorStyle = (colorDepth ? 'style=\"background-color: {[this.depthColor(values)]} !important;\"' : '');\r",
                    "\r",
                    "var tpl;\r",
                    "if (!simpleList) {\r",
                    "    tpl = [\r",
                    "    '<tpl if=\"leaf\">',\r",
                    "    '<div class=\"touchtreegrid-list-content\">',\r",
                    "    me.getContentItemTpl(),\r",
                    "    '</div>',\r",
                    "    '<tpl else>',\r",
                    "    '<div class=\"touchtreegrid-list-categ\" '+colorStyle + '>',\r",
                    "    me.getCategItemTpl(),\r",
                    "    '</div>',\r",
                    "    '</tpl>'\r",
                    "    ].join('');\r",
                    "}\r",
                    "else {\r",
                    "    tpl = [\r",
                    "//    '<div class=\"touchtreegrid-list-content\">',\r",
                    "    me.getContentItemTpl(),\r",
                    " //   '</div>'\r",
                    "    ].join('');\r",
                    "}\r",
                    "\r",
                    "var renderers = {};\r",
                    "renderers.scope = me;\r",
                    "renderers.isExpanded = function(values) {return values.expanded;};\r",
                    "renderers.depthColor = function(values) {return (!colorArr[values.depth-1] ? 'white' : colorArr[values.depth-1]);};\r",
                    "renderers.formatNumbers = function(n, decPlaces, prefix, thouSeparator, decSeparator) {return me.formatNumbers(n, decPlaces, prefix, thouSeparator, decSeparator);};\r",
                    "\r",
                    "var customRenderers = me.getRenderers();\r",
                    "for (var prop in customRenderers) {\r",
                    "    renderers[prop] = customRenderers[prop];\r",
                    "}\r",
                    "\r",
                    "itemTpl = Ext.create('Ext.XTemplate', tpl, renderers);\r",
                    "\r",
                    "itemTpl.compile();\r",
                    "\r",
                    "list.setItemTpl(itemTpl);\r",
                    "\r",
                    "if (simpleList) list.refresh();\r",
                    "\r",
                    "/* Build Header TPL */\r",
                    "var header = me.getHeader();\r",
                    "var data = me.getColumns();\r",
                    "\r",
                    "var styleStr;\r",
                    "var headerTpl = me.getHeaderTplOverride();\r",
                    "if (headerTpl==='') {\r",
                    "\r",
                    "    var headerTplArr = [\r",
                    "    '<div style=\"display: -webkit-box;-webkit-box-orient: horizontal;'+me.getStyleHeaderRow()+'\">'    \r",
                    "    ];\r",
                    "    if (!simpleList) {\r",
                    "        headerTplArr.push('<p align=\"left\" style=\"width:4%;min-width:4%;max-width:4%;white-space: nowrap;overflow:hidden;text-overflow:ellipsis;\">&nbsp;</p>');\r",
                    "    }\r",
                    "\r",
                    "    for (var j=0; j<data.length; j++) {\r",
                    "\r",
                    "        // Use headerStyle if exists, else apply detail row style to category row\r",
                    "        if (data[j].headerStyle && data[j].headerStyle > '') {styleStr = data[j].headerStyle;}\r",
                    "        else if (data[j].style) {styleStr = data[j].style;}\r",
                    "        else {styleStr = '';}        \r",
                    "\r",
                    "        headerTplArr.push('<p class=\"grid-cell-hd\" style=\"min-width:' + data[j].width +\r",
                    "        ';white-space: nowrap;overflow:hidden;text-overflow:clip;' +\r",
                    "        styleStr + '\" dataIndex=\"'+data[j].dataIndex+'\">' + data[j].header + '</p>');               \r",
                    "    }\r",
                    "    headerTplArr.push('</div>');  \r",
                    "\r",
                    "    // Wrap with spacer to accomodate for disclosure icon(lines up columns better)\r",
                    "    var headerTplArr2 = [];\r",
                    "    if (disclose) {\r",
                    "        headerTplArr2.push('<div class=\"touchtreegrid-disclose-spacer\">');\r",
                    "        headerTplArr2 = headerTplArr2.concat(headerTplArr);\r",
                    "        headerTplArr2.push('</div>');  \r",
                    "    } else {\r",
                    "        headerTplArr2 = headerTplArr;\r",
                    "    }\r",
                    "\r",
                    "    headerTpl=headerTplArr2.join('');    \r",
                    "}\r",
                    "if (this.getIncludeHeader()) {\r",
                    "    header.setHtml(headerTpl);\r",
                    "}    \r",
                    "\r",
                    "\r",
                    "if (me.getApplyDefaultCollapseLevel() && !skipApplyDefaultCollapseLevel && !simpleList) {\r",
                    "    // custom implementations can request not to change collapse levels when refreshing\r",
                    "    me.doExpandDepth(me.getDefaultCollapseLevel());\r",
                    "}\r",
                    "\r",
                    "if (me.getIncludeFooter() && me.getIncludeFooterLevels() && !simpleList) {\r",
                    "    // Proceed to add expand/collapse levels  (horizontal scrolling toolbar LATER)\r",
                    "\r",
                    "    // First get total depth of treestore\r",
                    "    var store = list.getStore();\r",
                    "    maxDepth=0;\r",
                    "\r",
                    "    function doDrillDown(node) {\r",
                    "        if (!node.isLeaf()) {\r",
                    "            maxDepth = ((node.data.depth>maxDepth) ? node.data.depth : maxDepth);\r",
                    "\r",
                    "            node.childNodes.forEach(doDrillDown, me);\r",
                    "        }\r",
                    "    }\r",
                    "    store.each(doDrillDown, me);   \r",
                    "\r",
                    "    if (maxDepth>1) {\r",
                    "        // Remove button items 1+ if they exist\r",
                    "\r",
                    "        var btns = me.down('#touchtreegridbuttons');\r",
                    "        var itms = btns.getItems();\r",
                    "        var itmsOrigLength = itms.items.length;\r",
                    "        for (var k=itmsOrigLength-1; k>2; k--) {\r",
                    "            btns.remove(itms.items[k], true);\r",
                    "        }\r",
                    "\r",
                    "        var btnStyle = {};\r",
                    "\r",
                    "        // Add buton for each additional level\r",
                    "        var newbtn;\r",
                    "        for (var i=2; i <= maxDepth; i++) {\r",
                    "            if (colorDepth && colorDepthButtons) {\r",
                    "                btnStyle = {'background' : (!colorArr[i-1] ? 'white' : colorArr[i-1]),\r",
                    "                'color' : 'black'};\r",
                    "            }\r",
                    "            newbtn = {\r",
                    "                xtype: 'button',\r",
                    "                itemId: 'touchtreegriddepth'+i.toString(),\r",
                    "                cls  : 'touchtreegrid-expand-collapse-buttons',\r",
                    "                style : btnStyle,\r",
                    "                depth : i,\r",
                    "                text: i.toString(),\r",
                    "                listeners : {tap: function (button, e, options) {me.doExpandDepth(button.config.depth, button);}}\r",
                    "            };\r",
                    "\r",
                    "            btns.add(newbtn);\r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "3fc8bb9f-bd9c-40fa-92ab-a937926ceff3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "formatNumbers",
                "fn": "formatNumbers",
                "designer|params": [
                    "n",
                    "decPlaces",
                    "prefix",
                    "suffix",
                    "thouSeparator",
                    "decSeparator"
                ],
                "implHandler": [
                    "if (Ext.isEmpty(n)) {return n;};  // Don't format empty strings  ==\"\" || !n || isNaN(n)\r",
                    "decPlaces = (isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces);\r",
                    "prefix = (prefix == undefined ? \"\" : prefix);   // Example pass \"$\" sign for currency\r",
                    "suffix = (suffix == undefined ? \"\" : suffix);   // Example pass \"%\" sign for percents\r",
                    "\r",
                    "decSeparator = (decSeparator == undefined ? \".\" : decSeparator);\r",
                    "thouSeparator = (thouSeparator == undefined ? \",\" : thouSeparator);\r",
                    "sign = (n < 0 ? \"-\" : \"\");\r",
                    "i = parseInt(n = Math.abs(+n || 0).toFixed(decPlaces)) + \"\";\r",
                    "j = (((j = i.length) > 3) ? (j % 3) : 0);\r",
                    "return prefix + sign + (j ? i.substr(0, j) + thouSeparator : \"\") + \r",
                    "i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thouSeparator) + \r",
                    "(decPlaces ? decSeparator + Math.abs(n - i).toFixed(decPlaces).slice(2) : \"\") + suffix;"
                ]
            },
            "designerId": "0675b8b5-b285-4792-9a43-03964c721519"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "isObjectEmpty",
                "fn": "isObjectEmpty",
                "designer|params": [
                    "myObj"
                ],
                "implHandler": [
                    "for(var key in myObj) {\r",
                    "    if (myObj.hasOwnProperty(key)) {\r",
                    "        return false;\r",
                    "    }\r",
                    "}\r",
                    "return true;"
                ]
            },
            "designerId": "9d50c9f1-89ae-4607-979c-d9dc71f72d83"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "handleColumnSort",
                "fn": "handleColumnSort",
                "designer|params": [
                    "e,t"
                ],
                "implHandler": [
                    "// Refer to updateHeader() for code to add tap listener on header toolbar\r",
                    "//  header.element.on('tap', me[\"handleColumnSort\"], me, {});\r",
                    "\r",
                    "var me        = this,\r",
                    "    list      = me.getList(),\r",
                    "    columns   = me.getColumns(),\r",
                    "    cNum      = columns.length,\r",
                    "    store     = list.getStore(),\r",
                    "    el        = Ext.get(t),\r",
                    "    headerEl  = me.down('#touchtreegridheader').element,\r",
                    "    dataIndex = el.getAttribute('dataIndex'),\r",
                    "    sorters   = store.getSorters(),\r",
                    "    sorter    = sorters[0],\r",
                    "    dir       = sorter ? sorter.getDirection() : 'ASC',\r",
                    "    asc       = 'x-grid-sort-asc',\r",
                    "    desc      = 'x-grid-sort-desc',\r",
                    "    c, column, colEl;\r",
                    "\r",
                    "if (!dataIndex) return;  //Included in event of extra toolbar space at far right\r",
                    "\r",
                    "for (c=0; c < cNum; c++) {\r",
                    "    column = columns[c];\r",
                    "    if (column.dataIndex === dataIndex) {break;}\r",
                    "}\r",
                    "\r",
                    "if (!column.sortable) return;\r",
                    "\r",
                    "store.sort(dataIndex, dir === 'DESC' ? 'ASC' : 'DESC');\r",
                    "list.refresh();\r",
                    "\r",
                    "// Remove any prior sort indicators \r",
                    "for (c=0; c < cNum; c++) {\r",
                    "    colEl = Ext.get(headerEl.down('p.grid-cell-hd[dataIndex=' + columns[c].dataIndex + ']'));\r",
                    "    if (!me.isObjectEmpty(colEl)) {\r",
                    "        colEl.removeCls(asc);\r",
                    "        colEl.removeCls(desc);\r",
                    "    }    \r",
                    "}\r",
                    "\r",
                    "// Apply sort indicator to tapped column\r",
                    "el.addCls(dir === 'DESC' ? desc : asc);    \r",
                    "\r",
                    ""
                ]
            },
            "designerId": "fdf25490-0f20-4365-b2aa-663eebe25a46"
        }
    ]
}